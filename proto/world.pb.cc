// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "world.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace world {

namespace {

const ::google::protobuf::Descriptor* hello_w_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hello_w_reflection_ = NULL;
const ::google::protobuf::Descriptor* hello_w_ctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  hello_w_ctype_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_world_2eproto() {
  protobuf_AddDesc_world_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "world.proto");
  GOOGLE_CHECK(file != NULL);
  hello_w_descriptor_ = file->message_type(0);
  static const int hello_w_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, some_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, oc_),
  };
  hello_w_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hello_w_descriptor_,
      hello_w::default_instance_,
      hello_w_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hello_w));
  hello_w_ctype_descriptor_ = hello_w_descriptor_->nested_type(0);
  static const int hello_w_ctype_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w_ctype, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w_ctype, desc_),
  };
  hello_w_ctype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      hello_w_ctype_descriptor_,
      hello_w_ctype::default_instance_,
      hello_w_ctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w_ctype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(hello_w_ctype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(hello_w_ctype));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_world_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hello_w_descriptor_, &hello_w::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    hello_w_ctype_descriptor_, &hello_w_ctype::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_world_2eproto() {
  delete hello_w::default_instance_;
  delete hello_w_reflection_;
  delete hello_w_ctype::default_instance_;
  delete hello_w_ctype_reflection_;
}

void protobuf_AddDesc_world_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013world.proto\022\005world\"\202\001\n\007hello_w\022\n\n\002id\030\001"
    " \002(\005\022\013\n\003str\030\002 \002(\t\022\013\n\003opt\030\003 \001(\005\022\014\n\004some\030\005"
    " \003(\t\022 \n\002oc\030\004 \002(\0132\024.world.hello_w.ctype\032!"
    "\n\005ctype\022\n\n\002id\030\001 \002(\005\022\014\n\004desc\030\002 \002(\t", 153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "world.proto", &protobuf_RegisterTypes);
  hello_w::default_instance_ = new hello_w();
  hello_w_ctype::default_instance_ = new hello_w_ctype();
  hello_w::default_instance_->InitAsDefaultInstance();
  hello_w_ctype::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world_2eproto {
  StaticDescriptorInitializer_world_2eproto() {
    protobuf_AddDesc_world_2eproto();
  }
} static_descriptor_initializer_world_2eproto_;


// ===================================================================

const ::std::string hello_w_ctype::_default_desc_;
#ifndef _MSC_VER
const int hello_w_ctype::kIdFieldNumber;
const int hello_w_ctype::kDescFieldNumber;
#endif  // !_MSC_VER

hello_w_ctype::hello_w_ctype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hello_w_ctype::InitAsDefaultInstance() {
}

hello_w_ctype::hello_w_ctype(const hello_w_ctype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hello_w_ctype::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  desc_ = const_cast< ::std::string*>(&_default_desc_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hello_w_ctype::~hello_w_ctype() {
  SharedDtor();
}

void hello_w_ctype::SharedDtor() {
  if (desc_ != &_default_desc_) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void hello_w_ctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hello_w_ctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hello_w_ctype_descriptor_;
}

const hello_w_ctype& hello_w_ctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();  return *default_instance_;
}

hello_w_ctype* hello_w_ctype::default_instance_ = NULL;

hello_w_ctype* hello_w_ctype::New() const {
  return new hello_w_ctype;
}

void hello_w_ctype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (desc_ != &_default_desc_) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hello_w_ctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }
      
      // required string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hello_w_ctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string desc = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hello_w_ctype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string desc = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hello_w_ctype::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hello_w_ctype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hello_w_ctype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hello_w_ctype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hello_w_ctype::MergeFrom(const hello_w_ctype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hello_w_ctype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hello_w_ctype::CopyFrom(const hello_w_ctype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hello_w_ctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void hello_w_ctype::Swap(hello_w_ctype* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hello_w_ctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hello_w_ctype_descriptor_;
  metadata.reflection = hello_w_ctype_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string hello_w::_default_str_;
#ifndef _MSC_VER
const int hello_w::kIdFieldNumber;
const int hello_w::kStrFieldNumber;
const int hello_w::kOptFieldNumber;
const int hello_w::kSomeFieldNumber;
const int hello_w::kOcFieldNumber;
#endif  // !_MSC_VER

hello_w::hello_w()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void hello_w::InitAsDefaultInstance() {
  oc_ = const_cast< ::world::hello_w_ctype*>(&::world::hello_w_ctype::default_instance());
}

hello_w::hello_w(const hello_w& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void hello_w::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  str_ = const_cast< ::std::string*>(&_default_str_);
  opt_ = 0;
  oc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

hello_w::~hello_w() {
  SharedDtor();
}

void hello_w::SharedDtor() {
  if (str_ != &_default_str_) {
    delete str_;
  }
  if (this != default_instance_) {
    delete oc_;
  }
}

void hello_w::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* hello_w::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return hello_w_descriptor_;
}

const hello_w& hello_w::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();  return *default_instance_;
}

hello_w* hello_w::default_instance_ = NULL;

hello_w* hello_w::New() const {
  return new hello_w;
}

void hello_w::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (_has_bit(1)) {
      if (str_ != &_default_str_) {
        str_->clear();
      }
    }
    opt_ = 0;
    if (_has_bit(4)) {
      if (oc_ != NULL) oc_->::world::hello_w_ctype::Clear();
    }
  }
  some_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool hello_w::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }
      
      // required string str = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }
      
      // optional int32 opt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_oc;
        break;
      }
      
      // required .world.hello_w.ctype oc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_some;
        break;
      }
      
      // repeated string some = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_some:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_some()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->some(0).data(), this->some(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_some;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void hello_w::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string str = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->str(), output);
  }
  
  // optional int32 opt = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt(), output);
  }
  
  // required .world.hello_w.ctype oc = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->oc(), output);
  }
  
  // repeated string some = 5;
  for (int i = 0; i < this->some_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->some(i).data(), this->some(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->some(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* hello_w::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string str = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->str(), target);
  }
  
  // optional int32 opt = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opt(), target);
  }
  
  // required .world.hello_w.ctype oc = 4;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oc(), target);
  }
  
  // repeated string some = 5;
  for (int i = 0; i < this->some_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->some(i).data(), this->some(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->some(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int hello_w::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string str = 2;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional int32 opt = 3;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }
    
    // required .world.hello_w.ctype oc = 4;
    if (has_oc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oc());
    }
    
  }
  // repeated string some = 5;
  total_size += 1 * this->some_size();
  for (int i = 0; i < this->some_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->some(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void hello_w::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const hello_w* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const hello_w*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void hello_w::MergeFrom(const hello_w& from) {
  GOOGLE_CHECK_NE(&from, this);
  some_.MergeFrom(from.some_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
    if (from._has_bit(1)) {
      set_str(from.str());
    }
    if (from._has_bit(2)) {
      set_opt(from.opt());
    }
    if (from._has_bit(4)) {
      mutable_oc()->::world::hello_w_ctype::MergeFrom(from.oc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void hello_w::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hello_w::CopyFrom(const hello_w& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hello_w::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;
  
  if (has_oc()) {
    if (!this->oc().IsInitialized()) return false;
  }
  return true;
}

void hello_w::Swap(hello_w* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(str_, other->str_);
    std::swap(opt_, other->opt_);
    some_.Swap(&other->some_);
    std::swap(oc_, other->oc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata hello_w::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = hello_w_descriptor_;
  metadata.reflection = hello_w_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace world

// @@protoc_insertion_point(global_scope)
