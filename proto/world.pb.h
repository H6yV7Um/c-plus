// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef PROTOBUF_world_2eproto__INCLUDED
#define PROTOBUF_world_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace world {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_world_2eproto();
void protobuf_AssignDesc_world_2eproto();
void protobuf_ShutdownFile_world_2eproto();

class hello_w;
class hello_w_ctype;

// ===================================================================

class hello_w_ctype : public ::google::protobuf::Message {
 public:
  hello_w_ctype();
  virtual ~hello_w_ctype();
  
  hello_w_ctype(const hello_w_ctype& from);
  
  inline hello_w_ctype& operator=(const hello_w_ctype& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const hello_w_ctype& default_instance();
  
  void Swap(hello_w_ctype* other);
  
  // implements Message ----------------------------------------------
  
  hello_w_ctype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hello_w_ctype& from);
  void MergeFrom(const hello_w_ctype& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  
  // @@protoc_insertion_point(class_scope:world.hello_w.ctype)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* desc_;
  static const ::std::string _default_desc_;
  friend void  protobuf_AddDesc_world_2eproto();
  friend void protobuf_AssignDesc_world_2eproto();
  friend void protobuf_ShutdownFile_world_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static hello_w_ctype* default_instance_;
};
// -------------------------------------------------------------------

class hello_w : public ::google::protobuf::Message {
 public:
  hello_w();
  virtual ~hello_w();
  
  hello_w(const hello_w& from);
  
  inline hello_w& operator=(const hello_w& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const hello_w& default_instance();
  
  void Swap(hello_w* other);
  
  // implements Message ----------------------------------------------
  
  hello_w* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const hello_w& from);
  void MergeFrom(const hello_w& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef hello_w_ctype ctype;
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string str = 2;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 2;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  
  // optional int32 opt = 3;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);
  
  // repeated string some = 5;
  inline int some_size() const;
  inline void clear_some();
  static const int kSomeFieldNumber = 5;
  inline const ::std::string& some(int index) const;
  inline ::std::string* mutable_some(int index);
  inline void set_some(int index, const ::std::string& value);
  inline void set_some(int index, const char* value);
  inline void set_some(int index, const char* value, size_t size);
  inline ::std::string* add_some();
  inline void add_some(const ::std::string& value);
  inline void add_some(const char* value);
  inline void add_some(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& some() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_some();
  
  // required .world.hello_w.ctype oc = 4;
  inline bool has_oc() const;
  inline void clear_oc();
  static const int kOcFieldNumber = 4;
  inline const ::world::hello_w_ctype& oc() const;
  inline ::world::hello_w_ctype* mutable_oc();
  
  // @@protoc_insertion_point(class_scope:world.hello_w)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* str_;
  static const ::std::string _default_str_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::RepeatedPtrField< ::std::string> some_;
  ::world::hello_w_ctype* oc_;
  friend void  protobuf_AddDesc_world_2eproto();
  friend void protobuf_AssignDesc_world_2eproto();
  friend void protobuf_ShutdownFile_world_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static hello_w* default_instance_;
};
// ===================================================================


// ===================================================================

// hello_w_ctype

// required int32 id = 1;
inline bool hello_w_ctype::has_id() const {
  return _has_bit(0);
}
inline void hello_w_ctype::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 hello_w_ctype::id() const {
  return id_;
}
inline void hello_w_ctype::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required string desc = 2;
inline bool hello_w_ctype::has_desc() const {
  return _has_bit(1);
}
inline void hello_w_ctype::clear_desc() {
  if (desc_ != &_default_desc_) {
    desc_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& hello_w_ctype::desc() const {
  return *desc_;
}
inline void hello_w_ctype::set_desc(const ::std::string& value) {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void hello_w_ctype::set_desc(const char* value) {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void hello_w_ctype::set_desc(const char* value, size_t size) {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hello_w_ctype::mutable_desc() {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  return desc_;
}

// -------------------------------------------------------------------

// hello_w

// required int32 id = 1;
inline bool hello_w::has_id() const {
  return _has_bit(0);
}
inline void hello_w::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 hello_w::id() const {
  return id_;
}
inline void hello_w::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required string str = 2;
inline bool hello_w::has_str() const {
  return _has_bit(1);
}
inline void hello_w::clear_str() {
  if (str_ != &_default_str_) {
    str_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& hello_w::str() const {
  return *str_;
}
inline void hello_w::set_str(const ::std::string& value) {
  _set_bit(1);
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void hello_w::set_str(const char* value) {
  _set_bit(1);
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void hello_w::set_str(const char* value, size_t size) {
  _set_bit(1);
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hello_w::mutable_str() {
  _set_bit(1);
  if (str_ == &_default_str_) {
    str_ = new ::std::string;
  }
  return str_;
}

// optional int32 opt = 3;
inline bool hello_w::has_opt() const {
  return _has_bit(2);
}
inline void hello_w::clear_opt() {
  opt_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 hello_w::opt() const {
  return opt_;
}
inline void hello_w::set_opt(::google::protobuf::int32 value) {
  _set_bit(2);
  opt_ = value;
}

// repeated string some = 5;
inline int hello_w::some_size() const {
  return some_.size();
}
inline void hello_w::clear_some() {
  some_.Clear();
}
inline const ::std::string& hello_w::some(int index) const {
  return some_.Get(index);
}
inline ::std::string* hello_w::mutable_some(int index) {
  return some_.Mutable(index);
}
inline void hello_w::set_some(int index, const ::std::string& value) {
  some_.Mutable(index)->assign(value);
}
inline void hello_w::set_some(int index, const char* value) {
  some_.Mutable(index)->assign(value);
}
inline void hello_w::set_some(int index, const char* value, size_t size) {
  some_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* hello_w::add_some() {
  return some_.Add();
}
inline void hello_w::add_some(const ::std::string& value) {
  some_.Add()->assign(value);
}
inline void hello_w::add_some(const char* value) {
  some_.Add()->assign(value);
}
inline void hello_w::add_some(const char* value, size_t size) {
  some_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
hello_w::some() const {
  return some_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
hello_w::mutable_some() {
  return &some_;
}

// required .world.hello_w.ctype oc = 4;
inline bool hello_w::has_oc() const {
  return _has_bit(4);
}
inline void hello_w::clear_oc() {
  if (oc_ != NULL) oc_->::world::hello_w_ctype::Clear();
  _clear_bit(4);
}
inline const ::world::hello_w_ctype& hello_w::oc() const {
  return oc_ != NULL ? *oc_ : *default_instance_->oc_;
}
inline ::world::hello_w_ctype* hello_w::mutable_oc() {
  _set_bit(4);
  if (oc_ == NULL) oc_ = new ::world::hello_w_ctype;
  return oc_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace world

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_world_2eproto__INCLUDED
