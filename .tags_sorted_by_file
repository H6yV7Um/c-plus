islen	10\1011.cpp	/^bool islen=0;$/;"	v
main	10\1011.cpp	/^int main(){$/;"	f
mycompare	10\1011.cpp	/^bool mycompare(const string &p1,const string &p2){$/;"	f
mysort	10\1011.cpp	/^void mysort(T arr){$/;"	f
print	10\1011.cpp	/^void print(T arr){$/;"	f
lt5	10\1013.cpp	/^bool lt5(const string &str,size_t size){$/;"	f
main	10\1013.cpp	/^int main(){$/;"	f
ltsize	10\1022.cpp	/^bool ltsize(const string &str,size_t size,istream & in){$/;"	f
main	10\1022.cpp	/^int main(){$/;"	f
main	10\1027.cpp	/^int main(){$/;"	f
main	10\1029.cpp	/^int main(){$/;"	f
main	10\1030.cpp	/^int main(){$/;"	f
main	10\1032.cpp	/^int main(){$/;"	f
main	10\104.cpp	/^int main(){$/;"	f
main	10\105.cpp	/^int main(){$/;"	f
main	10\1118.cpp	/^int main(){$/;"	f
main	10\accumulate.cpp	/^int main(){$/;"	f
P	10\class.cpp	/^	P(){$/;"	f	struct:P
P	10\class.cpp	/^struct P{$/;"	s	file:
main	10\class.cpp	/^int main(){$/;"	f
p	10\class.cpp	/^void p(){$/;"	f
main	10\copy.cpp	/^int main(){$/;"	f
main	10\count_if.cpp	/^int main(){$/;"	f
main	10\fill.cpp	/^int main(){$/;"	f
main	10\func.cpp	/^int main(){$/;"	f
print	10\func.cpp	/^void print(){$/;"	f
test	10\func.cpp	/^void (*test())(){$/;"	f
HEAD	10\head.h	2;"	d
myread	10\head.h	/^T1 &myread(const string &str,T1 &t,T2 i){$/;"	f
print	10\head.h	/^void print(T &t){$/;"	f
main	10\inserter.cpp	/^int main(){$/;"	f
print	10\inserter.cpp	/^void print(deque<int> deq){$/;"	f
main	10\isdigit.cpp	/^int main(){$/;"	f
main	10\iteretor.cpp	/^int main(){$/;"	f
base	10\lambda.cpp	/^int base = 99;$/;"	v
main	10\lambda.cpp	/^int main(){$/;"	f
sort_filter	10\lambda.cpp	/^void sort_filter(vector<string> strs,size_t sizes){$/;"	f
main	10\list.cpp	/^int main(){$/;"	f
main	10\name.cpp	/^int main(){$/;"	f
str	10\name.cpp	/^string str = "curplace";$/;"	v
name	10\name_1.h	/^	string name="qinhan";$/;"	m	namespace:name_2
name_1	10\name_1.h	/^namespace name_1{$/;"	n
name_1_1	10\name_1.h	/^	namespace name_1_1{$/;"	n	namespace:name_1
name_2	10\name_1.h	/^namespace name_2{$/;"	n
str	10\name_1.h	/^		string str="name_1_1";$/;"	m	namespace:name_1::name_1_1
str	10\name_1.h	/^	string str="name_1";$/;"	m	namespace:name_1
name	10\name_2.h	/^	string name="qinhan";$/;"	m	namespace:name_1
name_1	10\name_2.h	/^namespace name_1{$/;"	n
name_2	10\name_2.h	/^namespace name_2{$/;"	n
name_2_1	10\name_2.h	/^        namespace name_2_1{$/;"	n	namespace:name_2
str	10\name_2.h	/^                string str="name_2_1";$/;"	m	namespace:name_2::name_2_1
str	10\name_2.h	/^        string str="name_2";$/;"	m	namespace:name_2
main	10\reverse_iterator.cpp	/^int main(){$/;"	f
No	10\sale_data.h	/^	string No;$/;"	m	class:sale_data
SALE_DATA	10\sale_data.h	2;"	d
all_price	10\sale_data.h	/^	double all_price=0.0;$/;"	m	class:sale_data
count	10\sale_data.h	/^	int count=0;$/;"	m	class:sale_data
getAllPrice	10\sale_data.h	/^	double getAllPrice()const{$/;"	f	class:sale_data
getCount	10\sale_data.h	/^	int getCount()const{$/;"	f	class:sale_data
getNo	10\sale_data.h	/^	string getNo()const{$/;"	f	class:sale_data
operator +	10\sale_data.h	/^	sale_data & operator+(const sale_data &sale){$/;"	f	class:sale_data
operator <	10\sale_data.h	/^	bool operator<(const sale_data & sale){$/;"	f	class:sale_data
operator >>	10\sale_data.h	/^istream & operator>>(istream &in,sale_data &sale){$/;"	f
sale_data	10\sale_data.h	/^class sale_data{$/;"	c
ite	10\sis.cpp	/^typedef vector<int>::iterator ite;$/;"	t	file:
main	10\sis.cpp	/^int main(){$/;"	f
minx	10\sis.cpp	/^ite minx(ite b,ite e){$/;"	f
quick_sort	10\sis.cpp	/^void quick_sort(vector<int> arr,ite b,ite e){$/;"	f
sample_select_sort	10\sis.cpp	/^void sample_select_sort(vector<int> arr){$/;"	f
straight_insert_sort	10\sis.cpp	/^void straight_insert_sort(vector<int> arr){$/;"	f
main	10\sort_unique.cpp	/^int main(){$/;"	f
sort_unique	10\sort_unique.cpp	/^void sort_unique(vector<string> &strs){$/;"	f
main	10\static.cpp	/^int main(){$/;"	f
main	10\strdup.cpp	/^int main(){$/;"	f
main	10\test.cpp	/^int main(){$/;"	f
main	11\1112.cpp	/^int main(){$/;"	f
main	11\113.cpp	/^int main(){$/;"	f
add_child	11\116.cpp	/^void add_child(family &f,const string &str,const string &child){$/;"	f
add_family	11\116.cpp	/^void add_family(family &f,const string &str){$/;"	f
family	11\116.cpp	/^typedef map<string,vector<string>> family;$/;"	t	file:
main	11\116.cpp	/^int main(){$/;"	f
main	11\119.cpp	/^int main(){$/;"	f
main	11\class.cpp	/^int main(){$/;"	f
num	11\class.cpp	/^	static const int num=100;$/;"	m	class:test	file:
sm	11\class.cpp	/^	int sm = 99;$/;"	m	class:test	file:
test	11\class.cpp	/^class test{$/;"	c	file:
comp	11\compare.cpp	/^bool comp(const string &s1,const string &s2){$/;"	f
main	11\compare.cpp	/^int main(){$/;"	f
main	11\find.cpp	/^int main(){$/;"	f
HEAD	11\head.h	2;"	d
lower	11\head.h	/^void lower(string &str){$/;"	f
myread	11\head.h	/^T1 &myread(const string &str,T1 &t,T2 i){$/;"	f
print	11\head.h	/^void print(T &t){$/;"	f
main	11\iterator.cpp	/^int main(){$/;"	f
ifs	11\replace.cpp	/^typedef ifstream ifs;$/;"	t	file:
main	11\replace.cpp	/^int main(){$/;"	f
myreplace	11\replace.cpp	/^string myreplace(ifs &i1,ifs &i2){$/;"	f
namemap	11\replace.cpp	/^map<string,string> namemap(ifs &i1){$/;"	f
main	12\1223.cpp	/^int main(){$/;"	f
main	12\1224.cpp	/^int main(){$/;"	f
main	12\allocator.cpp	/^int main(){$/;"	f
main	12\class.cpp	/^int main(){$/;"	f
num	12\class.cpp	/^		int num;$/;"	m	class:xy	file:
test	12\class.cpp	/^	test(){cout<<"construct"<<endl;}$/;"	f	class:test
test	12\class.cpp	/^class test:public test2,public test1{$/;"	c	file:
test1	12\class.cpp	/^	test1(){cout<<"construct1"<<endl;}$/;"	f	class:test1
test1	12\class.cpp	/^class test1{$/;"	c	file:
test2	12\class.cpp	/^	test2(){cout<<"construct2"<<endl;}$/;"	f	class:test2
test2	12\class.cpp	/^class test2{$/;"	c	file:
xy	12\class.cpp	/^class xy{$/;"	c	file:
xy	12\class.cpp	/^xy::xy(int p):num(p){$/;"	f	class:xy
~test	12\class.cpp	/^	~test(){cout<<"destory"<<endl;}$/;"	f	class:test
~test1	12\class.cpp	/^	~test1(){cout<<"destory1"<<endl;}$/;"	f	class:test1
~test2	12\class.cpp	/^	~test2(){cout<<"destory2"<<endl;}$/;"	f	class:test2
cn	12\copy.cpp	/^	cn(){$/;"	f	struct:cn
cn	12\copy.cpp	/^	cn(cn &p){$/;"	f	struct:cn
cn	12\copy.cpp	/^	cn(string pstr){$/;"	f	struct:cn
cn	12\copy.cpp	/^struct cn{$/;"	s	file:
main	12\copy.cpp	/^int main(){$/;"	f
operator =	12\copy.cpp	/^	void operator=(const cn &p){$/;"	f	struct:cn
pt	12\copy.cpp	/^	void pt(){$/;"	f	struct:cn
str	12\copy.cpp	/^	string str="default";$/;"	m	struct:cn	file:
~cn	12\copy.cpp	/^	~cn(){$/;"	f	struct:cn
_sort	12\map.cpp	/^bool _sort(const string &s1,const string &s2 ){$/;"	f
main	12\map.cpp	/^int main(){$/;"	f
main	12\set.cpp	/^int main(){$/;"	f
main	12\shared_ptr.cpp	/^int main(int argc,char **args){$/;"	f
process	12\shared_ptr.cpp	/^void process(shared_ptr<string> p){$/;"	f
test	12\shared_ptr.cpp	/^		test(){cout<<"construct"<<endl;}$/;"	f	class:test
test	12\shared_ptr.cpp	/^class test{$/;"	c	file:
~test	12\shared_ptr.cpp	/^		~test(){cout<<"destruct"<<endl;}$/;"	f	class:test
begin	12\str_blob.cpp	/^inline strBlobPtr strBlob::begin(){$/;"	f	class:strBlob
check	12\str_blob.cpp	/^	sp check(size_t size){$/;"	f	class:strBlobPtr	file:
check	12\str_blob.cpp	/^	void check(size_t size){$/;"	f	class:strBlob	file:
cur	12\str_blob.cpp	/^	size_t cur=0;$/;"	m	class:strBlobPtr	file:
cur	12\str_blob.cpp	/^	string cur(size_t size){$/;"	f	class:strBlob
data	12\str_blob.cpp	/^	sp data;$/;"	m	class:strBlob	file:
data	12\str_blob.cpp	/^	wp data;	$/;"	m	class:strBlobPtr	file:
end	12\str_blob.cpp	/^inline strBlobPtr strBlob::end(){$/;"	f	class:strBlob
incre	12\str_blob.cpp	/^	strBlobPtr & incre(){$/;"	f	class:strBlobPtr
main	12\str_blob.cpp	/^int main(){$/;"	f
operator !=	12\str_blob.cpp	/^	bool operator!=(const strBlobPtr &p){$/;"	f	class:strBlobPtr
ref	12\str_blob.cpp	/^	string ref(){$/;"	f	class:strBlobPtr
sp	12\str_blob.cpp	/^typedef shared_ptr<vector<string>> sp;$/;"	t	file:
strBlob	12\str_blob.cpp	/^	strBlob():data(new vector<string>()){};$/;"	f	class:strBlob
strBlob	12\str_blob.cpp	/^	strBlob(initializer_list<string> pl) :data(make_shared<vector<string>>(pl)){};$/;"	f	class:strBlob
strBlob	12\str_blob.cpp	/^class strBlob{$/;"	c	file:
strBlobPtr	12\str_blob.cpp	/^	strBlobPtr(){};$/;"	f	class:strBlobPtr
strBlobPtr	12\str_blob.cpp	/^	strBlobPtr(const strBlob &p):data(p.data){};$/;"	f	class:strBlobPtr
strBlobPtr	12\str_blob.cpp	/^	strBlobPtr(const strBlob &p,size_t size):data(p.data),cur(size){};$/;"	f	class:strBlobPtr
strBlobPtr	12\str_blob.cpp	/^class strBlobPtr{$/;"	c	file:
wp	12\str_blob.cpp	/^typedef weak_ptr<vector<string>> wp;$/;"	t	file:
QUERYRESULT_H	12\text\QueryResult.h	31;"	d
QueryResult	12\text\QueryResult.h	/^	QueryResult(std::string s, $/;"	f	class:QueryResult
QueryResult	12\text\QueryResult.h	/^class QueryResult {$/;"	c
begin	12\text\QueryResult.h	/^	line_it begin() const { return lines->begin(); }$/;"	f	class:QueryResult
end	12\text\QueryResult.h	/^	line_it end() const   { return lines->end(); }$/;"	f	class:QueryResult
file	12\text\QueryResult.h	/^	std::tr1::shared_ptr<std::vector<std::string> > file;  \/\/input file$/;"	m	class:QueryResult
get_file	12\text\QueryResult.h	/^	std::tr1::shared_ptr<std::vector<std::string> > get_file() { return file; }$/;"	f	class:QueryResult
line_it	12\text\QueryResult.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:QueryResult
line_no	12\text\QueryResult.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:QueryResult
lines	12\text\QueryResult.h	/^	std::tr1::shared_ptr<std::set<line_no> > lines; \/\/ lines it's on$/;"	m	class:QueryResult
size	12\text\QueryResult.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:QueryResult
sought	12\text\QueryResult.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:QueryResult
TextQuery	12\text\TextQuery.cc	/^TextQuery::TextQuery(ifstream &is): file(new vector<string>)$/;"	f	class:TextQuery
cleanup_str	12\text\TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery
display_map	12\text\TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery
lineIter	12\text\TextQuery.cc	/^typedef set<TextQuery::line_no>::const_iterator lineIter;$/;"	t	file:
lineType	12\text\TextQuery.cc	/^typedef shared_ptr<set<TextQuery::line_no> > lineType;$/;"	t	file:
print	12\text\TextQuery.cc	/^ostream &print(ostream & os, const QueryResult &qr)$/;"	f
query	12\text\TextQuery.cc	/^TextQuery::query(const string &sought) const$/;"	f	class:TextQuery
wmIter	12\text\TextQuery.cc	/^typedef wmType::const_iterator wmIter;$/;"	t	file:
wmType	12\text\TextQuery.cc	/^typedef map<string, shared_ptr<set<TextQuery::line_no> > > wmType;$/;"	t	file:
TEXTQUERY_H	12\text\TextQuery.h	31;"	d
TextQuery	12\text\TextQuery.h	/^class TextQuery {$/;"	c
file	12\text\TextQuery.h	/^    std::tr1::shared_ptr<std::vector<std::string> > file; \/\/ input file$/;"	m	class:TextQuery
line_no	12\text\TextQuery.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
wm	12\text\TextQuery.h	/^	         std::tr1::shared_ptr<std::set<line_no> > > wm;  $/;"	m	class:TextQuery
main	12\text\querymain.cc	/^int main(int argc, char **argv)$/;"	f
runQueries	12\text\querymain.cc	/^void runQueries(ifstream &infile)$/;"	f
main	12\text\text\query.cc	/^int main(int argc,char **argv){$/;"	f
run	12\text\text\query.cc	/^ifstream & run(ifstream &fn){$/;"	f
RESULT	12\text\text\result.h	2;"	d
file	12\text\text\result.h	/^		fvec file;$/;"	m	class:result
fvec	12\text\text\result.h	/^		typedef shared_ptr<vector<string>> fvec;$/;"	t	class:result
key	12\text\text\result.h	/^		string key;$/;"	m	class:result
line	12\text\text\result.h	/^		typedef vector<string>::size_type line;$/;"	t	class:result
lines	12\text\text\result.h	/^		lset lines;$/;"	m	class:result
lset	12\text\text\result.h	/^		typedef shared_ptr<set<line>> lset;$/;"	t	class:result
result	12\text\text\result.h	/^		result(string k,lset l,fvec f):key(k),lines(l),file(f){}$/;"	f	class:result
result	12\text\text\result.h	/^class result{$/;"	c
clearup_str	12\text\text\text.cc	/^void clearup_str(string &line){$/;"	f
make_plural	12\text\text\text.cc	/^string make_plural(int size,string prefix,string str){$/;"	f
print	12\text\text\text.cc	/^void print(ostream &out,result &ret){$/;"	f
query	12\text\text\text.cc	/^result text::query(string str){$/;"	f	class:text
text	12\text\text\text.cc	/^text::text(ifstream &fn):file(new vector<string>()){$/;"	f	class:text
TEXT	12\text\text\text.h	2;"	d
file	12\text\text\text.h	/^		fvec file;$/;"	m	class:text
fvec	12\text\text\text.h	/^typedef shared_ptr<vector<string>> fvec;$/;"	t
keymap	12\text\text\text.h	/^		kmap keymap;	$/;"	m	class:text
kmap	12\text\text\text.h	/^typedef map<string,shared_ptr<set<line>>> kmap;$/;"	t
line	12\text\text\text.h	/^typedef vector<string>::size_type line;$/;"	t
text	12\text\text\text.h	/^class text{$/;"	c
HEAD	12\textquery\head.h	2;"	d
main	12\textquery\main.cpp	/^int main(){$/;"	f
keylist	12\textquery\textquery.cpp	/^		typedef shared_ptr<vector<string>> keylist;$/;"	t	class:textquery	file:
keyset	12\textquery\textquery.cpp	/^		typedef map<string,set<int>> keyset; $/;"	t	class:textquery	file:
query	12\textquery\textquery.cpp	/^		textresult query(string key){$/;"	f	class:textquery
retmap	12\textquery\textquery.cpp	/^		keyset retmap; $/;"	m	class:textquery	file:
text	12\textquery\textquery.cpp	/^		keylist text;$/;"	m	class:textquery	file:
textquery	12\textquery\textquery.cpp	/^		textquery(string filename):text(new vector<string>){$/;"	f	class:textquery
textquery	12\textquery\textquery.cpp	/^class textquery{$/;"	c	file:
~textquery	12\textquery\textquery.cpp	/^		~textquery(){		$/;"	f	class:textquery
key	12\textquery\textresult.cpp	/^	string key;$/;"	m	struct:textresult	file:
lines	12\textquery\textresult.cpp	/^	vector<string> lines;$/;"	m	struct:textresult	file:
scores	12\textquery\textresult.cpp	/^	set<int> scores;$/;"	m	struct:textresult	file:
textresult	12\textquery\textresult.cpp	/^struct textresult{$/;"	s	file:
main	12\unique_error.cpp	/^int main(){$/;"	f
base	12\xy.cpp	8;"	d	file:
log	12\xy.cpp	4;"	d	file:
log1	12\xy.cpp	5;"	d	file:
log2	12\xy.cpp	6;"	d	file:
main	12\xy.cpp	/^int  main(){$/;"	f
funcFactory	13\1313.cpp	12;"	d	file:
main	13\1313.cpp	/^int main(int argc,char **argv){$/;"	f
str	13\1313.cpp	/^		string str;$/;"	m	class:strC	file:
strC	13\1313.cpp	/^		strC(string str):str(str){cout<<"strC construct:"<<str<<endl;}$/;"	f	class:strC
strC	13\1313.cpp	/^class strC{$/;"	c	file:
~strC	13\1313.cpp	/^		~strC(){cout<<"strC destory"<<endl;}$/;"	f	class:strC
f	13\1315.cpp	/^void f(const numbered &p){$/;"	f
main	13\1315.cpp	/^int main(){$/;"	f
numbered	13\1315.cpp	/^		numbered(){rn = randNum();cout<<"cons:"<<rn<<endl;}$/;"	f	class:numbered
numbered	13\1315.cpp	/^		numbered(const numbered & n){ cout<<"copy:"<<n.rn<<endl;rn = randNum();}$/;"	f	class:numbered
numbered	13\1315.cpp	/^class numbered{$/;"	c	file:
randNum	13\1315.cpp	/^int randNum(){$/;"	f
rn	13\1315.cpp	/^		int rn;$/;"	m	class:numbered	file:
cp	13\132.cpp	/^		cp(const cp &p){$/;"	f	class:cp
cp	13\132.cpp	/^		cp(string s){$/;"	f	class:cp
cp	13\132.cpp	/^class cp{$/;"	c	file:
main	13\132.cpp	/^int main(){$/;"	f
HasPtr	13\1327.cpp	/^		HasPtr(const HasPtr &p):s(p.s),i(p.i),usei(p.usei){$/;"	f	class:HasPtr
HasPtr	13\1327.cpp	/^		HasPtr(string str,int num):s(new string(str)),i(num),usei(new size_t(1)){$/;"	f	class:HasPtr
HasPtr	13\1327.cpp	/^class HasPtr{$/;"	c	file:
f	13\1327.cpp	/^		void f(){$/;"	f	class:HasPtr
i	13\1327.cpp	/^		int i;$/;"	m	class:HasPtr	file:
main	13\1327.cpp	/^int main(){$/;"	f
operator <	13\1327.cpp	/^		bool operator<(const HasPtr &a){$/;"	f	class:HasPtr
operator =	13\1327.cpp	/^		HasPtr & operator=(const HasPtr &p){$/;"	f	class:HasPtr
p	13\1327.cpp	/^	friend void p(const HasPtr & a){$/;"	f	class:HasPtr	file:
s	13\1327.cpp	/^		string *s;$/;"	m	class:HasPtr	file:
swap	13\1327.cpp	/^	friend void swap(HasPtr & a,HasPtr & b){$/;"	f	class:HasPtr	file:
usei	13\1327.cpp	/^		size_t *usei;$/;"	m	class:HasPtr	file:
~HasPtr	13\1327.cpp	/^		~HasPtr(){$/;"	f	class:HasPtr
add_to_folders	13\folder\folder.cpp	/^void msg::add_to_folders(const msg &p){$/;"	f	class:msg
add_to_msg	13\folder\folder.cpp	/^void folder::add_to_msg(const folder &p){$/;"	f	class:folder
folder	13\folder\folder.cpp	/^folder::folder(const folder &p):name(p.name),messages(p.messages){$/;"	f	class:folder
msg	13\folder\folder.cpp	/^msg::msg(const msg &p):name(p.name),folders(p.folders){$/;"	f	class:msg
operator =	13\folder\folder.cpp	/^msg& msg::operator=(const msg &p){$/;"	f	class:msg
remove	13\folder\folder.cpp	/^void folder::remove(msg &p){$/;"	f	class:folder
remove	13\folder\folder.cpp	/^void msg::remove(folder &p){$/;"	f	class:msg
rm_from_folders	13\folder\folder.cpp	/^void msg::rm_from_folders(){$/;"	f	class:msg
rm_from_msg	13\folder\folder.cpp	/^void folder::rm_from_msg(){$/;"	f	class:folder
save	13\folder\folder.cpp	/^void folder::save(msg &p){$/;"	f	class:folder
save	13\folder\folder.cpp	/^void msg::save(folder &p){$/;"	f	class:msg
MSG	13\folder\folder.h	2;"	d
add_folder	13\folder\folder.h	/^		void add_folder(folder *p){folders.insert(p);}$/;"	f	class:msg
add_msg	13\folder\folder.h	/^		void add_msg(msg *p){messages.insert(p);}$/;"	f	class:folder
folder	13\folder\folder.h	/^		folder(std::string str=""):name(str){}$/;"	f	class:folder
folder	13\folder\folder.h	/^class folder{$/;"	c
folders	13\folder\folder.h	/^		std::set<folder*> folders;	$/;"	m	class:msg
messages	13\folder\folder.h	/^		std::set<msg*> messages;$/;"	m	class:folder
msg	13\folder\folder.h	/^		msg(const std::string &str=""):name(str){}$/;"	f	class:msg
msg	13\folder\folder.h	/^class msg{$/;"	c
name	13\folder\folder.h	/^		std::string name;$/;"	m	class:folder
name	13\folder\folder.h	/^		std::string name;$/;"	m	class:msg
rm_folder	13\folder\folder.h	/^		void rm_folder(folder *p){folders.erase(p);}$/;"	f	class:msg
rm_msg	13\folder\folder.h	/^		void rm_msg(msg *p){messages.erase(p);}$/;"	f	class:folder
~folder	13\folder\folder.h	/^		~folder(){};$/;"	f	class:folder
~msg	13\folder\folder.h	/^		~msg(){};$/;"	f	class:msg
main	13\folder\foldermain.cpp	/^int main(){$/;"	f
main	13\lval.cpp	/^int main() {$/;"	f
main	13\rand.cpp	/^int main(){$/;"	f
alloc	13\strvec\strVec.cpp	/^std::allocator<std::string> strVec::alloc;$/;"	m	class:strVec	file:
alloc_n_copy	13\strvec\strVec.cpp	/^std::pair<std::string*,std::string*> strVec::alloc_n_copy(const std::string *b,const std::string *e){$/;"	f	class:strVec
free	13\strvec\strVec.cpp	/^void strVec::free(){$/;"	f	class:strVec
operator =	13\strvec\strVec.cpp	/^strVec & strVec::operator=(const strVec &p){$/;"	f	class:strVec
push_back	13\strvec\strVec.cpp	/^void strVec::push_back(const std::string &str){$/;"	f	class:strVec
reallocate	13\strvec\strVec.cpp	/^void strVec::reallocate(){$/;"	f	class:strVec
strVec	13\strvec\strVec.cpp	/^strVec::strVec(const strVec &p){$/;"	f	class:strVec
STRVEC	13\strvec\strVec.h	2;"	d
alloc	13\strvec\strVec.h	/^		static std::allocator<std::string> alloc;$/;"	m	class:strVec
begin	13\strvec\strVec.h	/^		std::string *begin() const{ return elements;}$/;"	f	class:strVec
cap	13\strvec\strVec.h	/^		std::string *cap;$/;"	m	class:strVec
capacity	13\strvec\strVec.h	/^		std::size_t capacity(){$/;"	f	class:strVec
check_n_alloc	13\strvec\strVec.h	/^		void check_n_alloc(){$/;"	f	class:strVec
elements	13\strvec\strVec.h	/^		std::string *elements;$/;"	m	class:strVec
end	13\strvec\strVec.h	/^		std::string *end() const{ return first_free;}$/;"	f	class:strVec
first_free	13\strvec\strVec.h	/^		std::string *first_free;$/;"	m	class:strVec
size	13\strvec\strVec.h	/^		std::size_t size(){$/;"	f	class:strVec
strVec	13\strvec\strVec.h	/^		strVec():elements(nullptr),first_free(nullptr),cap(nullptr){}$/;"	f	class:strVec
strVec	13\strvec\strVec.h	/^class strVec{$/;"	c
~strVec	13\strvec\strVec.h	/^		~strVec(){$/;"	f	class:strVec
main	13\strvec\vec.cpp	/^int main(){$/;"	f
main	1\117.cpp	/^int main(){$/;"	f
main	1\120.cpp	/^int main(){$/;"	f
main	1\2.cpp	/^int main(){$/;"	f
main	1\23.cpp	/^int main(){$/;"	f
main	1\29.cpp	/^int main(){$/;"	f
f	1\30.cpp	/^float f;$/;"	v
in	1\30.cpp	/^int in;$/;"	v
main	1\30.cpp	/^int main(){$/;"	f
x	1\30.cpp	/^char x;$/;"	v
SALESITEM_H	1\Sales_item.h	39;"	d
Sales_item	1\Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	1\Sales_item.h	/^    Sales_item(const std::string &book): $/;"	f	class:Sales_item
Sales_item	1\Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	1\Sales_item.h	/^class Sales_item {$/;"	c
avg_price	1\Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
bookNo	1\Sales_item.h	/^    std::string bookNo;      \/\/ implicitly initialized to the empty string$/;"	m	class:Sales_item
compareIsbn	1\Sales_item.h	/^bool compareIsbn(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
isbn	1\Sales_item.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_item
operator !=	1\Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator +	1\Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +=	1\Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator <<	1\Sales_item.h	/^operator<<(std::ostream& out, const Sales_item& s)$/;"	f
operator ==	1\Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	1\Sales_item.h	/^operator>>(std::istream& in, Sales_item& s)$/;"	f
revenue	1\Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
units_sold	1\Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
main	1\char.cpp	/^int main(){$/;"	f
main	1\cj.cpp	/^int main(){$/;"	f
main	1\extern.cpp	/^int main(){$/;"	f
main	1\hello.cpp	/^int main(){$/;"	f
main	2\216.cpp	/^int main(){$/;"	f
main	2\233.cpp	/^int main(){$/;"	f
init	2\const.cpp	/^extern const int init=100;$/;"	v
c	2\conste.cpp	/^const int c = 100;$/;"	v
main	2\conste.cpp	/^int main(){$/;"	f
main	2\init.cpp	/^int main(){$/;"	f
bNo	2\mystruct.cpp	/^	std::string bNo;$/;"	m	struct:one	file:
getNum	2\mystruct.cpp	/^	void getNum(){$/;"	f	struct:one
main	2\mystruct.cpp	/^int main(){$/;"	f
num	2\mystruct.cpp	/^	int num=10;$/;"	m	struct:one	file:
one	2\mystruct.cpp	/^struct one{ $/;"	s	file:
oneObj	2\mystruct.cpp	/^} oneObj;$/;"	v	typeref:struct:one
w	2\mystruct.cpp	/^int w;$/;"	v
z	2\mystruct.cpp	/^double z;$/;"	v
main	2\ptr.cpp	/^int main(){$/;"	f
four	2\sale_data.cpp	/^string four = "qinhan";$/;"	v
main	2\sale_data.cpp	/^int main(){$/;"	f
three	2\sale_data.cpp	/^int three = 999;$/;"	v
two	2\sale_data.cpp	/^const int two = 333;$/;"	v
SALES_DATA_H	2\sales_data.h	2;"	d
bNo	2\sales_data.h	/^	std::string bNo;$/;"	m	struct:sales_data
one	2\sales_data.h	/^const int one = 100;$/;"	v
price	2\sales_data.h	/^	double price=0.0;$/;"	m	struct:sales_data
print_info	2\sales_data.h	/^	void print_info(){$/;"	f	struct:sales_data
saleCount	2\sales_data.h	/^	double saleCount=0.0;$/;"	m	struct:sales_data
saleNum	2\sales_data.h	/^	int saleNum=0;$/;"	m	struct:sales_data
sales_data	2\sales_data.h	/^struct sales_data{$/;"	s
w	2\sales_data.h	/^int w = 111222;$/;"	v
main	3\31.cpp	/^int main(){$/;"	f
main	3\311.cpp	/^int main(){$/;"	f
main	3\320.cpp	/^int main(){$/;"	f
main	3\322.cpp	/^int main(){$/;"	f
main	3\323.cpp	/^int main(){$/;"	f
main	3\325.cpp	/^int main(){$/;"	f
main	3\329.cpp	/^int main(){$/;"	f
main	3\335.cpp	/^int main(){$/;"	f
main	3\337.cpp	/^int main(){$/;"	f
main	3\339.cpp	/^int main(){$/;"	f
main	3\34.cpp	/^int main(){$/;"	f
main	3\343.cpp	/^int main(){$/;"	f
main	3\35.cpp	/^int main(){$/;"	f
main	3\36.cpp	/^int main(){$/;"	f
main	3\arr.cpp	/^int main(){$/;"	f
main	3\constt.cpp	/^int main(){$/;"	f
main	3\debug.cpp	/^int main(){$/;"	f
main	3\mvector.cpp	/^int main(){$/;"	f
main	3\mvt.cpp	/^int main(){$/;"	f
main	3\mycctype.cpp	/^int main(){$/;"	f
main	3\op.cpp	/^int main(){$/;"	f
main	3\str.cpp	/^int main(){$/;"	f
main	3\test\main.cpp	/^int main(){$/;"	f
_GLOBAL__I_one	3\test\main.s	/^_GLOBAL__I_one:$/;"	l
_Z41__static_initialization_and_destruction_0ii	3\test\main.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
_ZZL18__gthread_active_pvE20__gthread_active_ptr	3\test\main.s	/^_ZZL18__gthread_active_pvE20__gthread_active_ptr:$/;"	l
init	3\test\main.s	/^init:$/;"	l
main	3\test\main.s	/^main:$/;"	l
one	3\test\main.s	/^one:$/;"	l
MAX	3\test\pre.h	3;"	d
PRE	3\test\pre.h	2;"	d
init	3\test\pre.h	/^int init=100;$/;"	v
SON	3\test\son.h	2;"	d
one	3\test\son.h	/^string one="hello world";$/;"	v
main	4\421.cpp	/^int main(){$/;"	f
main	4\433.cpp	/^int main(){$/;"	f
main	4\514.cpp	/^int main(){$/;"	f
main	4\goto.cpp	/^int main(){$/;"	f
main	4\mcast.cpp	/^int main(){$/;"	f
main	4\msizeof.cpp	/^int main(){$/;"	f
main	4\null.cpp	/^int main(){$/;"	f
main	5\523.cpp	/^int main(){$/;"	f
main	6\610.cpp	/^int main(){$/;"	f
sx	6\610.cpp	/^void sx(int *x,int *y){$/;"	f
compare	6\621.cpp	/^int compare(int x,const int *y){$/;"	f
main	6\621.cpp	/^int main(){$/;"	f
main	6\625.cpp	/^int main(int argc,char * argv[]){$/;"	f
cheng	6\654.cpp	/^int cheng(const int &x,const int &y){$/;"	f
chu	6\654.cpp	/^int chu(const int &x,const int &y){$/;"	f
jia	6\654.cpp	/^int jia(const int &x,const int &y){$/;"	f
jian	6\654.cpp	/^int jian(const int &x,const int &y){$/;"	f
main	6\654.cpp	/^int main(){$/;"	f
count	6\67.cpp	/^size_t count(){$/;"	f
main	6\67.cpp	/^int main(){$/;"	f
arr	6\arr.cpp	/^typedef int arr[6];$/;"	t	file:
main	6\arr.cpp	/^int main(){$/;"	f
print	6\arr.cpp	/^void print(const int (&arr)[3]){$/;"	f
print	6\arr.cpp	/^void print(const int (*arr)[3]){$/;"	f
ret1	6\arr.cpp	/^int ret1[] = {1,2,3,4,5,6,7};$/;"	v
ret2	6\arr.cpp	/^int ret2[] = {7,6,5,4,3,2,1};$/;"	v
some	6\arr.cpp	/^decltype(ret1) * some(const int &num){$/;"	f
main	6\assert.cpp	/^int main(){$/;"	f
v_p	6\c6.cpp	/^void v_p(string str){$/;"	f
C6	6\c6.h	2;"	d
main	6\const.cpp	/^int main(){$/;"	f
xxx	6\const.cpp	2;"	d	file:
Init	6\const.e	/^    class Init$/;"	c
allocator	6\const.e	/^    class allocator;$/;"	c
basic_string	6\const.e	/^  extern template class basic_string<char>;$/;"	c
num_put	6\const.e	/^    class num_put : public locale::facet$/;"	c
numpunct	6\const.e	/^  extern template class numpunct<char>;$/;"	c
vector	6\const.e	/^  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>$/;"	c
_GLOBAL__sub_I_main	6\const.s	/^_GLOBAL__sub_I_main:$/;"	l
_Z41__static_initialization_and_destruction_0ii	6\const.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
_ZL6xxxyyy	6\const.s	/^_ZL6xxxyyy:$/;"	l
main	6\const.s	/^main:$/;"	l
main	6\const_cast.cpp	/^int main(){$/;"	f
main	6\constepr.cpp	/^int main(){$/;"	f
main	6\constexpr_func.cpp	/^int main(int argc,char * argv[]){$/;"	f
print	6\constexpr_func.cpp	/^inline void print(){$/;"	f
scale	6\constexpr_func.cpp	/^constexpr size_t scale(size_t num){$/;"	f
_GLOBAL__sub_I_main	6\constexpr_func.s	/^_GLOBAL__sub_I_main:$/;"	l
_Z41__static_initialization_and_destruction_0ii	6\constexpr_func.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
_Z5printv	6\constexpr_func.s	/^_Z5printv:$/;"	l
_ZL6xxxyyy	6\constexpr_func.s	/^_ZL6xxxyyy:$/;"	l
main	6\constexpr_func.s	/^main:$/;"	l
xxxyyy	6\head.h	/^const int xxxyyy=100;$/;"	v
main	6\initializer_list.cpp	/^int main(){$/;"	f
print	6\initializer_list.cpp	/^void print(initializer_list<string> il){$/;"	f
test	6\initializer_list.cpp	/^void test(int y){$/;"	f
main	6\main.cpp	/^int main(){$/;"	f
a	6\ptr.cpp	/^int a = 100;$/;"	v
main	6\ptr.cpp	/^int main(){$/;"	f
t	6\ptr.cpp	/^char * t(char * p){$/;"	f
wt	6\ptr.cpp	/^string wt(string p){$/;"	f
main	6\test.cpp	/^int main(){$/;"	f
main	6\vector_t.cpp	/^int main(){$/;"	f
main	6\xy.cpp	/^int main(){$/;"	f
main	7\72.cpp	/^int main(){$/;"	f
Nodefault	7\call.cpp	/^	Nodefault(){$/;"	f	class:Nodefault
Nodefault	7\call.cpp	/^	Nodefault(string str){$/;"	f	class:Nodefault
Nodefault	7\call.cpp	/^class Nodefault{$/;"	c	file:
main	7\call.cpp	/^int main(){$/;"	f
n	7\call.cpp	/^	int n;$/;"	m	class:Nodefault	file:
num	7\call.cpp	/^	int num;$/;"	m	class:one	file:
one	7\call.cpp	/^	one(){$/;"	f	class:one
one	7\call.cpp	/^class one{$/;"	c	file:
sd	7\call.cpp	/^	Nodefault sd;$/;"	m	class:one	file:
main	7\char.cpp	/^int main(){$/;"	f
arr	7\class.cpp	/^	typedef int arr[3];$/;"	t	class:someType	file:
main	7\class.cpp	/^int main(){$/;"	f
pos	7\class.cpp	/^	typedef string::size_type pos;$/;"	t	class:someType	file:
someType	7\class.cpp	/^class someType{$/;"	c	file:
debug	7\debug.cpp	/^	constexpr debug(bool io,bool other):io(io),other(other){}$/;"	f	class:debug
debug	7\debug.cpp	/^class debug{$/;"	c	file:
io	7\debug.cpp	/^	bool io,other;$/;"	m	class:debug	file:
main	7\debug.cpp	/^int main(){$/;"	f
other	7\debug.cpp	/^	bool io,other;$/;"	m	class:debug	file:
main	7\explicit.cpp	/^int main(){$/;"	f
someConv	7\explicit.cpp	/^	explicit someConv(string str){$/;"	f	class:someConv
someConv	7\explicit.cpp	/^class someConv{$/;"	c	file:
main	7\func.cpp	/^int main(){$/;"	f
sum	7\func.cpp	/^int sum(int n){$/;"	f
xsum	7\func.cpp	/^int xsum(int n){$/;"	f
HEAD	7\head.h	2;"	d
main	7\inline.cpp	/^int main(){$/;"	f
num	7\inline.cpp	/^	int num=100;$/;"	m	class:test	file:
print	7\inline.cpp	/^void print(test &t){$/;"	f
test	7\inline.cpp	/^class test{$/;"	c	file:
test1	7\inline.cpp	/^class test1{$/;"	c	file:
_GLOBAL__sub_I_main	7\inline.s	/^_GLOBAL__sub_I_main:$/;"	l
_Z41__static_initialization_and_destruction_0ii	7\inline.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
main	7\inline.s	/^main:$/;"	l
a	7\juhe.cpp	/^	int a;$/;"	m	class:juhe	file:
b	7\juhe.cpp	/^	int b;$/;"	m	class:juhe	file:
c	7\juhe.cpp	/^	int c;$/;"	m	class:juhe	file:
juhe	7\juhe.cpp	/^class juhe{$/;"	c	file:
main	7\juhe.cpp	/^int main(){$/;"	f
print	7\juhe.cpp	/^	void print() const {$/;"	f	class:juhe
MGR	7\mgr.h	2;"	d
clear	7\mgr.h	/^	void clear(pos index){$/;"	f	class:mgr
get	7\mgr.h	/^	screen & get(pos index){$/;"	f	class:mgr
mgr	7\mgr.h	/^class mgr{$/;"	c
pos	7\mgr.h	/^	typedef vector<screen>::size_type pos;$/;"	t	class:mgr
main	7\name.cpp	/^int main(){$/;"	f
a	7\name_1.cpp	/^	int a=100;$/;"	m	namespace:name_1	file:
name_1	7\name_1.cpp	/^namespace name_1 {$/;"	n	file:
b	7\name_2.cpp	/^	int b=999;$/;"	m	namespace:name_2	file:
name_2	7\name_2.cpp	/^namespace name_2 {$/;"	n	file:
PERSON	7\person.h	2;"	d
addr	7\person.h	/^	string addr;$/;"	m	struct:person
getaddr	7\person.h	/^string person::getaddr() const{$/;"	f	class:person
getname	7\person.h	/^	string getname() const{$/;"	f	struct:person
name	7\person.h	/^	string name;$/;"	m	struct:person
person	7\person.h	/^struct person{$/;"	s
main	7\ps.cpp	/^int main(){$/;"	f
SALE_DATA	7\sale_data.h	2;"	d
add	7\sale_data.h	/^sale_data add(const sale_data &a,const sale_data &b){$/;"	f
avg_price	7\sale_data.h	/^long double sale_data::avg_price() const {$/;"	f	class:sale_data
bookNo	7\sale_data.h	/^	string bookNo;$/;"	m	class:sale_data
combine	7\sale_data.h	/^sale_data & sale_data::combine(const sale_data & rhs){$/;"	f	class:sale_data
isbn	7\sale_data.h	/^	string isbn() const {return this->bookNo;}$/;"	f	class:sale_data
money	7\sale_data.h	/^	long double money=0;$/;"	m	class:sale_data
print	7\sale_data.h	/^ostream & print(ostream & out,const sale_data &one){$/;"	f
read	7\sale_data.h	/^	friend istream & read(istream & is,sale_data & one){$/;"	f	class:sale_data
readinfo	7\sale_data.h	/^void sale_data::readinfo(istream & is){$/;"	f	class:sale_data
sale_data	7\sale_data.h	/^	sale_data(const string No):sale_data(No,0,0){$/;"	f	class:sale_data
sale_data	7\sale_data.h	/^	sale_data(const string No,unsigned int sNum,long double uPrice):bookNo(No),soldNum(sNum),money(uPrice*soldNum){$/;"	f	class:sale_data
sale_data	7\sale_data.h	/^	sale_data(istream & in){$/;"	f	class:sale_data
sale_data	7\sale_data.h	/^class sale_data{$/;"	c
soldNum	7\sale_data.h	/^	unsigned soldNum=0;$/;"	m	class:sale_data
main	7\sale_t.cpp	/^int main(){$/;"	f
SCREEN	7\screen.h	2;"	d
clear	7\screen.h	/^void mgr::clear(pos index){$/;"	f	class:mgr
contents	7\screen.h	/^	string contents = "screen";$/;"	m	class:screen
count	7\screen.h	/^	mutable unsigned count=0;$/;"	m	class:screen
cursor	7\screen.h	/^	pos width=0,heigh=0,cursor=0;$/;"	m	class:screen
display	7\screen.h	/^	const screen & display(ostream &o) const {$/;"	f	class:screen
display	7\screen.h	/^	screen & display(ostream &o){$/;"	f	class:screen
do_display	7\screen.h	/^	void do_display(ostream &o) const {$/;"	f	class:screen
get	7\screen.h	/^	char get() const {$/;"	f	class:screen
get	7\screen.h	/^inline char screen::get(pos w,pos h){$/;"	f	class:screen
get	7\screen.h	/^screen & mgr::get(pos index){$/;"	f	class:mgr
heigh	7\screen.h	/^	pos width=0,heigh=0,cursor=0;$/;"	m	class:screen
mgr	7\screen.h	/^class mgr{$/;"	c
mgr	7\screen.h	/^mgr::mgr(){$/;"	f	class:mgr
move	7\screen.h	/^inline screen & screen::move(pos w,pos h){$/;"	f	class:screen
pos	7\screen.h	/^	typedef string::size_type pos;$/;"	t	class:screen
pos	7\screen.h	/^	typedef vector<screen>::size_type pos;$/;"	t	class:mgr
screen	7\screen.h	/^	screen(pos w,pos h,char c):width(w),heigh(h){$/;"	f	class:screen
screen	7\screen.h	/^class screen{$/;"	c
screens	7\screen.h	/^	vector<screen> screens;$/;"	m	class:mgr
set	7\screen.h	/^	screen & set(char c){$/;"	f	class:screen
set	7\screen.h	/^	screen & set(pos w,pos h,char c){$/;"	f	class:screen
some_num	7\screen.h	/^void screen::some_num() const{$/;"	f	class:screen
test	7\screen.h	/^	friend void test(){$/;"	f	class:screen
width	7\screen.h	/^	pos width=0,heigh=0,cursor=0;$/;"	m	class:screen
ab	7\static.cpp	/^	int ab = xy;$/;"	m	class:myStatic	file:
cc	7\static.cpp	/^	int cc[num] = {};$/;"	m	class:myStatic	file:
hello	7\static.cpp	/^	static void hello(){$/;"	f	class:myStatic
init	7\static.cpp	/^	static int init(){$/;"	f	class:myStatic
main	7\static.cpp	/^int main(){$/;"	f
myStatic	7\static.cpp	/^class myStatic{$/;"	c	file:
num	7\static.cpp	/^	static const  int num=100;$/;"	m	class:myStatic	file:
num	7\static.cpp	/^const int myStatic::num;$/;"	m	class:myStatic	file:
p	7\static.cpp	/^	void p(const int n){$/;"	f	class:myStatic
print	7\static.cpp	/^	void print(){$/;"	f	class:myStatic
ps	7\static.cpp	/^void ps(const int &x){$/;"	f
str	7\static.cpp	/^	string str="hello world";$/;"	m	class:myStatic	file:
sum	7\static.cpp	/^	int sum(){$/;"	f	class:myStatic
xy	7\static.cpp	/^	const int xy=999;$/;"	m	class:myStatic	file:
main	7\t.cpp	/^int main(){$/;"	f
test	7\test.cpp	/^void test(){$/;"	f
_Z41__static_initialization_and_destruction_0ii	7\test.s	/^_Z41__static_initialization_and_destruction_0ii:$/;"	l
main	7\window_mgr.cpp	/^int main(){$/;"	f
main	8\81.cpp	/^int main(){$/;"	f
read	8\81.cpp	/^istream & read(istream & in){$/;"	f
main	8\buf.cpp	/^int main(){$/;"	f
main	8\fs.cpp	/^int main(int argc,char **argv){$/;"	f
HEAD	8\head.h	2;"	d
main	8\ignore.cpp	/^int main(){$/;"	f
main	8\str.cpp	/^int main(){$/;"	f
main	8\stream.cpp	/^int main(){$/;"	f
Person	8\string.cpp	/^class Person{$/;"	c	file:
main	8\string.cpp	/^int main(){$/;"	f
name	8\string.cpp	/^	string name;$/;"	m	class:Person	file:
phones	8\string.cpp	/^	vector<string> phones;$/;"	m	class:Person	file:
main	9\911.cpp	/^int main(){$/;"	f
main	9\914.cpp	/^int main(){$/;"	f
list_w	9\918.cpp	/^list<string> list_w(istream &in){$/;"	f
main	9\918.cpp	/^int main(){$/;"	f
main	9\92.cpp	/^int main(){$/;"	f
main	9\921.cpp	/^int main(){$/;"	f
main	9\926.cpp	/^int main(){$/;"	f
main	9\927.cpp	/^int main(){$/;"	f
ainsert	9\928.cpp	/^fs & ainsert(fs &str,const string &str1,const string &str2){$/;"	f
fs	9\928.cpp	/^typedef forward_list<string> fs;$/;"	t	file:
main	9\928.cpp	/^int main(){$/;"	f
main	9\932.cpp	/^int main(){$/;"	f
print	9\932.cpp	/^void print(int a,int b){$/;"	f
main	9\943.cpp	/^int main(){$/;"	f
xchange	9\943.cpp	/^string  xchange(string str,const string &nstr,const string &ostr){$/;"	f
main	9\943_1.cpp	/^int main(){$/;"	f
xchange	9\943_1.cpp	/^string xchange(string str,const string &os,const string &ns){$/;"	f
main	9\943_2.cpp	/^int main(){$/;"	f
xchange	9\943_2.cpp	/^string xchange(string str,const string &os,const string &ns){$/;"	f
main	9\947.cpp	/^int main(){$/;"	f
print	9\947.cpp	/^void print(string str,bool isnum=0){$/;"	f
find	9\95.cpp	/^ite & find(ite & begin,ite & end,int num){$/;"	f
ite	9\95.cpp	/^typedef vector<int>::iterator ite;$/;"	t	file:
main	9\95.cpp	/^int main(){$/;"	f
main	9\950.cpp	/^int main(){$/;"	f
main	9\950_1.cpp	/^int main(){$/;"	f
main	9\emplace.cpp	/^int main(){$/;"	f
test	9\emplace.cpp	/^	test(int a,int b){$/;"	f	class:test
test	9\emplace.cpp	/^class test{$/;"	c	file:
main	9\enum.cpp	/^int main(){$/;"	f
HEAD	9\head.h	2;"	d
main	9\insert.cpp	/^int main(){$/;"	f
main	9\reserve.cpp	/^int main(){$/;"	f
ADD	9\stack.cpp	/^enum obj_type{LP,RP,ADD,SUB,VAL};$/;"	e	enum:obj_type	file:
LP	9\stack.cpp	/^enum obj_type{LP,RP,ADD,SUB,VAL};$/;"	e	enum:obj_type	file:
RP	9\stack.cpp	/^enum obj_type{LP,RP,ADD,SUB,VAL};$/;"	e	enum:obj_type	file:
SUB	9\stack.cpp	/^enum obj_type{LP,RP,ADD,SUB,VAL};$/;"	e	enum:obj_type	file:
VAL	9\stack.cpp	/^enum obj_type{LP,RP,ADD,SUB,VAL};$/;"	e	enum:obj_type	file:
main	9\stack.cpp	/^int main(){$/;"	f
new_val	9\stack.cpp	/^inline void new_val(stack<obj> &so,double v){$/;"	f
obj	9\stack.cpp	/^	obj(obj_type pt,double pv=0):t(pt),v(pv){}$/;"	f	struct:obj
obj	9\stack.cpp	/^struct obj{$/;"	s	file:
obj_type	9\stack.cpp	/^enum obj_type{LP,RP,ADD,SUB,VAL};$/;"	g	file:
skipws	9\stack.cpp	/^inline void skipws(string &exp,size_t &p){$/;"	f
t	9\stack.cpp	/^	obj_type t;$/;"	m	struct:obj	file:
v	9\stack.cpp	/^	double v;$/;"	m	struct:obj	file:
main	9\str.cpp	/^int main(){$/;"	f
main	9\string.cpp	/^int main(){$/;"	f
main	9\test.cpp	/^int main(){$/;"	f
main	9\vector.cpp	/^int main(){$/;"	f
SALESITEM_H	Sales_item.h	39;"	d
Sales_item	Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	Sales_item.h	/^    Sales_item(const std::string &book): $/;"	f	class:Sales_item
Sales_item	Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	Sales_item.h	/^class Sales_item {$/;"	c
avg_price	Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
bookNo	Sales_item.h	/^    std::string bookNo;      \/\/ implicitly initialized to the empty string$/;"	m	class:Sales_item
compareIsbn	Sales_item.h	/^bool compareIsbn(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
isbn	Sales_item.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_item
operator !=	Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator +	Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +=	Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator <<	Sales_item.h	/^operator<<(std::ostream& out, const Sales_item& s)$/;"	f
operator ==	Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	Sales_item.h	/^operator>>(std::istream& in, Sales_item& s)$/;"	f
revenue	Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
units_sold	Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
main	gflags\code\line.cpp	/^int main(int argc,char **argv){$/;"	f
LINE	gflags\code\line.h	2;"	d
name	gflags\code\line.h	/^DECLARE_string(name);$/;"	v
print	gflags\code\other.cpp	/^void print(){$/;"	f
ArticleDoc	ju-seatch\ju-search\article_doc.h	/^    ArticleDoc():_reader(new Json::Reader(Json::Features::strictMode())) {}$/;"	f	class:unise::ArticleDoc
ArticleDoc	ju-seatch\ju-search\article_doc.h	/^class ArticleDoc : public FactDoc {$/;"	c	namespace:unise
UNISE_DEMO_DOC_H	ju-seatch\ju-search\article_doc.h	5;"	d
_area_id	ju-seatch\ju-search\article_doc.h	/^    int64_t _area_id;$/;"	m	class:unise::ArticleDoc
_category_id	ju-seatch\ju-search\article_doc.h	/^    std::string _category_id;$/;"	m	class:unise::ArticleDoc
_city_id	ju-seatch\ju-search\article_doc.h	/^    int64_t _city_id;$/;"	m	class:unise::ArticleDoc
_column_id	ju-seatch\ju-search\article_doc.h	/^    int64_t _column_id;$/;"	m	class:unise::ArticleDoc
_content	ju-seatch\ju-search\article_doc.h	/^    std::string _content;$/;"	m	class:unise::ArticleDoc
_image_url	ju-seatch\ju-search\article_doc.h	/^    std::string _image_url;$/;"	m	class:unise::ArticleDoc
_json_value	ju-seatch\ju-search\article_doc.h	/^    Json::Value _json_value;$/;"	m	class:unise::ArticleDoc
_na_redirect_url	ju-seatch\ju-search\article_doc.h	/^    std::string _na_redirect_url;$/;"	m	class:unise::ArticleDoc
_publish_time	ju-seatch\ju-search\article_doc.h	/^    uint32_t _publish_time;$/;"	m	class:unise::ArticleDoc
_reader	ju-seatch\ju-search\article_doc.h	/^    boost::shared_ptr<Json::Reader> _reader;$/;"	m	class:unise::ArticleDoc
_resource_id	ju-seatch\ju-search\article_doc.h	/^    uint64_t _resource_id;$/;"	m	class:unise::ArticleDoc
_score	ju-seatch\ju-search\article_doc.h	/^    int32_t _score;$/;"	m	class:unise::ArticleDoc
_source	ju-seatch\ju-search\article_doc.h	/^    std::string _source;$/;"	m	class:unise::ArticleDoc
_tags	ju-seatch\ju-search\article_doc.h	/^    std::string _tags;$/;"	m	class:unise::ArticleDoc
_title	ju-seatch\ju-search\article_doc.h	/^    std::string _title;$/;"	m	class:unise::ArticleDoc
_wap_redirect_url	ju-seatch\ju-search\article_doc.h	/^    std::string _wap_redirect_url;$/;"	m	class:unise::ArticleDoc
get_city_id	ju-seatch\ju-search\article_doc.h	/^    int64_t get_city_id() const {return _city_id;}$/;"	f	class:unise::ArticleDoc
get_content	ju-seatch\ju-search\article_doc.h	/^    std::string get_content() const {return _content;}$/;"	f	class:unise::ArticleDoc
get_dimension_name	ju-seatch\ju-search\article_doc.h	/^    virtual std::string get_dimension_name() const { return "ArticleDoc"; }$/;"	f	class:unise::ArticleDoc
get_doc_id	ju-seatch\ju-search\article_doc.h	/^    virtual DocId get_doc_id() const { return _resource_id; }$/;"	f	class:unise::ArticleDoc
get_publish_time	ju-seatch\ju-search\article_doc.h	/^    uint32_t get_publish_time() const {return _publish_time;}$/;"	f	class:unise::ArticleDoc
get_score	ju-seatch\ju-search\article_doc.h	/^    virtual int32_t get_score() const { return _score; }$/;"	f	class:unise::ArticleDoc
get_title	ju-seatch\ju-search\article_doc.h	/^    std::string get_title() const {return _title;}$/;"	f	class:unise::ArticleDoc
init	ju-seatch\ju-search\article_doc.h	/^    bool init(const std::string& line) {$/;"	f	class:unise::ArticleDoc
serialize	ju-seatch\ju-search\article_doc.h	/^        void serialize(Archive &ar, const unsigned int version) {$/;"	f	class:unise::ArticleDoc
unise	ju-seatch\ju-search\article_doc.h	/^namespace unise {$/;"	n
~ArticleDoc	ju-seatch\ju-search\article_doc.h	/^    virtual ~ArticleDoc() {}$/;"	f	class:unise::ArticleDoc
deserialize	ju-seatch\ju-search\article_doc_factory.cc	/^bool ArticleDocFactory::deserialize(std::vector<DimensionDoc *> * dimension_docs) {$/;"	f	class:unise::ArticleDocFactory
destroy	ju-seatch\ju-search\article_doc_factory.cc	/^void ArticleDocFactory::destroy(DimensionDoc * doc) {$/;"	f	class:unise::ArticleDocFactory
on_delete_event	ju-seatch\ju-search\article_doc_factory.cc	/^void ArticleDocFactory::on_delete_event(DimensionDoc * doc) {$/;"	f	class:unise::ArticleDocFactory
produce	ju-seatch\ju-search\article_doc_factory.cc	/^DimensionDoc * ArticleDocFactory::produce(const std::string & line) {$/;"	f	class:unise::ArticleDocFactory
serialize	ju-seatch\ju-search\article_doc_factory.cc	/^bool ArticleDocFactory::serialize(const std::vector<const DimensionDoc *> & dimension_docs) {$/;"	f	class:unise::ArticleDocFactory
unise	ju-seatch\ju-search\article_doc_factory.cc	/^namespace unise {$/;"	n	file:
ArticleDocFactory	ju-seatch\ju-search\article_doc_factory.h	/^    ArticleDocFactory() : _produce_num(0LLU) {}$/;"	f	class:unise::ArticleDocFactory
ArticleDocFactory	ju-seatch\ju-search\article_doc_factory.h	/^class ArticleDocFactory : public DocFactory {$/;"	c	namespace:unise
UNISE_DEMO_DOC_FACTORY_H	ju-seatch\ju-search\article_doc_factory.h	4;"	d
_dump_path	ju-seatch\ju-search\article_doc_factory.h	/^    std::string _dump_path;$/;"	m	class:unise::ArticleDocFactory
_produce_num	ju-seatch\ju-search\article_doc_factory.h	/^    uint64_t _produce_num; $/;"	m	class:unise::ArticleDocFactory
get_name	ju-seatch\ju-search\article_doc_factory.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::ArticleDocFactory
init	ju-seatch\ju-search\article_doc_factory.h	/^    virtual bool init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::ArticleDocFactory
unise	ju-seatch\ju-search\article_doc_factory.h	/^namespace unise {$/;"	n
~ArticleDocFactory	ju-seatch\ju-search\article_doc_factory.h	/^    virtual ~ArticleDocFactory() {}$/;"	f	class:unise::ArticleDocFactory
end_for_search	ju-seatch\ju-search\article_filler.cc	/^void ArticleFiller::end_for_search(PluginResponse * plugin_response) {$/;"	f	class:unise::ArticleFiller
fill_search_result	ju-seatch\ju-search\article_filler.cc	/^void ArticleFiller::fill_search_result(MatchedDoc * result,$/;"	f	class:unise::ArticleFiller
unise	ju-seatch\ju-search\article_filler.cc	/^namespace unise {$/;"	n	file:
ArticleFiller	ju-seatch\ju-search\article_filler.h	/^    ArticleFiller() {}$/;"	f	class:unise::ArticleFiller
ArticleFiller	ju-seatch\ju-search\article_filler.h	/^class ArticleFiller : public ResultFiller {$/;"	c	namespace:unise
UNISE_DEMO_FILLER_H	ju-seatch\ju-search\article_filler.h	4;"	d
_request	ju-seatch\ju-search\article_filler.h	/^    GeneralSearchRequest* _request;$/;"	m	class:unise::ArticleFiller
get_name	ju-seatch\ju-search\article_filler.h	/^    virtual std::string get_name() const { return "ArticleFiller"; }$/;"	f	class:unise::ArticleFiller
init	ju-seatch\ju-search\article_filler.h	/^    virtual bool init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::ArticleFiller
init_for_search	ju-seatch\ju-search\article_filler.h	/^    virtual void init_for_search(const GeneralSearchRequest* request, SearchContext * context) {$/;"	f	class:unise::ArticleFiller
unise	ju-seatch\ju-search\article_filler.h	/^namespace unise {$/;"	n
~ArticleFiller	ju-seatch\ju-search\article_filler.h	/^    virtual ~ArticleFiller() {}$/;"	f	class:unise::ArticleFiller
init	ju-seatch\ju-search\article_global_handler.cc	/^bool ArticleGlobalHandler::init(const comcfg::ConfigUnit &conf) {$/;"	f	class:unise::ArticleGlobalHandler
recall	ju-seatch\ju-search\article_global_handler.cc	/^void ArticleGlobalHandler::recall() {$/;"	f	class:unise::ArticleGlobalHandler
unise	ju-seatch\ju-search\article_global_handler.cc	/^namespace unise {$/;"	n	file:
ArticleGlobalHandler	ju-seatch\ju-search\article_global_handler.h	/^    ArticleGlobalHandler() {}$/;"	f	class:unise::ArticleGlobalHandler
ArticleGlobalHandler	ju-seatch\ju-search\article_global_handler.h	/^class ArticleGlobalHandler : public GlobalHandler {$/;"	c	namespace:unise
UNISE_DEMO_GLOBAL_HANDLER_H	ju-seatch\ju-search\article_global_handler.h	4;"	d
get_name	ju-seatch\ju-search\article_global_handler.h	/^    virtual std::string get_name() {$/;"	f	class:unise::ArticleGlobalHandler
unise	ju-seatch\ju-search\article_global_handler.h	/^namespace unise {$/;"	n
~ArticleGlobalHandler	ju-seatch\ju-search\article_global_handler.h	/^    virtual ~ArticleGlobalHandler() {}$/;"	f	class:unise::ArticleGlobalHandler
ArticleQueryRewriter	ju-seatch\ju-search\article_query_rewriter.cc	/^    ArticleQueryRewriter::ArticleQueryRewriter() : _dict(NULL), _handler(NULL), _tokens(NULL) {$/;"	f	class:unise::ArticleQueryRewriter
build_query_tree	ju-seatch\ju-search\article_query_rewriter.cc	/^    void ArticleQueryRewriter::build_query_tree(GeneralSearchRequest * req) {$/;"	f	class:unise::ArticleQueryRewriter
init	ju-seatch\ju-search\article_query_rewriter.cc	/^    bool ArticleQueryRewriter::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::ArticleQueryRewriter
rewrite_internal	ju-seatch\ju-search\article_query_rewriter.cc	/^    void ArticleQueryRewriter::rewrite_internal(GeneralSearchRequest * req) {$/;"	f	class:unise::ArticleQueryRewriter
unise	ju-seatch\ju-search\article_query_rewriter.cc	/^namespace unise {$/;"	n	file:
~ArticleQueryRewriter	ju-seatch\ju-search\article_query_rewriter.cc	/^    ArticleQueryRewriter::~ArticleQueryRewriter() {$/;"	f	class:unise::ArticleQueryRewriter
ArticleQueryRewriter	ju-seatch\ju-search\article_query_rewriter.h	/^class ArticleQueryRewriter : public QueryRewriter {$/;"	c	namespace:unise
INVALID_QUERY	ju-seatch\ju-search\article_query_rewriter.h	/^const std::string INVALID_QUERY = "invalidforsearch12345678"; $/;"	m	namespace:unise
UNISE_DEMO_DOC_H	ju-seatch\ju-search\article_query_rewriter.h	5;"	d
_dict	ju-seatch\ju-search\article_query_rewriter.h	/^    scw_worddict_t * _dict;$/;"	m	class:unise::ArticleQueryRewriter
_handler	ju-seatch\ju-search\article_query_rewriter.h	/^    scw_out_t * _handler;$/;"	m	class:unise::ArticleQueryRewriter
_stop_words	ju-seatch\ju-search\article_query_rewriter.h	/^    std::set<std::string> _stop_words;$/;"	m	class:unise::ArticleQueryRewriter
_tokens	ju-seatch\ju-search\article_query_rewriter.h	/^    token_t * _tokens;$/;"	m	class:unise::ArticleQueryRewriter
get_name	ju-seatch\ju-search\article_query_rewriter.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::ArticleQueryRewriter
unise	ju-seatch\ju-search\article_query_rewriter.h	/^namespace unise {$/;"	n
build_token_info_hashmap	ju-seatch\ju-search\article_scorer.cc	/^void ArticleScorer::build_token_info_hashmap(const QueryNode * root) {$/;"	f	class:unise::ArticleScorer
hilight_annotations_score	ju-seatch\ju-search\article_scorer.cc	/^bool ArticleScorer::hilight_annotations_score(MatchedDoc* doc, dynamic_score_t* score) {$/;"	f	class:unise::ArticleScorer
init_for_search	ju-seatch\ju-search\article_scorer.cc	/^void ArticleScorer::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::ArticleScorer
score	ju-seatch\ju-search\article_scorer.cc	/^bool ArticleScorer::score(MatchedDoc * doc, dynamic_score_t * score) {$/;"	f	class:unise::ArticleScorer
unise	ju-seatch\ju-search\article_scorer.cc	/^namespace unise {$/;"	n	file:
ArticleScorer	ju-seatch\ju-search\article_scorer.h	/^    ArticleScorer() {}$/;"	f	class:unise::ArticleScorer
ArticleScorer	ju-seatch\ju-search\article_scorer.h	/^class ArticleScorer : public Scorer {$/;"	c	namespace:unise
QueryNodeMap	ju-seatch\ju-search\article_scorer.h	/^    typedef __gnu_cxx::hash_map<TokenId, const QueryNodeValue *> QueryNodeMap;$/;"	t	class:unise::ArticleScorer
UNISE_DEMO_SCORER_H	ju-seatch\ju-search\article_scorer.h	4;"	d
_annotation_factor	ju-seatch\ju-search\article_scorer.h	/^    int64_t _annotation_factor;$/;"	m	class:unise::ArticleScorer
_annotation_id_pos_len	ju-seatch\ju-search\article_scorer.h	/^    std::map<uint16_t, std::map<uint32_t, uint32_t> > _annotation_id_pos_len;$/;"	m	class:unise::ArticleScorer
_doc_factor	ju-seatch\ju-search\article_scorer.h	/^    int64_t _doc_factor;$/;"	m	class:unise::ArticleScorer
_hit_factor	ju-seatch\ju-search\article_scorer.h	/^    int64_t _hit_factor;$/;"	m	class:unise::ArticleScorer
_query_node	ju-seatch\ju-search\article_scorer.h	/^    QueryNode _query_node;$/;"	m	class:unise::ArticleScorer
_query_node_map	ju-seatch\ju-search\article_scorer.h	/^    QueryNodeMap _query_node_map;$/;"	m	class:unise::ArticleScorer
_request	ju-seatch\ju-search\article_scorer.h	/^    const GeneralSearchRequest* _request;$/;"	m	class:unise::ArticleScorer
get_name	ju-seatch\ju-search\article_scorer.h	/^    virtual std::string get_name() const { return "ArticleScorer"; }$/;"	f	class:unise::ArticleScorer
init	ju-seatch\ju-search\article_scorer.h	/^    virtual bool init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::ArticleScorer
unise	ju-seatch\ju-search\article_scorer.h	/^namespace unise {$/;"	n
~ArticleScorer	ju-seatch\ju-search\article_scorer.h	/^    virtual ~ArticleScorer() {}$/;"	f	class:unise::ArticleScorer
ArticleSearchContextFactory	ju-seatch\ju-search\article_search_context.cc	/^    ArticleSearchContextFactory() {}$/;"	f	class:unise::ArticleSearchContextFactory
ArticleSearchContextFactory	ju-seatch\ju-search\article_search_context.cc	/^class ArticleSearchContextFactory : public SearchContextFactory$/;"	c	namespace:unise	file:
destroy	ju-seatch\ju-search\article_search_context.cc	/^    virtual void destroy(SearchContext *c)$/;"	f	class:unise::ArticleSearchContextFactory
get_name	ju-seatch\ju-search\article_search_context.cc	/^    virtual std::string get_name()$/;"	f	class:unise::ArticleSearchContextFactory
init	ju-seatch\ju-search\article_search_context.cc	/^    virtual bool init(const comcfg::ConfigUnit &)$/;"	f	class:unise::ArticleSearchContextFactory
init_for_search_internal	ju-seatch\ju-search\article_search_context.cc	/^void ArticleSearchContext::init_for_search_internal(const GeneralSearchRequest *request)$/;"	f	class:unise::ArticleSearchContext
produce	ju-seatch\ju-search\article_search_context.cc	/^    virtual SearchContext * produce()$/;"	f	class:unise::ArticleSearchContextFactory
unise	ju-seatch\ju-search\article_search_context.cc	/^namespace unise {$/;"	n	file:
~ArticleSearchContextFactory	ju-seatch\ju-search\article_search_context.cc	/^    ~ArticleSearchContextFactory() {}$/;"	f	class:unise::ArticleSearchContextFactory
ArticleSearchContext	ju-seatch\ju-search\article_search_context.h	/^    ArticleSearchContext() {}$/;"	f	class:unise::ArticleSearchContext
ArticleSearchContext	ju-seatch\ju-search\article_search_context.h	/^class ArticleSearchContext : public SearchContext$/;"	c	namespace:unise
TopfeedFavcateType	ju-seatch\ju-search\article_search_context.h	/^    typedef std::map<int32_t, double> TopfeedFavcateType;$/;"	t	class:unise::ArticleSearchContext
TopfeedReadType	ju-seatch\ju-search\article_search_context.h	/^    typedef std::set<uint64_t> TopfeedReadType;$/;"	t	class:unise::ArticleSearchContext
TopfeedTriggerType	ju-seatch\ju-search\article_search_context.h	/^    typedef std::map<uint64_t , std::string> TopfeedTriggerType;$/;"	t	class:unise::ArticleSearchContext
TopfeedUsercfType	ju-seatch\ju-search\article_search_context.h	/^    typedef std::map<uint64_t, double> TopfeedUsercfType;$/;"	t	class:unise::ArticleSearchContext
_ARTICLE_SEARCH_CONTEXT_H_	ju-seatch\ju-search\article_search_context.h	2;"	d
_logStr	ju-seatch\ju-search\article_search_context.h	/^    std::string _logStr; $/;"	m	class:unise::ArticleSearchContext
_topfeedCityId	ju-seatch\ju-search\article_search_context.h	/^    int64_t _topfeedCityId;$/;"	m	class:unise::ArticleSearchContext
_topfeedFavcate	ju-seatch\ju-search\article_search_context.h	/^    TopfeedFavcateType _topfeedFavcate;$/;"	m	class:unise::ArticleSearchContext
_topfeedRead	ju-seatch\ju-search\article_search_context.h	/^    TopfeedReadType _topfeedRead;$/;"	m	class:unise::ArticleSearchContext
_topfeedTrigger	ju-seatch\ju-search\article_search_context.h	/^    TopfeedTriggerType  _topfeedTrigger;$/;"	m	class:unise::ArticleSearchContext
_topfeedUsercf	ju-seatch\ju-search\article_search_context.h	/^    TopfeedUsercfType _topfeedUsercf;$/;"	m	class:unise::ArticleSearchContext
unise	ju-seatch\ju-search\article_search_context.h	/^namespace unise {$/;"	n
~ArticleSearchContext	ju-seatch\ju-search\article_search_context.h	/^    virtual ~ArticleSearchContext() {}$/;"	f	class:unise::ArticleSearchContext
filter	ju-seatch\topfeed\topfeed_early_filter.cc	/^result_status_t TopfeedEarlyFilter::filter(MatchedDoc *result)$/;"	f	class:unise::TopfeedEarlyFilter
unise	ju-seatch\topfeed\topfeed_early_filter.cc	/^namespace unise {$/;"	n	file:
TopfeedEarlyFilter	ju-seatch\topfeed\topfeed_early_filter.h	/^    TopfeedEarlyFilter() {}$/;"	f	class:unise::TopfeedEarlyFilter
TopfeedEarlyFilter	ju-seatch\topfeed\topfeed_early_filter.h	/^class TopfeedEarlyFilter : public ResultFilter$/;"	c	namespace:unise
_TOPFEED_EARLY_FILTER_H_	ju-seatch\topfeed\topfeed_early_filter.h	2;"	d
_context	ju-seatch\topfeed\topfeed_early_filter.h	/^    ArticleSearchContext *_context;$/;"	m	class:unise::TopfeedEarlyFilter
get_name	ju-seatch\topfeed\topfeed_early_filter.h	/^    virtual std::string get_name() const$/;"	f	class:unise::TopfeedEarlyFilter
init_for_search	ju-seatch\topfeed\topfeed_early_filter.h	/^    virtual void init_for_search(const GeneralSearchRequest *request, SearchContext *context)$/;"	f	class:unise::TopfeedEarlyFilter
unise	ju-seatch\topfeed\topfeed_early_filter.h	/^namespace unise {$/;"	n
~TopfeedEarlyFilter	ju-seatch\topfeed\topfeed_early_filter.h	/^    virtual ~TopfeedEarlyFilter() {}$/;"	f	class:unise::TopfeedEarlyFilter
end_for_search	ju-seatch\topfeed\topfeed_filler.cc	/^void TopfeedFiller::end_for_search(PluginResponse *plugin_response)$/;"	f	class:unise::TopfeedFiller
fill_search_result	ju-seatch\topfeed\topfeed_filler.cc	/^void TopfeedFiller::fill_search_result(MatchedDoc *result, SearchResult *search_result) const$/;"	f	class:unise::TopfeedFiller
unise	ju-seatch\topfeed\topfeed_filler.cc	/^namespace unise {$/;"	n	file:
TopfeedFiller	ju-seatch\topfeed\topfeed_filler.h	/^    TopfeedFiller() {}$/;"	f	class:unise::TopfeedFiller
TopfeedFiller	ju-seatch\topfeed\topfeed_filler.h	/^class TopfeedFiller : public ResultFiller$/;"	c	namespace:unise
_TOPFEED_FILLER_H_	ju-seatch\topfeed\topfeed_filler.h	2;"	d
_context	ju-seatch\topfeed\topfeed_filler.h	/^    SearchContext *_context=0;$/;"	m	class:unise::TopfeedFiller
get_name	ju-seatch\topfeed\topfeed_filler.h	/^    virtual std::string get_name() const$/;"	f	class:unise::TopfeedFiller
init	ju-seatch\topfeed\topfeed_filler.h	/^    virtual bool init(const comcfg::ConfigUnit &conf)$/;"	f	class:unise::TopfeedFiller
init_for_search	ju-seatch\topfeed\topfeed_filler.h	/^    virtual void init_for_search(const GeneralSearchRequest *request, SearchContext *context)$/;"	f	class:unise::TopfeedFiller
unise	ju-seatch\topfeed\topfeed_filler.h	/^namespace unise {$/;"	n
~TopfeedFiller	ju-seatch\topfeed\topfeed_filler.h	/^    virtual ~TopfeedFiller() {}$/;"	f	class:unise::TopfeedFiller
filter	ju-seatch\topfeed\topfeed_final_filter.cc	/^result_status_t TopfeedFinalFilter::filter(MatchedDoc *result)$/;"	f	class:unise::TopfeedFinalFilter
unise	ju-seatch\topfeed\topfeed_final_filter.cc	/^namespace unise {$/;"	n	file:
TopfeedFinalFilter	ju-seatch\topfeed\topfeed_final_filter.h	/^    TopfeedFinalFilter() {}$/;"	f	class:unise::TopfeedFinalFilter
TopfeedFinalFilter	ju-seatch\topfeed\topfeed_final_filter.h	/^class TopfeedFinalFilter : public ResultFilter$/;"	c	namespace:unise
_TOPFEED_FINAL_FILTER_H_	ju-seatch\topfeed\topfeed_final_filter.h	2;"	d
_availableCateCounter	ju-seatch\topfeed\topfeed_final_filter.h	/^    std::map<std::string, int32_t> _availableCateCounter;$/;"	m	class:unise::TopfeedFinalFilter
get_name	ju-seatch\topfeed\topfeed_final_filter.h	/^    virtual std::string get_name() const$/;"	f	class:unise::TopfeedFinalFilter
init_for_search	ju-seatch\topfeed\topfeed_final_filter.h	/^    virtual void init_for_search(const GeneralSearchRequest *request, SearchContext *context)$/;"	f	class:unise::TopfeedFinalFilter
unise	ju-seatch\topfeed\topfeed_final_filter.h	/^namespace unise {$/;"	n
~TopfeedFinalFilter	ju-seatch\topfeed\topfeed_final_filter.h	/^    virtual ~TopfeedFinalFilter() {}$/;"	f	class:unise::TopfeedFinalFilter
reload	ju-seatch\topfeed\topfeed_plugin_cityhot.cc	/^void TopfeedPluginCityhot::reload()$/;"	f	class:unise::TopfeedPluginCityhot
unise	ju-seatch\topfeed\topfeed_plugin_cityhot.cc	/^namespace unise {$/;"	n	file:
CityFeedWeightMap	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    typedef std::map<int64_t, FeedWeightMap > CityFeedWeightMap;$/;"	t	class:unise::TopfeedPluginCityhot
FeedWeightMap	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    typedef std::map<uint64_t, double> FeedWeightMap;$/;"	t	class:unise::TopfeedPluginCityhot
TopfeedPluginCityhot	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    TopfeedPluginCityhot() {}$/;"	f	class:unise::TopfeedPluginCityhot
TopfeedPluginCityhot	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^class TopfeedPluginCityhot$/;"	c	namespace:unise
_TOPFEED_PLUGIN_CITYHOT_H_	ju-seatch\topfeed\topfeed_plugin_cityhot.h	2;"	d
_emptyFeedWeightMap	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    FeedWeightMap _emptyFeedWeightMap;$/;"	m	class:unise::TopfeedPluginCityhot
_map	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    CityFeedWeightMap _map;$/;"	m	class:unise::TopfeedPluginCityhot
getByCity	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    const FeedWeightMap &getByCity(int64_t cityid) const$/;"	f	class:unise::TopfeedPluginCityhot
unise	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^namespace unise {$/;"	n
~TopfeedPluginCityhot	ju-seatch\topfeed\topfeed_plugin_cityhot.h	/^    virtual ~TopfeedPluginCityhot() {}$/;"	f	class:unise::TopfeedPluginCityhot
rewrite_internal	ju-seatch\topfeed\topfeed_query_rewriter.cc	/^void TopfeedQueryRewriter::rewrite_internal(GeneralSearchRequest *req)$/;"	f	class:unise::TopfeedQueryRewriter
unise	ju-seatch\topfeed\topfeed_query_rewriter.cc	/^namespace unise {$/;"	n	file:
TopfeedQueryRewriter	ju-seatch\topfeed\topfeed_query_rewriter.h	/^    TopfeedQueryRewriter() {}$/;"	f	class:unise::TopfeedQueryRewriter
TopfeedQueryRewriter	ju-seatch\topfeed\topfeed_query_rewriter.h	/^class TopfeedQueryRewriter : public QueryRewriter$/;"	c	namespace:unise
_TOPFEED_QUERY_REWRITER_H_	ju-seatch\topfeed\topfeed_query_rewriter.h	2;"	d
get_name	ju-seatch\topfeed\topfeed_query_rewriter.h	/^    virtual std::string get_name() const$/;"	f	class:unise::TopfeedQueryRewriter
init	ju-seatch\topfeed\topfeed_query_rewriter.h	/^    virtual bool init(const comcfg::ConfigUnit &)$/;"	f	class:unise::TopfeedQueryRewriter
unise	ju-seatch\topfeed\topfeed_query_rewriter.h	/^namespace unise {$/;"	n
~TopfeedQueryRewriter	ju-seatch\topfeed\topfeed_query_rewriter.h	/^    virtual ~TopfeedQueryRewriter() {}$/;"	f	class:unise::TopfeedQueryRewriter
caculate_time_score	ju-seatch\topfeed\topfeed_scorer.cc	/^double TopfeedScorer::caculate_time_score(int publish_time) $/;"	f	class:unise::TopfeedScorer
init_for_search	ju-seatch\topfeed\topfeed_scorer.cc	/^void TopfeedScorer::init_for_search(const GeneralSearchRequest *request, SearchContext *context)$/;"	f	class:unise::TopfeedScorer
score	ju-seatch\topfeed\topfeed_scorer.cc	/^bool TopfeedScorer::score(MatchedDoc *doc, dynamic_score_t *score)$/;"	f	class:unise::TopfeedScorer
unise	ju-seatch\topfeed\topfeed_scorer.cc	/^namespace unise {$/;"	n	file:
TopfeedScorer	ju-seatch\topfeed\topfeed_scorer.h	/^    TopfeedScorer() {}$/;"	f	class:unise::TopfeedScorer
TopfeedScorer	ju-seatch\topfeed\topfeed_scorer.h	/^class TopfeedScorer : public Scorer$/;"	c	namespace:unise
_TOPFEED_SCORER_H_	ju-seatch\topfeed\topfeed_scorer.h	2;"	d
_cityhotFactor	ju-seatch\topfeed\topfeed_scorer.h	/^    int64_t _cityhotFactor;$/;"	m	class:unise::TopfeedScorer
_context	ju-seatch\topfeed\topfeed_scorer.h	/^    ArticleSearchContext *_context;$/;"	m	class:unise::TopfeedScorer
_favcateFactor	ju-seatch\topfeed\topfeed_scorer.h	/^    int64_t _favcateFactor;$/;"	m	class:unise::TopfeedScorer
_pubtimeFactor	ju-seatch\topfeed\topfeed_scorer.h	/^    int64_t _pubtimeFactor;$/;"	m	class:unise::TopfeedScorer
_usercfFactor	ju-seatch\topfeed\topfeed_scorer.h	/^    int64_t _usercfFactor;$/;"	m	class:unise::TopfeedScorer
get_name	ju-seatch\topfeed\topfeed_scorer.h	/^    virtual std::string get_name() const$/;"	f	class:unise::TopfeedScorer
init	ju-seatch\topfeed\topfeed_scorer.h	/^    virtual bool init(const comcfg::ConfigUnit &conf)$/;"	f	class:unise::TopfeedScorer
unise	ju-seatch\topfeed\topfeed_scorer.h	/^namespace unise {$/;"	n
~TopfeedScorer	ju-seatch\topfeed\topfeed_scorer.h	/^    virtual ~TopfeedScorer() {}$/;"	f	class:unise::TopfeedScorer
init	ju-seatch\unise\index\annotation_manager.cc	/^bool AnnotationManager::init(const string& path)$/;"	f	class:unise::AnnotationManager
unise	ju-seatch\unise\index\annotation_manager.cc	/^namespace unise$/;"	n	file:
AnnotationManager	ju-seatch\unise\index\annotation_manager.h	/^    AnnotationManager() {}$/;"	f	class:unise::AnnotationManager
AnnotationManager	ju-seatch\unise\index\annotation_manager.h	/^class AnnotationManager$/;"	c	namespace:unise
INDEX_ANNOTATION_MANAGER_H	ju-seatch\unise\index\annotation_manager.h	4;"	d
SchemaMap	ju-seatch\unise\index\annotation_manager.h	/^    typedef __gnu_cxx::hash_map<std::string, const AnnotationSchema*> SchemaMap;$/;"	t	class:unise::AnnotationManager
_schema_config	ju-seatch\unise\index\annotation_manager.h	/^    AnnotationSchemaConfig _schema_config;$/;"	m	class:unise::AnnotationManager
_schema_list	ju-seatch\unise\index\annotation_manager.h	/^    std::vector<const AnnotationSchema*> _schema_list;$/;"	m	class:unise::AnnotationManager
_schema_map	ju-seatch\unise\index\annotation_manager.h	/^    SchemaMap _schema_map;$/;"	m	class:unise::AnnotationManager
get_annotation_schema	ju-seatch\unise\index\annotation_manager.h	/^    const AnnotationSchema * get_annotation_schema(AnnotationId id) const$/;"	f	class:unise::AnnotationManager
get_annotation_schema	ju-seatch\unise\index\annotation_manager.h	/^    const AnnotationSchema * get_annotation_schema(const std::string & name) const$/;"	f	class:unise::AnnotationManager
get_annotation_schemas	ju-seatch\unise\index\annotation_manager.h	/^    const std::vector<const AnnotationSchema*> & get_annotation_schemas() const$/;"	f	class:unise::AnnotationManager
unise	ju-seatch\unise\index\annotation_manager.h	/^namespace unise$/;"	n
~AnnotationManager	ju-seatch\unise\index\annotation_manager.h	/^    ~AnnotationManager() {}$/;"	f	class:unise::AnnotationManager
build_concurrency	ju-seatch\unise\index\base_builder.cc	/^bool BaseBuilder::build_concurrency()$/;"	f	class:unise::BaseBuilder
get_dimension_doc_id	ju-seatch\unise\index\base_builder.cc	/^bool BaseBuilder::get_dimension_doc_id(const std::string &line,$/;"	f	class:unise::BaseBuilder
init	ju-seatch\unise\index\base_builder.cc	/^bool BaseBuilder::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::BaseBuilder
load_base_index_from_dump	ju-seatch\unise\index\base_builder.cc	/^DECLARE_bool(load_base_index_from_dump);$/;"	v
load_data_from_disk	ju-seatch\unise\index\base_builder.cc	/^bool BaseBuilder::load_data_from_disk() {$/;"	f	class:unise::BaseBuilder
start_builder	ju-seatch\unise\index\base_builder.cc	/^bool BaseBuilder::start_builder(uint32_t doc_id,$/;"	f	class:unise::BaseBuilder
unise	ju-seatch\unise\index\base_builder.cc	/^namespace unise$/;"	n	file:
BaseBuilder	ju-seatch\unise\index\base_builder.h	/^    BaseBuilder() {}$/;"	f	class:unise::BaseBuilder
BaseBuilder	ju-seatch\unise\index\base_builder.h	/^class BaseBuilder$/;"	c	namespace:unise
__BASE_BUILDER_H_	ju-seatch\unise\index\base_builder.h	21;"	d
_dump_base_d2f_maps_path	ju-seatch\unise\index\base_builder.h	/^    std::string _dump_base_d2f_maps_path;               \/**< dump基量级联数据文件路径 *\/$/;"	m	class:unise::BaseBuilder
_dump_base_forward_index_path	ju-seatch\unise\index\base_builder.h	/^    std::string _dump_base_forward_index_path;          \/**< dump基量正排文件路径 *\/$/;"	m	class:unise::BaseBuilder
_dump_base_inverted_index_path	ju-seatch\unise\index\base_builder.h	/^    std::string _dump_base_inverted_index_path;         \/**< dump基量倒排文件路径 *\/$/;"	m	class:unise::BaseBuilder
base_doc_file_	ju-seatch\unise\index\base_builder.h	/^    std::string base_doc_file_;     \/**< 基量文件名       *\/$/;"	m	class:unise::BaseBuilder
builders_	ju-seatch\unise\index\base_builder.h	/^    std::vector<boost::shared_ptr<DocBaseBuilder> > builders_;      \/**< Doc构建器列表       *\/$/;"	m	class:unise::BaseBuilder
dimension_doc_configs_	ju-seatch\unise\index\base_builder.h	/^    std::vector<dimension_doc_config_t> dimension_doc_configs_;$/;"	m	class:unise::BaseBuilder
dimension_doc_ids_	ju-seatch\unise\index\base_builder.h	/^    std::set<uint32_t> dimension_doc_ids_;         \/**< DimensionDoc的Id的集合       *\/$/;"	m	class:unise::BaseBuilder
dimension_doc_manager_	ju-seatch\unise\index\base_builder.h	/^    boost::shared_ptr<DimensionDocManager> dimension_doc_manager_;\/**< dimension doc manager *\/$/;"	m	class:unise::BaseBuilder
fact_doc_id_	ju-seatch\unise\index\base_builder.h	/^    uint32_t fact_doc_id_;      \/**< FactDoc的ID       *\/$/;"	m	class:unise::BaseBuilder
fact_doc_name_	ju-seatch\unise\index\base_builder.h	/^    std::string fact_doc_name_;     \/**< FactDoc的名字       *\/$/;"	m	class:unise::BaseBuilder
get_dimension_doc_manager	ju-seatch\unise\index\base_builder.h	/^    boost::shared_ptr<DimensionDocManager> get_dimension_doc_manager() $/;"	f	class:unise::BaseBuilder
get_repository_manager	ju-seatch\unise\index\base_builder.h	/^    boost::shared_ptr<RepositoryManager> get_repository_manager() $/;"	f	class:unise::BaseBuilder
repository_manager_	ju-seatch\unise\index\base_builder.h	/^    boost::shared_ptr<RepositoryManager> repository_manager_;     \/**< repository manager    *\/$/;"	m	class:unise::BaseBuilder
unise	ju-seatch\unise\index\base_builder.h	/^namespace unise$/;"	n
~BaseBuilder	ju-seatch\unise\index\base_builder.h	/^    ~BaseBuilder() {}$/;"	f	class:unise::BaseBuilder
build	ju-seatch\unise\index\compact_forward_index.cc	/^bool CompactForwardIndex::build(const std::vector<TokenHit> & token_hits)$/;"	f	class:unise::CompactForwardIndex
get_doc_token_hit_list	ju-seatch\unise\index\compact_forward_index.cc	/^bool CompactForwardIndex::get_doc_token_hit_list(TokenId token_id,$/;"	f	class:unise::CompactForwardIndex
get_doc_token_hit_list_size	ju-seatch\unise\index\compact_forward_index.cc	/^size_t CompactForwardIndex::get_doc_token_hit_list_size(TokenId token_id) const$/;"	f	class:unise::CompactForwardIndex
get_token_id_list	ju-seatch\unise\index\compact_forward_index.cc	/^bool CompactForwardIndex::get_token_id_list(std::vector<TokenId> *token_id_list) const$/;"	f	class:unise::CompactForwardIndex
unise	ju-seatch\unise\index\compact_forward_index.cc	/^namespace unise$/;"	n	file:
CompactForwardIndex	ju-seatch\unise\index\compact_forward_index.h	/^    CompactForwardIndex() :$/;"	f	class:unise::CompactForwardIndex
CompactForwardIndex	ju-seatch\unise\index\compact_forward_index.h	/^class CompactForwardIndex : public ForwardIndex$/;"	c	namespace:unise
INDEX_COMPACT_FORWARD_INDEX_H_	ju-seatch\unise\index\compact_forward_index.h	2;"	d
_end	ju-seatch\unise\index\compact_forward_index.h	/^    uint8_t * _end;   \/\/\/< 记录内存终止地址，所指地址不被包含在本正排中$/;"	m	class:unise::CompactForwardIndex
_head	ju-seatch\unise\index\compact_forward_index.h	/^    uint8_t * _head;  \/\/\/< 记录内存起始地址$/;"	m	class:unise::CompactForwardIndex
find	ju-seatch\unise\index\compact_forward_index.h	/^    const head_item_t * find(TokenId token_id) const$/;"	f	class:unise::CompactForwardIndex
get_dump_data	ju-seatch\unise\index\compact_forward_index.h	/^    virtual int get_dump_data(uint8_t * buffer, size_t length) const$/;"	f	class:unise::CompactForwardIndex
get_token_num	ju-seatch\unise\index\compact_forward_index.h	/^    virtual size_t get_token_num() const$/;"	f	class:unise::CompactForwardIndex
head_item_t	ju-seatch\unise\index\compact_forward_index.h	/^struct head_item_t {$/;"	s	namespace:unise
load_dump_data	ju-seatch\unise\index\compact_forward_index.h	/^    virtual bool load_dump_data(uint8_t * buffer, size_t length)$/;"	f	class:unise::CompactForwardIndex
num	ju-seatch\unise\index\compact_forward_index.h	/^    uint32_t num;               \/\/ 4 bytes TODO : 删除这一项，改接口$/;"	m	struct:unise::head_item_t
offset	ju-seatch\unise\index\compact_forward_index.h	/^    uint32_t offset;            \/\/ 4 bytes$/;"	m	struct:unise::head_item_t
operator <	ju-seatch\unise\index\compact_forward_index.h	/^    bool operator < (const head_item_t & b) const {$/;"	f	struct:unise::head_item_t
operator ==	ju-seatch\unise\index\compact_forward_index.h	/^    bool operator == (const head_item_t & b) const {$/;"	f	struct:unise::head_item_t
token_id	ju-seatch\unise\index\compact_forward_index.h	/^    TokenId token_id;           \/\/ 8 bytes$/;"	m	struct:unise::head_item_t
unise	ju-seatch\unise\index\compact_forward_index.h	/^namespace unise$/;"	n
~CompactForwardIndex	ju-seatch\unise\index\compact_forward_index.h	/^    virtual ~CompactForwardIndex()$/;"	f	class:unise::CompactForwardIndex
DasIncBuilder	ju-seatch\unise\index\das_inc_builder.cc	/^DasIncBuilder::DasIncBuilder(RepositoryManager * repository_manager)$/;"	f	class:unise::DasIncBuilder
add_record	ju-seatch\unise\index\das_inc_builder.cc	/^void DasIncBuilder::add_record(const das_inc_record_t& record) {$/;"	f	class:unise::DasIncBuilder
cascade_filt	ju-seatch\unise\index\das_inc_builder.cc	/^uint32_t DasIncBuilder::cascade_filt() {$/;"	f	class:unise::DasIncBuilder
delete_record	ju-seatch\unise\index\das_inc_builder.cc	/^void DasIncBuilder::delete_record(const das_inc_record_t& record) {$/;"	f	class:unise::DasIncBuilder
format_input	ju-seatch\unise\index\das_inc_builder.cc	/^bool DasIncBuilder::format_input(const std::string& line, das_inc_record_t * record)$/;"	f	class:unise::DasIncBuilder
init	ju-seatch\unise\index\das_inc_builder.cc	/^bool DasIncBuilder::init(const comcfg::ConfigUnit & conf)$/;"	f	class:unise::DasIncBuilder
process_one_line	ju-seatch\unise\index\das_inc_builder.cc	/^void DasIncBuilder::process_one_line(const std::string & line)$/;"	f	class:unise::DasIncBuilder
process_one_record	ju-seatch\unise\index\das_inc_builder.cc	/^void DasIncBuilder::process_one_record(const das_inc_record_t& record) {$/;"	f	class:unise::DasIncBuilder
unise	ju-seatch\unise\index\das_inc_builder.cc	/^namespace unise$/;"	n	file:
DasIncBuilder	ju-seatch\unise\index\das_inc_builder.h	/^class DasIncBuilder$/;"	c	namespace:unise
INDEX_DAS_INC_BUILDER_H	ju-seatch\unise\index\das_inc_builder.h	4;"	d
_dimension_doc_manager	ju-seatch\unise\index\das_inc_builder.h	/^    DimensionDocManager * _dimension_doc_manager;$/;"	m	class:unise::DasIncBuilder
_fact_doc_builder	ju-seatch\unise\index\das_inc_builder.h	/^    boost::scoped_ptr<DocBuilder> _fact_doc_builder;$/;"	m	class:unise::DasIncBuilder
_repository_manager	ju-seatch\unise\index\das_inc_builder.h	/^    RepositoryManager * _repository_manager;$/;"	m	class:unise::DasIncBuilder
comcfg	ju-seatch\unise\index\das_inc_builder.h	/^namespace comcfg$/;"	n
unise	ju-seatch\unise\index\das_inc_builder.h	/^namespace unise$/;"	n
~DasIncBuilder	ju-seatch\unise\index\das_inc_builder.h	/^    ~DasIncBuilder() {}$/;"	f	class:unise::DasIncBuilder
DimensionDocBaseBuilder	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^DimensionDocBaseBuilder::DimensionDocBaseBuilder(const std::string &name,$/;"	f	class:unise::DimensionDocBaseBuilder
build	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^bool DimensionDocBaseBuilder::build()$/;"	f	class:unise::DimensionDocBaseBuilder
dump_base_index	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^DECLARE_bool(dump_base_index);$/;"	v
load_base_index_from_dump	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^DECLARE_bool(load_base_index_from_dump);$/;"	v
load_dimension_doc	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^bool DimensionDocBaseBuilder::load_dimension_doc() {$/;"	f	class:unise::DimensionDocBaseBuilder
unise	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^namespace unise$/;"	n	file:
~DimensionDocBaseBuilder	ju-seatch\unise\index\dimension_doc_base_builder.cc	/^DimensionDocBaseBuilder::~DimensionDocBaseBuilder() {}$/;"	f	class:unise::DimensionDocBaseBuilder
DimensionDocBaseBuilder	ju-seatch\unise\index\dimension_doc_base_builder.h	/^class DimensionDocBaseBuilder : public DocBaseBuilder {$/;"	c	namespace:unise
__DIMENSION_DOC_BASE_BUILDER_H_	ju-seatch\unise\index\dimension_doc_base_builder.h	20;"	d
_dimension	ju-seatch\unise\index\dimension_doc_base_builder.h	/^    DimensionDocManager::dimension_t *_dimension;        \/**< DimensionDoc的family信息       *\/$/;"	m	class:unise::DimensionDocBaseBuilder
_dimension_doc_manager	ju-seatch\unise\index\dimension_doc_base_builder.h	/^    boost::shared_ptr<DimensionDocManager> _dimension_doc_manager;        \/**< DimensionDocManager       *\/$/;"	m	class:unise::DimensionDocBaseBuilder
get_next_doc	ju-seatch\unise\index\dimension_doc_base_builder.h	/^    bool get_next_doc(DimensionDoc **doc, bool *has_next) {$/;"	f	class:unise::DimensionDocBaseBuilder
unise	ju-seatch\unise\index\dimension_doc_base_builder.h	/^namespace unise {$/;"	n
DimensionDocManager	ju-seatch\unise\index\dimension_doc_manager.cc	/^DimensionDocManager::DimensionDocManager() :$/;"	f	class:unise::DimensionDocManager
add_dimension_doc	ju-seatch\unise\index\dimension_doc_manager.cc	/^DimensionDoc * DimensionDocManager::add_dimension_doc($/;"	f	class:unise::DimensionDocManager
add_fact_doc_filter_relation	ju-seatch\unise\index\dimension_doc_manager.cc	/^uint8_t DimensionDocManager::add_fact_doc_filter_relation(const FactDoc& doc) {$/;"	f	class:unise::DimensionDocManager
add_relation_ship	ju-seatch\unise\index\dimension_doc_manager.cc	/^void DimensionDocManager::add_relation_ship(uint32_t dim_level_id, DocId dim_id,$/;"	f	class:unise::DimensionDocManager
delete_dimension_doc	ju-seatch\unise\index\dimension_doc_manager.cc	/^void DimensionDocManager::delete_dimension_doc($/;"	f	class:unise::DimensionDocManager
dimension_doc_exist	ju-seatch\unise\index\dimension_doc_manager.cc	/^bool DimensionDocManager::dimension_doc_exist(size_t id) const {$/;"	f	class:unise::DimensionDocManager
get_filt_relation_docids	ju-seatch\unise\index\dimension_doc_manager.cc	/^const SkipList<DocId> * DimensionDocManager::get_filt_relation_docids($/;"	f	class:unise::DimensionDocManager
init	ju-seatch\unise\index\dimension_doc_manager.cc	/^bool DimensionDocManager::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::DimensionDocManager
init_filter_relation_ship	ju-seatch\unise\index\dimension_doc_manager.cc	/^bool DimensionDocManager::init_filter_relation_ship(const std::string& path) {$/;"	f	class:unise::DimensionDocManager
relation_ship_filt	ju-seatch\unise\index\dimension_doc_manager.cc	/^void DimensionDocManager::relation_ship_filt($/;"	f	class:unise::DimensionDocManager
remove_fact_doc_filter_relation	ju-seatch\unise\index\dimension_doc_manager.cc	/^void DimensionDocManager::remove_fact_doc_filter_relation(const FactDoc& doc) {$/;"	f	class:unise::DimensionDocManager
remove_relation_ship	ju-seatch\unise\index\dimension_doc_manager.cc	/^void DimensionDocManager::remove_relation_ship(uint32_t dim_level_id, DocId dim_id,$/;"	f	class:unise::DimensionDocManager
unise	ju-seatch\unise\index\dimension_doc_manager.cc	/^namespace unise {$/;"	n	file:
~DimensionDocManager	ju-seatch\unise\index\dimension_doc_manager.cc	/^DimensionDocManager::~DimensionDocManager() {$/;"	f	class:unise::DimensionDocManager
DimensionDocFamilyMap	ju-seatch\unise\index\dimension_doc_manager.h	/^    typedef std::map<std::string, size_t> DimensionDocFamilyMap;$/;"	t	class:unise::DimensionDocManager
DimensionDocManager	ju-seatch\unise\index\dimension_doc_manager.h	/^class DimensionDocManager$/;"	c	namespace:unise
DimensionDocMap	ju-seatch\unise\index\dimension_doc_manager.h	/^    typedef bsl::phashmap<DocId, DimensionDoc*> DimensionDocMap;$/;"	t	class:unise::DimensionDocManager
INDEX_DIMENSION_DOC_MANAGER_H	ju-seatch\unise\index\dimension_doc_manager.h	4;"	d
_d2f_maps	ju-seatch\unise\index\dimension_doc_manager.h	/^    std::vector<d2f_map_t *> _d2f_maps; \/\/\/< 存储不同level的dimension_to_factdocs$/;"	m	class:unise::DimensionDocManager
_dimensions	ju-seatch\unise\index\dimension_doc_manager.h	/^    std::vector<dimension_t>    _dimensions;    \/\/\/< 所有的维度表$/;"	m	class:unise::DimensionDocManager
_fact_doc_id	ju-seatch\unise\index\dimension_doc_manager.h	/^    size_t _fact_doc_id;$/;"	m	class:unise::DimensionDocManager
_fact_doc_name	ju-seatch\unise\index\dimension_doc_manager.h	/^    std::string _fact_doc_name;$/;"	m	class:unise::DimensionDocManager
_family_map	ju-seatch\unise\index\dimension_doc_manager.h	/^    DimensionDocFamilyMap _family_map;$/;"	m	class:unise::DimensionDocManager
_filters	ju-seatch\unise\index\dimension_doc_manager.h	/^    std::vector<filter_relation_ship_t> _filters;$/;"	m	class:unise::DimensionDocManager
_need_filter	ju-seatch\unise\index\dimension_doc_manager.h	/^    bool _need_filter;$/;"	m	class:unise::DimensionDocManager
_relation_docids	ju-seatch\unise\index\dimension_doc_manager.h	/^    const SkipList<DocId> * _relation_docids;$/;"	m	class:unise::DimensionDocManager
_relation_flag	ju-seatch\unise\index\dimension_doc_manager.h	/^    uint8_t _relation_flag;$/;"	m	class:unise::DimensionDocManager
_relation_mask	ju-seatch\unise\index\dimension_doc_manager.h	/^    uint8_t _relation_mask;$/;"	m	class:unise::DimensionDocManager
d2f_map_t	ju-seatch\unise\index\dimension_doc_manager.h	/^    typedef __gnu_cxx::hash_map<DocId, SkipList<DocId> * > d2f_map_t;$/;"	t	class:unise::DimensionDocManager
dimension_t	ju-seatch\unise\index\dimension_doc_manager.h	/^        dimension_t(): id(-1), doc_map(NULL), factory(NULL) {$/;"	f	struct:unise::DimensionDocManager::dimension_t
dimension_t	ju-seatch\unise\index\dimension_doc_manager.h	/^    struct dimension_t {$/;"	s	class:unise::DimensionDocManager
doc_map	ju-seatch\unise\index\dimension_doc_manager.h	/^        DimensionDocMap *doc_map;$/;"	m	struct:unise::DimensionDocManager::dimension_t
factory	ju-seatch\unise\index\dimension_doc_manager.h	/^        DocFactory * factory;$/;"	m	struct:unise::DimensionDocManager::dimension_t
filted_values	ju-seatch\unise\index\dimension_doc_manager.h	/^    std::set<uint64_t> filted_values;   \/\/\/< dimension doc的被过滤掉的值$/;"	m	struct:unise::filter_relation_ship_t
filter_relation_ship_t	ju-seatch\unise\index\dimension_doc_manager.h	/^struct filter_relation_ship_t {$/;"	s	namespace:unise
foreign_key	ju-seatch\unise\index\dimension_doc_manager.h	/^    uint32_t foreign_key;  \/\/\/< fact_doc的annotation id，其annotation的取值是dimension docid$/;"	m	struct:unise::filter_relation_ship_t
get_d2f_maps	ju-seatch\unise\index\dimension_doc_manager.h	/^    std::vector<d2f_map_t *> get_d2f_maps() const { return _d2f_maps; }$/;"	f	class:unise::DimensionDocManager
get_dimension_doc	ju-seatch\unise\index\dimension_doc_manager.h	/^    inline const DimensionDoc * get_dimension_doc($/;"	f	class:unise::DimensionDocManager
get_dimension_doc	ju-seatch\unise\index\dimension_doc_manager.h	/^    inline const DimensionDoc * get_dimension_doc(size_t level_id, DocId docid) const$/;"	f	class:unise::DimensionDocManager
get_fact_doc	ju-seatch\unise\index\dimension_doc_manager.h	/^    inline const FactDoc * get_fact_doc(DocId docid) const$/;"	f	class:unise::DimensionDocManager
get_fact_doc_dimension_name	ju-seatch\unise\index\dimension_doc_manager.h	/^    const std::string & get_fact_doc_dimension_name() const { return _fact_doc_name; }$/;"	f	class:unise::DimensionDocManager
get_fact_doc_level_id	ju-seatch\unise\index\dimension_doc_manager.h	/^    inline size_t get_fact_doc_level_id() const { return _fact_doc_id; }$/;"	f	class:unise::DimensionDocManager
id	ju-seatch\unise\index\dimension_doc_manager.h	/^        int id;$/;"	m	struct:unise::DimensionDocManager::dimension_t
level_id	ju-seatch\unise\index\dimension_doc_manager.h	/^    uint32_t level_id;     \/\/\/< dimension doc的level id$/;"	m	struct:unise::filter_relation_ship_t
name	ju-seatch\unise\index\dimension_doc_manager.h	/^        std::string name;$/;"	m	struct:unise::DimensionDocManager::dimension_t
relation_key	ju-seatch\unise\index\dimension_doc_manager.h	/^    uint32_t relation_key; \/\/\/< dimension doc的annotation id$/;"	m	struct:unise::filter_relation_ship_t
reset_cascade_status	ju-seatch\unise\index\dimension_doc_manager.h	/^    void reset_cascade_status() {$/;"	f	class:unise::DimensionDocManager
set_d2f_maps	ju-seatch\unise\index\dimension_doc_manager.h	/^    void set_d2f_maps(std::vector<d2f_map_t *> d2f_maps) { _d2f_maps = d2f_maps; }$/;"	f	class:unise::DimensionDocManager
unise	ju-seatch\unise\index\dimension_doc_manager.h	/^namespace unise {$/;"	n
~dimension_t	ju-seatch\unise\index\dimension_doc_manager.h	/^        ~dimension_t() {$/;"	f	struct:unise::DimensionDocManager::dimension_t
DocBaseBuilder	ju-seatch\unise\index\doc_base_builder.cc	/^DocBaseBuilder::DocBaseBuilder(const std::string &name,$/;"	f	class:unise::DocBaseBuilder
unise	ju-seatch\unise\index\doc_base_builder.cc	/^namespace unise$/;"	n	file:
~DocBaseBuilder	ju-seatch\unise\index\doc_base_builder.cc	/^DocBaseBuilder::~DocBaseBuilder()$/;"	f	class:unise::DocBaseBuilder
DocBaseBuilder	ju-seatch\unise\index\doc_base_builder.h	/^class DocBaseBuilder : public Thread$/;"	c	namespace:unise
DocFileInfo	ju-seatch\unise\index\doc_base_builder.h	/^struct DocFileInfo {$/;"	s	namespace:unise
END	ju-seatch\unise\index\doc_base_builder.h	/^        END$/;"	e	enum:unise::DocBaseBuilder::FileStatus
ERROR	ju-seatch\unise\index\doc_base_builder.h	/^        ERROR,$/;"	e	enum:unise::DocBaseBuilder::FileStatus
FileStatus	ju-seatch\unise\index\doc_base_builder.h	/^    enum FileStatus {$/;"	g	class:unise::DocBaseBuilder
OK	ju-seatch\unise\index\doc_base_builder.h	/^        OK,$/;"	e	enum:unise::DocBaseBuilder::FileStatus
__DOCBASEBUILDER_H_	ju-seatch\unise\index\doc_base_builder.h	20;"	d
_doc_file_info	ju-seatch\unise\index\doc_base_builder.h	/^    DocFileInfo _doc_file_info;       \/**< 文件相关信息  *\/$/;"	m	class:unise::DocBaseBuilder
_end_offset	ju-seatch\unise\index\doc_base_builder.h	/^    ssize_t _end_offset;              \/**< 结束偏移      *\/$/;"	m	class:unise::DocBaseBuilder
_fin	ju-seatch\unise\index\doc_base_builder.h	/^    std::ifstream _fin;               \/**< 输入文件流    *\/$/;"	m	class:unise::DocBaseBuilder
_status	ju-seatch\unise\index\doc_base_builder.h	/^    bool _status;                     \/\/\/< 是否构建成功$/;"	m	class:unise::DocBaseBuilder
dump_d2f_maps_path	ju-seatch\unise\index\doc_base_builder.h	/^    std::string dump_d2f_maps_path;       \/**< dump级联数据 *\/$/;"	m	struct:unise::DocFileInfo
dump_forward_index_path	ju-seatch\unise\index\doc_base_builder.h	/^    std::string dump_forward_index_path;  \/**< dump正排文件 *\/$/;"	m	struct:unise::DocFileInfo
dump_inverted_index_path	ju-seatch\unise\index\doc_base_builder.h	/^    std::string dump_inverted_index_path; \/**< dump倒排文件 *\/$/;"	m	struct:unise::DocFileInfo
file_name	ju-seatch\unise\index\doc_base_builder.h	/^    std::string file_name;                \/**< 文件名       *\/$/;"	m	struct:unise::DocFileInfo
get_file_name	ju-seatch\unise\index\doc_base_builder.h	/^    const std::string& get_file_name() {$/;"	f	class:unise::DocBaseBuilder
get_next_line	ju-seatch\unise\index\doc_base_builder.h	/^    FileStatus get_next_line(std::string &line,$/;"	f	class:unise::DocBaseBuilder
len	ju-seatch\unise\index\doc_base_builder.h	/^    size_t len;                           \/**< 长度         *\/$/;"	m	struct:unise::DocFileInfo
offset	ju-seatch\unise\index\doc_base_builder.h	/^    ssize_t offset;                       \/**< 开始偏移     *\/$/;"	m	struct:unise::DocFileInfo
run	ju-seatch\unise\index\doc_base_builder.h	/^    virtual int run() {$/;"	f	class:unise::DocBaseBuilder
status	ju-seatch\unise\index\doc_base_builder.h	/^    virtual bool status()$/;"	f	class:unise::DocBaseBuilder
unise	ju-seatch\unise\index\doc_base_builder.h	/^namespace unise$/;"	n
DocBuilder	ju-seatch\unise\index\doc_builder.cc	/^DocBuilder::DocBuilder(RepositoryManager * repository_manager) :$/;"	f	class:unise::DocBuilder
build	ju-seatch\unise\index\doc_builder.cc	/^void DocBuilder::build(FactDoc * doc) {$/;"	f	class:unise::DocBuilder
filt_relation_ship	ju-seatch\unise\index\doc_builder.cc	/^uint32_t DocBuilder::filt_relation_ship(const SkipList<DocId>* docids,$/;"	f	class:unise::DocBuilder
finish_doc	ju-seatch\unise\index\doc_builder.cc	/^void DocBuilder::finish_doc() {$/;"	f	class:unise::DocBuilder
remove	ju-seatch\unise\index\doc_builder.cc	/^void DocBuilder::remove(DocId docid) {$/;"	f	class:unise::DocBuilder
unise	ju-seatch\unise\index\doc_builder.cc	/^namespace unise {$/;"	n	file:
~DocBuilder	ju-seatch\unise\index\doc_builder.cc	/^DocBuilder::~DocBuilder() {}$/;"	f	class:unise::DocBuilder
DocBuilder	ju-seatch\unise\index\doc_builder.h	/^class DocBuilder {$/;"	c	namespace:unise
INDEX_DOC_BUILDER_H	ju-seatch\unise\index\doc_builder.h	4;"	d
_anno_count	ju-seatch\unise\index\doc_builder.h	/^    uint64_t _anno_count;$/;"	m	class:unise::DocBuilder
_annotation_manager	ju-seatch\unise\index\doc_builder.h	/^    AnnotationManager * _annotation_manager;$/;"	m	class:unise::DocBuilder
_cur_doc_info	ju-seatch\unise\index\doc_builder.h	/^    doc_info_t * _cur_doc_info;$/;"	m	class:unise::DocBuilder
_dict	ju-seatch\unise\index\doc_builder.h	/^    scw_worddict_t * _dict;$/;"	m	class:unise::DocBuilder
_dimension_doc_manager	ju-seatch\unise\index\doc_builder.h	/^    DimensionDocManager * _dimension_doc_manager;$/;"	m	class:unise::DocBuilder
_doc_count	ju-seatch\unise\index\doc_builder.h	/^    uint64_t _doc_count; \/\/\/< 计数$/;"	m	class:unise::DocBuilder
_handler	ju-seatch\unise\index\doc_builder.h	/^    scw_out_t * _handler;$/;"	m	class:unise::DocBuilder
_relation_token_ids	ju-seatch\unise\index\doc_builder.h	/^    std::vector<TokenId> _relation_token_ids;$/;"	m	class:unise::DocBuilder
_repository_manager	ju-seatch\unise\index\doc_builder.h	/^    RepositoryManager * _repository_manager;$/;"	m	class:unise::DocBuilder
_token_count	ju-seatch\unise\index\doc_builder.h	/^    uint64_t _token_count;$/;"	m	class:unise::DocBuilder
_token_hits	ju-seatch\unise\index\doc_builder.h	/^    std::vector<TokenHit> _token_hits;$/;"	m	class:unise::DocBuilder
_token_id_list	ju-seatch\unise\index\doc_builder.h	/^    std::vector<TokenId> _token_id_list;$/;"	m	class:unise::DocBuilder
unise	ju-seatch\unise\index\doc_builder.h	/^namespace unise {$/;"	n
DocHitList	ju-seatch\unise\index\doc_hit_list.h	/^    DocHitList() {}$/;"	f	class:unise::DocHitList
DocHitList	ju-seatch\unise\index\doc_hit_list.h	/^class DocHitList$/;"	c	namespace:unise
DocHitListIterator	ju-seatch\unise\index\doc_hit_list.h	/^    DocHitListIterator() {}$/;"	f	class:unise::DocHitListIterator
DocHitListIterator	ju-seatch\unise\index\doc_hit_list.h	/^class DocHitListIterator$/;"	c	namespace:unise
INDEX_DOC_HIT_LIST_H	ju-seatch\unise\index\doc_hit_list.h	4;"	d
get_name	ju-seatch\unise\index\doc_hit_list.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::DocHitList
init	ju-seatch\unise\index\doc_hit_list.h	/^    virtual bool init(const DocHitList & list) {$/;"	f	class:unise::DocHitListIterator
jump_to	ju-seatch\unise\index\doc_hit_list.h	/^    virtual void jump_to(const doc_hit_t & doc_hit) {$/;"	f	class:unise::DocHitListIterator
reserve	ju-seatch\unise\index\doc_hit_list.h	/^    virtual void reserve(size_t s) {}$/;"	f	class:unise::DocHitList
unise	ju-seatch\unise\index\doc_hit_list.h	/^namespace unise$/;"	n
~DocHitList	ju-seatch\unise\index\doc_hit_list.h	/^    virtual ~DocHitList() {}$/;"	f	class:unise::DocHitList
~DocHitListIterator	ju-seatch\unise\index\doc_hit_list.h	/^    virtual ~DocHitListIterator() {}$/;"	f	class:unise::DocHitListIterator
FactDocBaseBuilder	ju-seatch\unise\index\fact_doc_base_builder.cc	/^FactDocBaseBuilder::FactDocBaseBuilder(const std::string &name,$/;"	f	class:unise::FactDocBaseBuilder
batch_build_inverted_index	ju-seatch\unise\index\fact_doc_base_builder.cc	/^bool FactDocBaseBuilder::batch_build_inverted_index()$/;"	f	class:unise::FactDocBaseBuilder
build	ju-seatch\unise\index\fact_doc_base_builder.cc	/^bool FactDocBaseBuilder::build()$/;"	f	class:unise::FactDocBaseBuilder
build_dimension_doc	ju-seatch\unise\index\fact_doc_base_builder.cc	/^bool FactDocBaseBuilder::build_dimension_doc() {$/;"	f	class:unise::FactDocBaseBuilder
dump_d2f_maps	ju-seatch\unise\index\fact_doc_base_builder.cc	/^bool FactDocBaseBuilder::dump_d2f_maps() {$/;"	f	class:unise::FactDocBaseBuilder
get_token_hits	ju-seatch\unise\index\fact_doc_base_builder.cc	/^void FactDocBaseBuilder::get_token_hits(FactDoc * doc,$/;"	f	class:unise::FactDocBaseBuilder
load_d2f_maps	ju-seatch\unise\index\fact_doc_base_builder.cc	/^bool FactDocBaseBuilder::load_d2f_maps() {$/;"	f	class:unise::FactDocBaseBuilder
max_wordseg_buffer_size	ju-seatch\unise\index\fact_doc_base_builder.cc	/^DECLARE_int32(max_wordseg_buffer_size);$/;"	v
unise	ju-seatch\unise\index\fact_doc_base_builder.cc	/^namespace unise$/;"	n	file:
~FactDocBaseBuilder	ju-seatch\unise\index\fact_doc_base_builder.cc	/^FactDocBaseBuilder::~FactDocBaseBuilder() {}$/;"	f	class:unise::FactDocBaseBuilder
FactDocBaseBuilder	ju-seatch\unise\index\fact_doc_base_builder.h	/^class FactDocBaseBuilder : public DimensionDocBaseBuilder$/;"	c	namespace:unise
__FAC_DOC_BASE_BUILDER_H_	ju-seatch\unise\index\fact_doc_base_builder.h	20;"	d
_annotation_manager	ju-seatch\unise\index\fact_doc_base_builder.h	/^    AnnotationManager * _annotation_manager;$/;"	m	class:unise::FactDocBaseBuilder
_d2f_maps_path	ju-seatch\unise\index\fact_doc_base_builder.h	/^    std::string _d2f_maps_path;                   \/\/\/< dump级联数据的位置$/;"	m	class:unise::FactDocBaseBuilder
_dict	ju-seatch\unise\index\fact_doc_base_builder.h	/^    scw_worddict_t * _dict;$/;"	m	class:unise::FactDocBaseBuilder
_dimension_doc_manager	ju-seatch\unise\index\fact_doc_base_builder.h	/^    DimensionDocManager * _dimension_doc_manager;$/;"	m	class:unise::FactDocBaseBuilder
_forward_index_path	ju-seatch\unise\index\fact_doc_base_builder.h	/^    std::string _forward_index_path;              \/\/\/< dump正排索引数据的位置$/;"	m	class:unise::FactDocBaseBuilder
_handler	ju-seatch\unise\index\fact_doc_base_builder.h	/^    scw_out_t * _handler;$/;"	m	class:unise::FactDocBaseBuilder
_inverted_index_path	ju-seatch\unise\index\fact_doc_base_builder.h	/^    std::string _inverted_index_path;             \/\/\/< dump倒排索引数据的位置$/;"	m	class:unise::FactDocBaseBuilder
_repository_manager	ju-seatch\unise\index\fact_doc_base_builder.h	/^    boost::shared_ptr<RepositoryManager> &_repository_manager;        \/**< RepositoryManager       *\/$/;"	m	class:unise::FactDocBaseBuilder
_token_hit_list	ju-seatch\unise\index\fact_doc_base_builder.h	/^    std::vector<TokenHit> _token_hit_list;         \/**< 存储所有的TokenHit       *\/$/;"	m	class:unise::FactDocBaseBuilder
load_forward_index	ju-seatch\unise\index\fact_doc_base_builder.h	/^    inline bool load_forward_index(const std::string& path)$/;"	f	class:unise::FactDocBaseBuilder
load_forward_index_internal	ju-seatch\unise\index\fact_doc_base_builder.h	/^    inline bool load_forward_index_internal(ZeroCopyInputStream * raw_input)$/;"	f	class:unise::FactDocBaseBuilder
load_inverted_index	ju-seatch\unise\index\fact_doc_base_builder.h	/^    inline bool load_inverted_index(const std::string& path)$/;"	f	class:unise::FactDocBaseBuilder
load_inverted_index_internal	ju-seatch\unise\index\fact_doc_base_builder.h	/^    inline bool load_inverted_index_internal(ZeroCopyInputStream * raw_input)$/;"	f	class:unise::FactDocBaseBuilder
read_limit_size	ju-seatch\unise\index\fact_doc_base_builder.h	/^const int read_limit_size = 2* 1024 * 1024 * 1024 - 1;$/;"	m	namespace:unise
token_list_limit_size	ju-seatch\unise\index\fact_doc_base_builder.h	/^const int token_list_limit_size = 1024 * 1024 * 1024 \/ 12;$/;"	m	namespace:unise
unise	ju-seatch\unise\index\fact_doc_base_builder.h	/^namespace unise$/;"	n
FixPostList	ju-seatch\unise\index\fix_post_list.cc	/^FixPostList::FixPostList(TokenId token_id) :$/;"	f	class:unise::FixPostList
FixPostList	ju-seatch\unise\index\fix_post_list.cc	/^FixPostList::FixPostList(TokenId token_id, std::vector<doc_hit_t> * array) :$/;"	f	class:unise::FixPostList
FixPostListIterator	ju-seatch\unise\index\fix_post_list.cc	/^FixPostListIterator::FixPostListIterator(const DocHitList & list) :$/;"	f	class:unise::FixPostListIterator
add	ju-seatch\unise\index\fix_post_list.cc	/^bool FixPostList::add(const doc_hit_t & doc_hit) {$/;"	f	class:unise::FixPostList
done	ju-seatch\unise\index\fix_post_list.cc	/^bool FixPostListIterator::done() const {$/;"	f	class:unise::FixPostListIterator
get_current_value	ju-seatch\unise\index\fix_post_list.cc	/^const doc_hit_t & FixPostListIterator::get_current_value() const {$/;"	f	class:unise::FixPostListIterator
get_match	ju-seatch\unise\index\fix_post_list.cc	/^void FixPostListIterator::get_match() {$/;"	f	class:unise::FixPostListIterator
get_progress	ju-seatch\unise\index\fix_post_list.cc	/^float FixPostListIterator::get_progress() const {$/;"	f	class:unise::FixPostListIterator
jump_to	ju-seatch\unise\index\fix_post_list.cc	/^void FixPostListIterator::jump_to(const doc_hit_t & doc_hit) {$/;"	f	class:unise::FixPostListIterator
next	ju-seatch\unise\index\fix_post_list.cc	/^void FixPostListIterator::next() {$/;"	f	class:unise::FixPostListIterator
remove	ju-seatch\unise\index\fix_post_list.cc	/^void FixPostList::remove(const doc_hit_t & doc_hit) {$/;"	f	class:unise::FixPostList
reserve	ju-seatch\unise\index\fix_post_list.cc	/^void FixPostList::reserve(size_t s) {$/;"	f	class:unise::FixPostList
size	ju-seatch\unise\index\fix_post_list.cc	/^size_t FixPostList::size() const {$/;"	f	class:unise::FixPostList
unise	ju-seatch\unise\index\fix_post_list.cc	/^namespace unise {$/;"	n	file:
~FixPostList	ju-seatch\unise\index\fix_post_list.cc	/^FixPostList::~FixPostList() {$/;"	f	class:unise::FixPostList
FixPostList	ju-seatch\unise\index\fix_post_list.h	/^class FixPostList : public DocHitList {$/;"	c	namespace:unise
FixPostListIterator	ju-seatch\unise\index\fix_post_list.h	/^class FixPostListIterator : public DocHitListIterator {$/;"	c	namespace:unise
INDEX_FIX_POST_LIST_H	ju-seatch\unise\index\fix_post_list.h	4;"	d
PostBlockCmp	ju-seatch\unise\index\fix_post_list.h	/^class PostBlockCmp {$/;"	c	namespace:unise
_block_list	ju-seatch\unise\index\fix_post_list.h	/^    const std::vector<post_item_t *> & _block_list;$/;"	m	class:unise::FixPostListIterator
_block_list	ju-seatch\unise\index\fix_post_list.h	/^    std::vector<post_item_t *> _block_list;$/;"	m	class:unise::FixPostList
_cur_block_idx	ju-seatch\unise\index\fix_post_list.h	/^    size_t _cur_block_idx;$/;"	m	class:unise::FixPostListIterator
_cur_block_size	ju-seatch\unise\index\fix_post_list.h	/^    size_t _cur_block_size;$/;"	m	class:unise::FixPostListIterator
_cur_item_idx	ju-seatch\unise\index\fix_post_list.h	/^    size_t _cur_item_idx;$/;"	m	class:unise::FixPostListIterator
_illegal_doc_hit	ju-seatch\unise\index\fix_post_list.h	/^    doc_hit_t _illegal_doc_hit;$/;"	m	class:unise::FixPostListIterator
_last_block	ju-seatch\unise\index\fix_post_list.h	/^    post_item_t * _last_block;$/;"	m	class:unise::FixPostList
_last_block_free_cnt	ju-seatch\unise\index\fix_post_list.h	/^    size_t _last_block_free_cnt;$/;"	m	class:unise::FixPostList
_last_block_size	ju-seatch\unise\index\fix_post_list.h	/^    size_t _last_block_size;$/;"	m	class:unise::FixPostListIterator
_size	ju-seatch\unise\index\fix_post_list.h	/^    size_t _size;$/;"	m	class:unise::FixPostList
_size	ju-seatch\unise\index\fix_post_list.h	/^    size_t _size;$/;"	m	class:unise::FixPostListIterator
_token_id	ju-seatch\unise\index\fix_post_list.h	/^    TokenId _token_id;$/;"	m	class:unise::FixPostList
doc_hit	ju-seatch\unise\index\fix_post_list.h	/^    doc_hit_t doc_hit;$/;"	m	struct:unise::post_item_t
get_name	ju-seatch\unise\index\fix_post_list.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::FixPostList
get_token_id	ju-seatch\unise\index\fix_post_list.h	/^    virtual TokenId get_token_id() const {$/;"	f	class:unise::FixPostList
is_delete	ju-seatch\unise\index\fix_post_list.h	/^    uint8_t is_delete:1;  \/\/\/< 是否删除$/;"	m	struct:unise::post_item_t
operator ()	ju-seatch\unise\index\fix_post_list.h	/^    bool operator() (const post_item_t * a, const post_item_t * b) {$/;"	f	class:unise::PostBlockCmp
operator <	ju-seatch\unise\index\fix_post_list.h	/^    bool operator<(const post_item_t & b) const {$/;"	f	struct:unise::post_item_t
operator ==	ju-seatch\unise\index\fix_post_list.h	/^    bool operator==(const post_item_t & b) const {$/;"	f	struct:unise::post_item_t
post_item_t	ju-seatch\unise\index\fix_post_list.h	/^struct post_item_t {$/;"	s	namespace:unise
reserved	ju-seatch\unise\index\fix_post_list.h	/^    uint8_t reserved:7;   \/\/\/< 预留字段$/;"	m	struct:unise::post_item_t
unise	ju-seatch\unise\index\fix_post_list.h	/^namespace unise {$/;"	n
~FixPostListIterator	ju-seatch\unise\index\fix_post_list.h	/^    virtual ~FixPostListIterator() {}$/;"	f	class:unise::FixPostListIterator
FixTimeArrayIterator	ju-seatch\unise\index\fix_time_array.cc	/^FixTimeArrayIterator::FixTimeArrayIterator(const DocHitList & list)$/;"	f	class:unise::FixTimeArrayIterator
done	ju-seatch\unise\index\fix_time_array.cc	/^bool FixTimeArrayIterator::done() const$/;"	f	class:unise::FixTimeArrayIterator
get_current_value	ju-seatch\unise\index\fix_time_array.cc	/^const doc_hit_t & FixTimeArrayIterator::get_current_value() const$/;"	f	class:unise::FixTimeArrayIterator
get_match	ju-seatch\unise\index\fix_time_array.cc	/^void FixTimeArrayIterator::get_match()$/;"	f	class:unise::FixTimeArrayIterator
jump_to	ju-seatch\unise\index\fix_time_array.cc	/^void FixTimeArrayIterator::jump_to(const doc_hit_t & doc_hit)$/;"	f	class:unise::FixTimeArrayIterator
next	ju-seatch\unise\index\fix_time_array.cc	/^void FixTimeArrayIterator::next()$/;"	f	class:unise::FixTimeArrayIterator
remove	ju-seatch\unise\index\fix_time_array.cc	/^void FixTimeArray::remove(const doc_hit_t & doc_hit)$/;"	f	class:unise::FixTimeArray
unise	ju-seatch\unise\index\fix_time_array.cc	/^namespace unise$/;"	n	file:
FixTimeArray	ju-seatch\unise\index\fix_time_array.h	/^    FixTimeArray(TokenId token_id, std::vector<doc_hit_t> * array)$/;"	f	class:unise::FixTimeArray
FixTimeArray	ju-seatch\unise\index\fix_time_array.h	/^    explicit FixTimeArray(TokenId token_id)$/;"	f	class:unise::FixTimeArray
FixTimeArray	ju-seatch\unise\index\fix_time_array.h	/^class FixTimeArray : public DocHitList$/;"	c	namespace:unise
FixTimeArrayIterator	ju-seatch\unise\index\fix_time_array.h	/^class FixTimeArrayIterator : public DocHitListIterator$/;"	c	namespace:unise
INDEX_FIX_TIME_ARRAY_H	ju-seatch\unise\index\fix_time_array.h	4;"	d
_array	ju-seatch\unise\index\fix_time_array.h	/^    const std::vector<doc_hit_t> & _array;$/;"	m	class:unise::FixTimeArrayIterator
_array	ju-seatch\unise\index\fix_time_array.h	/^    std::vector<doc_hit_t> _array;$/;"	m	class:unise::FixTimeArray
_count	ju-seatch\unise\index\fix_time_array.h	/^    int32_t _count; \/\/\/< 字节内偏移$/;"	m	class:unise::FixTimeArrayIterator
_cur_delete_mask	ju-seatch\unise\index\fix_time_array.h	/^    uint8_t _cur_delete_mask;$/;"	m	class:unise::FixTimeArrayIterator
_delete_it	ju-seatch\unise\index\fix_time_array.h	/^    std::vector<uint8_t>::const_iterator _delete_it; $/;"	m	class:unise::FixTimeArrayIterator
_delete_map	ju-seatch\unise\index\fix_time_array.h	/^    const std::vector<uint8_t> & _delete_map;$/;"	m	class:unise::FixTimeArrayIterator
_delete_map	ju-seatch\unise\index\fix_time_array.h	/^    std::vector<uint8_t> _delete_map;$/;"	m	class:unise::FixTimeArray
_illegal_doc_hit	ju-seatch\unise\index\fix_time_array.h	/^    doc_hit_t _illegal_doc_hit;$/;"	m	class:unise::FixTimeArrayIterator
_iterator	ju-seatch\unise\index\fix_time_array.h	/^    std::vector<doc_hit_t>::const_iterator _iterator;$/;"	m	class:unise::FixTimeArrayIterator
_token_id	ju-seatch\unise\index\fix_time_array.h	/^    TokenId _token_id;$/;"	m	class:unise::FixTimeArray
add	ju-seatch\unise\index\fix_time_array.h	/^    virtual bool add(const doc_hit_t & doc_hit)$/;"	f	class:unise::FixTimeArray
get_name	ju-seatch\unise\index\fix_time_array.h	/^    virtual std::string get_name() const$/;"	f	class:unise::FixTimeArray
get_progress	ju-seatch\unise\index\fix_time_array.h	/^    virtual float get_progress() const {$/;"	f	class:unise::FixTimeArrayIterator
get_token_id	ju-seatch\unise\index\fix_time_array.h	/^    virtual TokenId get_token_id() const$/;"	f	class:unise::FixTimeArray
reserve	ju-seatch\unise\index\fix_time_array.h	/^    virtual void reserve(size_t s)$/;"	f	class:unise::FixTimeArray
size	ju-seatch\unise\index\fix_time_array.h	/^    virtual size_t size() const$/;"	f	class:unise::FixTimeArray
unise	ju-seatch\unise\index\fix_time_array.h	/^namespace unise$/;"	n
~FixTimeArray	ju-seatch\unise\index\fix_time_array.h	/^    virtual ~FixTimeArray() {}$/;"	f	class:unise::FixTimeArray
~FixTimeArrayIterator	ju-seatch\unise\index\fix_time_array.h	/^    virtual ~FixTimeArrayIterator() {}$/;"	f	class:unise::FixTimeArrayIterator
ForwardIndex	ju-seatch\unise\index\forward_index.h	/^    ForwardIndex() {}$/;"	f	class:unise::ForwardIndex
ForwardIndex	ju-seatch\unise\index\forward_index.h	/^class ForwardIndex$/;"	c	namespace:unise
INDEX_FORWARD_INDEX_H	ju-seatch\unise\index\forward_index.h	4;"	d
get_dump_data	ju-seatch\unise\index\forward_index.h	/^    virtual int get_dump_data(uint8_t * buffer, size_t length) const { return -1; }$/;"	f	class:unise::ForwardIndex
load_dump_data	ju-seatch\unise\index\forward_index.h	/^    virtual bool load_dump_data(uint8_t * buffer, size_t length) { return false; }$/;"	f	class:unise::ForwardIndex
unise	ju-seatch\unise\index\forward_index.h	/^namespace unise$/;"	n
~ForwardIndex	ju-seatch\unise\index\forward_index.h	/^    virtual ~ForwardIndex() {}$/;"	f	class:unise::ForwardIndex
destroy	ju-seatch\unise\index\general_doc_factory.cc	/^void GeneralDocFactory::destroy(DimensionDoc * doc)$/;"	f	class:unise::GeneralDocFactory
init	ju-seatch\unise\index\general_doc_factory.cc	/^bool GeneralDocFactory::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::GeneralDocFactory
on_delete_event	ju-seatch\unise\index\general_doc_factory.cc	/^void GeneralDocFactory::on_delete_event(DimensionDoc * doc)$/;"	f	class:unise::GeneralDocFactory
produce	ju-seatch\unise\index\general_doc_factory.cc	/^DimensionDoc * GeneralDocFactory::produce(const std::string & line)$/;"	f	class:unise::GeneralDocFactory
unise	ju-seatch\unise\index\general_doc_factory.cc	/^namespace unise$/;"	n	file:
GeneralDocFactory	ju-seatch\unise\index\general_doc_factory.h	/^    GeneralDocFactory() {}$/;"	f	class:unise::GeneralDocFactory
GeneralDocFactory	ju-seatch\unise\index\general_doc_factory.h	/^class GeneralDocFactory : public DocFactory$/;"	c	namespace:unise
INDEX_GENERAL_DOC_FACTORY_H_	ju-seatch\unise\index\general_doc_factory.h	4;"	d
_format_config	ju-seatch\unise\index\general_doc_factory.h	/^    FormatConfig _format_config;$/;"	m	class:unise::GeneralDocFactory
get_name	ju-seatch\unise\index\general_doc_factory.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::GeneralDocFactory
unise	ju-seatch\unise\index\general_doc_factory.h	/^namespace unise$/;"	n
~GeneralDocFactory	ju-seatch\unise\index\general_doc_factory.h	/^    virtual ~GeneralDocFactory() {}$/;"	f	class:unise::GeneralDocFactory
GeneralFactDoc	ju-seatch\unise\index\general_fact_doc.h	/^    GeneralFactDoc() {}$/;"	f	class:unise::GeneralFactDoc
GeneralFactDoc	ju-seatch\unise\index\general_fact_doc.h	/^class GeneralFactDoc : public FactDoc$/;"	c	namespace:unise
INDEX_GENERAL_FACT_DOC_H_	ju-seatch\unise\index\general_fact_doc.h	4;"	d
docid	ju-seatch\unise\index\general_fact_doc.h	/^    DocId docid;$/;"	m	class:unise::GeneralFactDoc
get_dimension_name	ju-seatch\unise\index\general_fact_doc.h	/^    virtual std::string get_dimension_name() const {$/;"	f	class:unise::GeneralFactDoc
get_doc_id	ju-seatch\unise\index\general_fact_doc.h	/^    virtual DocId get_doc_id() const {$/;"	f	class:unise::GeneralFactDoc
get_score	ju-seatch\unise\index\general_fact_doc.h	/^    virtual int32_t get_score() const {$/;"	f	class:unise::GeneralFactDoc
score	ju-seatch\unise\index\general_fact_doc.h	/^    int32_t score;$/;"	m	class:unise::GeneralFactDoc
unise	ju-seatch\unise\index\general_fact_doc.h	/^namespace unise$/;"	n
~GeneralFactDoc	ju-seatch\unise\index\general_fact_doc.h	/^    virtual ~GeneralFactDoc() {}$/;"	f	class:unise::GeneralFactDoc
g_tokens	ju-seatch\unise\index\index.cc	/^token_t g_tokens[ANNOTATION_SIZE_MAX];$/;"	m	namespace:unise	file:
get_token_hit_list_by_seg	ju-seatch\unise\index\index.cc	/^void get_token_hit_list_by_seg($/;"	f	namespace:unise
get_token_hit_list_from_annotation	ju-seatch\unise\index\index.cc	/^void get_token_hit_list_from_annotation($/;"	f	namespace:unise
max_wordseg_buffer_size	ju-seatch\unise\index\index.cc	/^DECLARE_int32(max_wordseg_buffer_size);$/;"	v
unise	ju-seatch\unise\index\index.cc	/^namespace unise {$/;"	n	file:
INDEX_INDEX_H_	ju-seatch\unise\index\index.h	4;"	d
ReadVint32	ju-seatch\unise\index\index.h	/^inline int ReadVint32(const char* buf, int32_t &value)$/;"	f	namespace:unise
WriteVint32	ju-seatch\unise\index\index.h	/^inline int WriteVint32(int32_t value, char* buf, int buf_len)$/;"	f	namespace:unise
check_annotation	ju-seatch\unise\index\index.h	/^inline bool check_annotation(const Annotation& anno, const AnnotationSchema& schema)$/;"	f	namespace:unise
dimension_doc_config_t	ju-seatch\unise\index\index.h	/^struct dimension_doc_config_t {$/;"	s	namespace:unise
get_dimension_doc_configs	ju-seatch\unise\index\index.h	/^inline std::vector<dimension_doc_config_t> get_dimension_doc_configs($/;"	f	namespace:unise
get_number_range_pairs	ju-seatch\unise\index\index.h	/^inline void get_number_range_pairs(int64_t value, int32_t precision_step,$/;"	f	namespace:unise
get_prefixs_from_string	ju-seatch\unise\index\index.h	/^inline void get_prefixs_from_string(const std::string& value,$/;"	f	namespace:unise
get_proper_range_pairs	ju-seatch\unise\index\index.h	/^inline void get_proper_range_pairs($/;"	f	namespace:unise
get_range_sequence	ju-seatch\unise\index\index.h	/^inline void get_range_sequence($/;"	f	namespace:unise
get_value_size	ju-seatch\unise\index\index.h	/^inline int32_t get_value_size(uint64_t value) {$/;"	f	namespace:unise
id	ju-seatch\unise\index\index.h	/^    uint32_t id;$/;"	m	struct:unise::dimension_doc_config_t
name	ju-seatch\unise\index\index.h	/^    std::string name;$/;"	m	struct:unise::dimension_doc_config_t
trans_word	ju-seatch\unise\index\index.h	/^inline void trans_word(const std::string& org, std::string * dst)$/;"	f	namespace:unise
unise	ju-seatch\unise\index\index.h	/^namespace unise$/;"	n
use_trans_word	ju-seatch\unise\index\index.h	/^DECLARE_bool(use_trans_word);$/;"	v
wordseg_flags	ju-seatch\unise\index\index.h	/^DECLARE_string(wordseg_flags);$/;"	v
add_one_token_to_map	ju-seatch\unise\index\mem_forward_index.cc	/^void MemForwardIndex::add_one_token_to_map(TokenId token_id,$/;"	f	class:unise::MemForwardIndex
build	ju-seatch\unise\index\mem_forward_index.cc	/^bool MemForwardIndex::build(const std::vector<TokenHit> &token_hits)$/;"	f	class:unise::MemForwardIndex
get_doc_token_hit_list	ju-seatch\unise\index\mem_forward_index.cc	/^bool MemForwardIndex::get_doc_token_hit_list(TokenId token_id,$/;"	f	class:unise::MemForwardIndex
get_doc_token_hit_list_size	ju-seatch\unise\index\mem_forward_index.cc	/^size_t MemForwardIndex::get_doc_token_hit_list_size(TokenId token_id) const$/;"	f	class:unise::MemForwardIndex
get_token_id_list	ju-seatch\unise\index\mem_forward_index.cc	/^bool MemForwardIndex::get_token_id_list(std::vector<TokenId> *token_id_list) const$/;"	f	class:unise::MemForwardIndex
get_token_num	ju-seatch\unise\index\mem_forward_index.cc	/^size_t MemForwardIndex::get_token_num() const$/;"	f	class:unise::MemForwardIndex
unise	ju-seatch\unise\index\mem_forward_index.cc	/^namespace unise$/;"	n	file:
MemForwardIndex	ju-seatch\unise\index\mem_forward_index.h	/^    MemForwardIndex() {}$/;"	f	class:unise::MemForwardIndex
MemForwardIndex	ju-seatch\unise\index\mem_forward_index.h	/^class MemForwardIndex : public ForwardIndex$/;"	c	namespace:unise
SecAnnoInfo	ju-seatch\unise\index\mem_forward_index.h	/^struct SecAnnoInfo {$/;"	s	namespace:unise
TokenInfo	ju-seatch\unise\index\mem_forward_index.h	/^    TokenInfo() : hit_list_size(0), data_len(0) {}$/;"	f	struct:unise::TokenInfo
TokenInfo	ju-seatch\unise\index\mem_forward_index.h	/^struct TokenInfo {$/;"	s	namespace:unise
__MEM_FORWARD_INDEX_H_	ju-seatch\unise\index\mem_forward_index.h	21;"	d
_token_map	ju-seatch\unise\index\mem_forward_index.h	/^    std::map<TokenId, TokenInfo> _token_map;          \/**< 存储token数据的map       *\/$/;"	m	class:unise::MemForwardIndex
annotation_id	ju-seatch\unise\index\mem_forward_index.h	/^    AnnotationId annotation_id;       \/**< annotation id       *\/$/;"	m	struct:unise::SecAnnoInfo
data	ju-seatch\unise\index\mem_forward_index.h	/^    boost::shared_array<uint8> data;$/;"	m	struct:unise::TokenInfo
data_len	ju-seatch\unise\index\mem_forward_index.h	/^    uint32_t data_len;$/;"	m	struct:unise::TokenInfo
hit_list_size	ju-seatch\unise\index\mem_forward_index.h	/^    uint32_t hit_list_size;$/;"	m	struct:unise::TokenInfo
pos	ju-seatch\unise\index\mem_forward_index.h	/^    std::vector<int32_t> pos;         \/**< pos数组       *\/$/;"	m	struct:unise::SecAnnoInfo
section_id	ju-seatch\unise\index\mem_forward_index.h	/^    SectionId section_id;        \/**< section id       *\/$/;"	m	struct:unise::SecAnnoInfo
unise	ju-seatch\unise\index\mem_forward_index.h	/^namespace unise$/;"	n
~MemForwardIndex	ju-seatch\unise\index\mem_forward_index.h	/^    virtual ~MemForwardIndex() {}$/;"	f	class:unise::MemForwardIndex
RealTimeDocHitListIterator	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^RealTimeDocHitListIterator::RealTimeDocHitListIterator(const DocHitList & list) :$/;"	f	class:unise::RealTimeDocHitListIterator
add	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^bool RealTimeDocHitList::add(const doc_hit_t & doc_hit)$/;"	f	class:unise::RealTimeDocHitList
done	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^bool RealTimeDocHitListIterator::done() const$/;"	f	class:unise::RealTimeDocHitListIterator
get_current_value	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^const doc_hit_t & RealTimeDocHitListIterator::get_current_value() const$/;"	f	class:unise::RealTimeDocHitListIterator
get_progress	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^float RealTimeDocHitListIterator::get_progress() const {$/;"	f	class:unise::RealTimeDocHitListIterator
jump_to	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^void RealTimeDocHitListIterator::jump_to(const doc_hit_t & doc_hit)$/;"	f	class:unise::RealTimeDocHitListIterator
next	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^void RealTimeDocHitListIterator::next()$/;"	f	class:unise::RealTimeDocHitListIterator
remove	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^void RealTimeDocHitList::remove(const doc_hit_t & doc_hit)$/;"	f	class:unise::RealTimeDocHitList
size	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^size_t RealTimeDocHitList::size() const$/;"	f	class:unise::RealTimeDocHitList
unise	ju-seatch\unise\index\real_time_doc_hit_list.cc	/^namespace unise$/;"	n	file:
INDEX_REAL_TIME_DOC_HIT_LIST_H	ju-seatch\unise\index\real_time_doc_hit_list.h	4;"	d
RealTimeDocHitList	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    explicit RealTimeDocHitList(TokenId token_id)$/;"	f	class:unise::RealTimeDocHitList
RealTimeDocHitList	ju-seatch\unise\index\real_time_doc_hit_list.h	/^class RealTimeDocHitList : public DocHitList$/;"	c	namespace:unise
RealTimeDocHitListIterator	ju-seatch\unise\index\real_time_doc_hit_list.h	/^class RealTimeDocHitListIterator : public DocHitListIterator$/;"	c	namespace:unise
_estimated_idx	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    size_t _estimated_idx;$/;"	m	class:unise::RealTimeDocHitListIterator
_illegal_doc_hit	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    doc_hit_t _illegal_doc_hit;$/;"	m	class:unise::RealTimeDocHitListIterator
_iterator	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    _SkipListConstIterator<doc_hit_t> _iterator;$/;"	m	class:unise::RealTimeDocHitListIterator
_list	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    SkipList<doc_hit_t> _list; \/\/\/< 采用SkipList作为底层实现$/;"	m	class:unise::RealTimeDocHitList
_list	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    const SkipList<doc_hit_t> & _list;$/;"	m	class:unise::RealTimeDocHitListIterator
_token_id	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    TokenId _token_id;$/;"	m	class:unise::RealTimeDocHitList
get_name	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    virtual std::string get_name() const$/;"	f	class:unise::RealTimeDocHitList
get_token_id	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    virtual TokenId get_token_id() const$/;"	f	class:unise::RealTimeDocHitList
unise	ju-seatch\unise\index\real_time_doc_hit_list.h	/^namespace unise$/;"	n
~RealTimeDocHitList	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    virtual ~RealTimeDocHitList() {}$/;"	f	class:unise::RealTimeDocHitList
~RealTimeDocHitListIterator	ju-seatch\unise\index\real_time_doc_hit_list.h	/^    virtual ~RealTimeDocHitListIterator() {}$/;"	f	class:unise::RealTimeDocHitListIterator
RepositoryManager	ju-seatch\unise\index\repository_manager.cc	/^RepositoryManager::RepositoryManager($/;"	f	class:unise::RepositoryManager
create_forward_index	ju-seatch\unise\index\repository_manager.cc	/^ForwardIndex * RepositoryManager::create_forward_index()$/;"	f	class:unise::RepositoryManager
create_token_list_by_id	ju-seatch\unise\index\repository_manager.cc	/^TokenList * RepositoryManager::create_token_list_by_id(TokenId token_id)$/;"	f	class:unise::RepositoryManager
delay_delete_doc_info	ju-seatch\unise\index\repository_manager.cc	/^void delay_delete_doc_info(doc_info_t * doc_info) {$/;"	f	namespace:unise
delete_doc_info	ju-seatch\unise\index\repository_manager.cc	/^void RepositoryManager::delete_doc_info(DocId docid)$/;"	f	class:unise::RepositoryManager
get_next_doc_info	ju-seatch\unise\index\repository_manager.cc	/^doc_hit_t RepositoryManager::get_next_doc_info(int32_t score, DocId docid) const$/;"	f	class:unise::RepositoryManager
get_token_list	ju-seatch\unise\index\repository_manager.cc	/^const TokenList * RepositoryManager::get_token_list($/;"	f	class:unise::RepositoryManager
get_token_list	ju-seatch\unise\index\repository_manager.cc	/^const void RepositoryManager::get_token_list(const RangeRestriction & rr,$/;"	f	class:unise::RepositoryManager
init	ju-seatch\unise\index\repository_manager.cc	/^bool RepositoryManager::init(const std::string& path)$/;"	f	class:unise::RepositoryManager
inverted_list_delete_delay	ju-seatch\unise\index\repository_manager.cc	/^DECLARE_int32(inverted_list_delete_delay);$/;"	v
set_token_list	ju-seatch\unise\index\repository_manager.cc	/^void RepositoryManager::set_token_list(TokenList * token_list)$/;"	f	class:unise::RepositoryManager
unise	ju-seatch\unise\index\repository_manager.cc	/^namespace unise$/;"	n	file:
~RepositoryManager	ju-seatch\unise\index\repository_manager.cc	/^RepositoryManager::~RepositoryManager()$/;"	f	class:unise::RepositoryManager
DocInfoComp	ju-seatch\unise\index\repository_manager.h	/^struct DocInfoComp {$/;"	s	namespace:unise
DocInfoList	ju-seatch\unise\index\repository_manager.h	/^    typedef set<doc_info_t*, DocInfoComp> DocInfoList;$/;"	t	class:unise::RepositoryManager
DocInfoMap	ju-seatch\unise\index\repository_manager.h	/^    typedef bsl::phashmap<DocId, doc_info_t*>   DocInfoMap;     \/\/\/< 正排哈希结构$/;"	t	class:unise::RepositoryManager
INDEX_REPOSITORY_MANAGER_H	ju-seatch\unise\index\repository_manager.h	4;"	d
RepositoryManager	ju-seatch\unise\index\repository_manager.h	/^class RepositoryManager$/;"	c	namespace:unise
TokenListMap	ju-seatch\unise\index\repository_manager.h	/^    typedef bsl::phashmap<TokenId, TokenList*>  TokenListMap;   \/\/\/< 倒排哈希结构$/;"	t	class:unise::RepositoryManager
_annotation_manager	ju-seatch\unise\index\repository_manager.h	/^    AnnotationManager * _annotation_manager;$/;"	m	class:unise::RepositoryManager
_dimension_doc_manager	ju-seatch\unise\index\repository_manager.h	/^    DimensionDocManager * _dimension_doc_manager;$/;"	m	class:unise::RepositoryManager
_doc_info_list	ju-seatch\unise\index\repository_manager.h	/^    DocInfoList * _doc_info_list;$/;"	m	class:unise::RepositoryManager
_doc_info_list_mu	ju-seatch\unise\index\repository_manager.h	/^    mutable boost::shared_mutex _doc_info_list_mu;$/;"	m	class:unise::RepositoryManager
_doc_info_map	ju-seatch\unise\index\repository_manager.h	/^    DocInfoMap      _doc_info_map;     \/\/\/< 正排哈希表$/;"	m	class:unise::RepositoryManager
_token_list_map	ju-seatch\unise\index\repository_manager.h	/^    TokenListMap    _token_list_map;   \/\/\/< 倒排哈希表$/;"	m	class:unise::RepositoryManager
add_doc_info	ju-seatch\unise\index\repository_manager.h	/^    inline void add_doc_info(doc_info_t * doc_info)$/;"	f	class:unise::RepositoryManager
add_doc_info_with_lock	ju-seatch\unise\index\repository_manager.h	/^    void add_doc_info_with_lock(doc_info_t * doc_info)$/;"	f	class:unise::RepositoryManager
get_annotation_manager	ju-seatch\unise\index\repository_manager.h	/^    AnnotationManager * get_annotation_manager() {$/;"	f	class:unise::RepositoryManager
get_annotation_manager	ju-seatch\unise\index\repository_manager.h	/^    const AnnotationManager & get_annotation_manager() const {$/;"	f	class:unise::RepositoryManager
get_dimension_doc_manager	ju-seatch\unise\index\repository_manager.h	/^    DimensionDocManager * get_dimension_doc_manager() {$/;"	f	class:unise::RepositoryManager
get_dimension_doc_manager	ju-seatch\unise\index\repository_manager.h	/^    const DimensionDocManager & get_dimension_doc_manager() const {$/;"	f	class:unise::RepositoryManager
get_doc_info	ju-seatch\unise\index\repository_manager.h	/^    const doc_info_t * get_doc_info(DocId docid) const {$/;"	f	class:unise::RepositoryManager
get_doc_info	ju-seatch\unise\index\repository_manager.h	/^    doc_info_t * get_doc_info(DocId docid) {$/;"	f	class:unise::RepositoryManager
get_fact_doc_count	ju-seatch\unise\index\repository_manager.h	/^    const size_t get_fact_doc_count() const {$/;"	f	class:unise::RepositoryManager
get_token_list	ju-seatch\unise\index\repository_manager.h	/^    const TokenList * get_token_list(TokenId token_id) const {$/;"	f	class:unise::RepositoryManager
get_token_list	ju-seatch\unise\index\repository_manager.h	/^    inline TokenList * get_token_list(TokenId token_id) {$/;"	f	class:unise::RepositoryManager
operator ()	ju-seatch\unise\index\repository_manager.h	/^    bool operator()(doc_info_t* const & a,$/;"	f	struct:unise::DocInfoComp
unise	ju-seatch\unise\index\repository_manager.h	/^namespace unise$/;"	n
TokenHit	ju-seatch\unise\index\token_hit.cc	/^TokenHit::TokenHit(int32_t score,$/;"	f	class:unise::TokenHit
TokenHitCompare	ju-seatch\unise\index\token_hit.cc	/^bool TokenHitCompare(const TokenHit & a, const TokenHit & b)$/;"	f	namespace:unise
print	ju-seatch\unise\index\token_hit.cc	/^void TokenHit::print() const$/;"	f	class:unise::TokenHit
unise	ju-seatch\unise\index\token_hit.cc	/^namespace unise$/;"	n	file:
INDEX_TOKEN_HIT_H	ju-seatch\unise\index\token_hit.h	4;"	d
TokenHit	ju-seatch\unise\index\token_hit.h	/^class TokenHit$/;"	c	namespace:unise
annotation_id_	ju-seatch\unise\index\token_hit.h	/^    AnnotationId annotation_id_;$/;"	m	class:unise::TokenHit
docid_	ju-seatch\unise\index\token_hit.h	/^    DocId docid_;     \/\/\/< 命中doc的docid$/;"	m	class:unise::TokenHit
get_annotation_id	ju-seatch\unise\index\token_hit.h	/^    AnnotationId get_annotation_id() const {$/;"	f	class:unise::TokenHit
get_doc_id	ju-seatch\unise\index\token_hit.h	/^    DocId get_doc_id() const {$/;"	f	class:unise::TokenHit
get_pos	ju-seatch\unise\index\token_hit.h	/^    int32_t get_pos() const {$/;"	f	class:unise::TokenHit
get_score	ju-seatch\unise\index\token_hit.h	/^    int32_t get_score() const {$/;"	f	class:unise::TokenHit
get_section_id	ju-seatch\unise\index\token_hit.h	/^    SectionId get_section_id() const {$/;"	f	class:unise::TokenHit
get_token_id	ju-seatch\unise\index\token_hit.h	/^    TokenId get_token_id() const {$/;"	f	class:unise::TokenHit
get_token_value	ju-seatch\unise\index\token_hit.h	/^    const std::string & get_token_value() const {$/;"	f	class:unise::TokenHit
operator <	ju-seatch\unise\index\token_hit.h	/^    bool operator < (const TokenHit & b) const {$/;"	f	class:unise::TokenHit
pos_	ju-seatch\unise\index\token_hit.h	/^    int32_t pos_;       \/\/\/< term命中annotation的位置，从1开始$/;"	m	class:unise::TokenHit
score_	ju-seatch\unise\index\token_hit.h	/^    int32_t score_;     \/\/\/< 命中doc的分数$/;"	m	class:unise::TokenHit
section_id_	ju-seatch\unise\index\token_hit.h	/^    SectionId section_id_;$/;"	m	class:unise::TokenHit
token_id_	ju-seatch\unise\index\token_hit.h	/^    TokenId token_id_;    \/\/\/< value_的64位hash$/;"	m	class:unise::TokenHit
unise	ju-seatch\unise\index\token_hit.h	/^namespace unise$/;"	n
value_	ju-seatch\unise\index\token_hit.h	/^    std::string value_;  \/\/\/< token的取值，注意，不是term$/;"	m	class:unise::TokenHit
~TokenHit	ju-seatch\unise\index\token_hit.h	/^    ~TokenHit() {}$/;"	f	class:unise::TokenHit
TokenList	ju-seatch\unise\index\token_list.cc	/^TokenList::TokenList(TokenId token_id) : _token_id(token_id) {$/;"	f	class:unise::TokenList
TokenList	ju-seatch\unise\index\token_list.cc	/^TokenList::TokenList(TokenId token_id, DocHitList * fix_list) :$/;"	f	class:unise::TokenList
delete_doc_hit	ju-seatch\unise\index\token_list.cc	/^void TokenList::delete_doc_hit(const doc_hit_t & doc_hit) {$/;"	f	class:unise::TokenList
insert_doc_hit	ju-seatch\unise\index\token_list.cc	/^void TokenList::insert_doc_hit(const doc_hit_t & doc_hit) {$/;"	f	class:unise::TokenList
merge	ju-seatch\unise\index\token_list.cc	/^void TokenList::merge() {$/;"	f	class:unise::TokenList
push_to_list	ju-seatch\unise\index\token_list.cc	/^void TokenList::push_to_list(const doc_hit_t & doc_hit, DocHitList * list) {$/;"	f	class:unise::TokenList
release_delay	ju-seatch\unise\index\token_list.cc	/^void release_delay(DocHitList * a, DocHitList * b) {$/;"	f	namespace:unise
unise	ju-seatch\unise\index\token_list.cc	/^namespace unise {$/;"	n	file:
~TokenList	ju-seatch\unise\index\token_list.cc	/^TokenList::~TokenList() {$/;"	f	class:unise::TokenList
FIX_TIME_ARRAY	ju-seatch\unise\index\token_list.h	/^    FIX_TIME_ARRAY = 1,  \/\/\/< 历史链类型$/;"	e	enum:unise::token_list_type_t
INDEX_TOKEN_LIST_H_	ju-seatch\unise\index\token_list.h	4;"	d
REAL_TIME_LIST	ju-seatch\unise\index\token_list.h	/^    REAL_TIME_LIST = 0,  \/\/\/< 实时链类型$/;"	e	enum:unise::token_list_type_t
TokenList	ju-seatch\unise\index\token_list.h	/^class TokenList {$/;"	c	namespace:unise
_buffer_list	ju-seatch\unise\index\token_list.h	/^    DocHitList * _buffer_list;$/;"	m	class:unise::TokenList
_buffer_merge_threshold	ju-seatch\unise\index\token_list.h	/^    int32_t _buffer_merge_threshold;$/;"	m	class:unise::TokenList
_fix_list	ju-seatch\unise\index\token_list.h	/^    DocHitList * _fix_list;$/;"	m	class:unise::TokenList
_token_id	ju-seatch\unise\index\token_list.h	/^    TokenId _token_id;$/;"	m	class:unise::TokenList
get_doc_hit_list	ju-seatch\unise\index\token_list.h	/^    const DocHitList & get_doc_hit_list(token_list_type_t type) const {$/;"	f	class:unise::TokenList
get_length	ju-seatch\unise\index\token_list.h	/^    size_t get_length() const {$/;"	f	class:unise::TokenList
get_token_id	ju-seatch\unise\index\token_list.h	/^    TokenId get_token_id() const {$/;"	f	class:unise::TokenList
set_filter_flag	ju-seatch\unise\index\token_list.h	/^    void set_filter_flag(const doc_hit_t& doc_hit, bool flag) {$/;"	f	class:unise::TokenList
token_list_type_t	ju-seatch\unise\index\token_list.h	/^enum token_list_type_t {$/;"	g	namespace:unise
unise	ju-seatch\unise\index\token_list.h	/^namespace unise {$/;"	n
AndIterator	ju-seatch\unise\retri\and_iterator.cc	/^AndIterator::AndIterator(const vector<ForwardIterator *> & it_list)$/;"	f	class:unise::AndIterator
done	ju-seatch\unise\retri\and_iterator.cc	/^bool AndIterator::done() const$/;"	f	class:unise::AndIterator
get_cur_doc_hit	ju-seatch\unise\retri\and_iterator.cc	/^const doc_hit_t & AndIterator::get_cur_doc_hit() const$/;"	f	class:unise::AndIterator
get_estimated_num	ju-seatch\unise\retri\and_iterator.cc	/^uint64_t AndIterator::get_estimated_num() const {$/;"	f	class:unise::AndIterator
get_hit_list	ju-seatch\unise\retri\and_iterator.cc	/^void AndIterator::get_hit_list(std::stack<TokenId> * hits) const$/;"	f	class:unise::AndIterator
get_match	ju-seatch\unise\retri\and_iterator.cc	/^void AndIterator::get_match()$/;"	f	class:unise::AndIterator
get_progress	ju-seatch\unise\retri\and_iterator.cc	/^float AndIterator::get_progress() const {$/;"	f	class:unise::AndIterator
jump_to	ju-seatch\unise\retri\and_iterator.cc	/^void AndIterator::jump_to(DocId docid, int32_t score)$/;"	f	class:unise::AndIterator
next	ju-seatch\unise\retri\and_iterator.cc	/^void AndIterator::next()$/;"	f	class:unise::AndIterator
post_retrieval_check_internal	ju-seatch\unise\retri\and_iterator.cc	/^bool AndIterator::post_retrieval_check_internal()$/;"	f	class:unise::AndIterator
unise	ju-seatch\unise\retri\and_iterator.cc	/^namespace unise$/;"	n	file:
AndIterator	ju-seatch\unise\retri\and_iterator.h	/^class AndIterator : public ForwardIterator$/;"	c	namespace:unise
RETRI_AND_ITERATOR_H_	ju-seatch\unise\retri\and_iterator.h	4;"	d
_cur_doc_hit	ju-seatch\unise\retri\and_iterator.h	/^    doc_hit_t _cur_doc_hit;$/;"	m	class:unise::AndIterator
_it_list	ju-seatch\unise\retri\and_iterator.h	/^    std::vector<ForwardIterator *> _it_list;$/;"	m	class:unise::AndIterator
unise	ju-seatch\unise\retri\and_iterator.h	/^namespace unise$/;"	n
~AndIterator	ju-seatch\unise\retri\and_iterator.h	/^    virtual ~AndIterator() {}$/;"	f	class:unise::AndIterator
filter	ju-seatch\unise\retri\annotation_filter.cc	/^result_status_t AnnotationFilter::filter(MatchedDoc * result)$/;"	f	class:unise::AnnotationFilter
init	ju-seatch\unise\retri\annotation_filter.cc	/^bool AnnotationFilter::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::AnnotationFilter
init_for_search	ju-seatch\unise\retri\annotation_filter.cc	/^void AnnotationFilter::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::AnnotationFilter
unise	ju-seatch\unise\retri\annotation_filter.cc	/^namespace unise {$/;"	n	file:
AnnotationFilter	ju-seatch\unise\retri\annotation_filter.h	/^    AnnotationFilter() {}$/;"	f	class:unise::AnnotationFilter
AnnotationFilter	ju-seatch\unise\retri\annotation_filter.h	/^class AnnotationFilter : public ResultFilter$/;"	c	namespace:unise
RETRI_ANNOTATION_FILTER_H_	ju-seatch\unise\retri\annotation_filter.h	4;"	d
_filter_list	ju-seatch\unise\retri\annotation_filter.h	/^    std::vector<const NumberSpec *> _filter_list;$/;"	m	class:unise::AnnotationFilter
_need_filter	ju-seatch\unise\retri\annotation_filter.h	/^    bool _need_filter;$/;"	m	class:unise::AnnotationFilter
get_name	ju-seatch\unise\retri\annotation_filter.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::AnnotationFilter
unise	ju-seatch\unise\retri\annotation_filter.h	/^namespace unise$/;"	n
~AnnotationFilter	ju-seatch\unise\retri\annotation_filter.h	/^    virtual ~AnnotationFilter() {}$/;"	f	class:unise::AnnotationFilter
build	ju-seatch\unise\retri\backend_query_builder.cc	/^bool BackendQueryBuilder::build(const std::string &str, QueryNode *root) {$/;"	f	class:unise::BackendQueryBuilder
find_sep	ju-seatch\unise\retri\backend_query_builder.cc	/^void find_sep(const std::string &str, std::vector<size_t> *pos_list) {$/;"	f	namespace:unise
unise	ju-seatch\unise\retri\backend_query_builder.cc	/^namespace unise {$/;"	n	file:
BACKEND_QUERY_BUILDER_H_	ju-seatch\unise\retri\backend_query_builder.h	4;"	d
BackendQueryBuilder	ju-seatch\unise\retri\backend_query_builder.h	/^    BackendQueryBuilder() {}$/;"	f	class:unise::BackendQueryBuilder
BackendQueryBuilder	ju-seatch\unise\retri\backend_query_builder.h	/^class BackendQueryBuilder {$/;"	c	namespace:unise
unise	ju-seatch\unise\retri\backend_query_builder.h	/^namespace unise {$/;"	n
~BackendQueryBuilder	ju-seatch\unise\retri\backend_query_builder.h	/^    ~BackendQueryBuilder() {}$/;"	f	class:unise::BackendQueryBuilder
filter	ju-seatch\unise\retri\blacklist_filter.cc	/^result_status_t BlacklistFilter::filter(MatchedDoc * result)$/;"	f	class:unise::BlacklistFilter
init	ju-seatch\unise\retri\blacklist_filter.cc	/^bool BlacklistFilter::init(const comcfg::ConfigUnit & conf)$/;"	f	class:unise::BlacklistFilter
unise	ju-seatch\unise\retri\blacklist_filter.cc	/^namespace unise$/;"	n	file:
BlacklistFilter	ju-seatch\unise\retri\blacklist_filter.h	/^    BlacklistFilter() {}$/;"	f	class:unise::BlacklistFilter
BlacklistFilter	ju-seatch\unise\retri\blacklist_filter.h	/^class BlacklistFilter : public ResultFilter$/;"	c	namespace:unise
FilterIdMap	ju-seatch\unise\retri\blacklist_filter.h	/^    typedef __gnu_cxx::hash_map<DocId, bool> FilterIdMap;$/;"	t	class:unise::BlacklistFilter
PerformanceFilter	ju-seatch\unise\retri\blacklist_filter.h	/^    PerformanceFilter() {}$/;"	f	class:unise::PerformanceFilter
PerformanceFilter	ju-seatch\unise\retri\blacklist_filter.h	/^class PerformanceFilter : public ResultFilter$/;"	c	namespace:unise
RETRI_BLACKLIST_FILTER_H_	ju-seatch\unise\retri\blacklist_filter.h	4;"	d
filter	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual result_status_t filter(MatchedDoc * result)$/;"	f	class:unise::PerformanceFilter
filter_id_map_	ju-seatch\unise\retri\blacklist_filter.h	/^    FilterIdMap filter_id_map_;$/;"	m	class:unise::BlacklistFilter
get_name	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::BlacklistFilter
get_name	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::PerformanceFilter
init_for_search	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::BlacklistFilter
init_for_search	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::PerformanceFilter
unise	ju-seatch\unise\retri\blacklist_filter.h	/^namespace unise$/;"	n
~BlacklistFilter	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual ~BlacklistFilter() {}$/;"	f	class:unise::BlacklistFilter
~PerformanceFilter	ju-seatch\unise\retri\blacklist_filter.h	/^    virtual ~PerformanceFilter() {}$/;"	f	class:unise::PerformanceFilter
BranchIterator	ju-seatch\unise\retri\branch_iterator.cc	/^BranchIterator::BranchIterator(const vector<ForwardIterator *> & it_list,$/;"	f	class:unise::BranchIterator
done	ju-seatch\unise\retri\branch_iterator.cc	/^bool BranchIterator::done() const {$/;"	f	class:unise::BranchIterator
get_cur_doc_hit	ju-seatch\unise\retri\branch_iterator.cc	/^const doc_hit_t & BranchIterator::get_cur_doc_hit() const {$/;"	f	class:unise::BranchIterator
get_estimated_num	ju-seatch\unise\retri\branch_iterator.cc	/^uint64_t BranchIterator::get_estimated_num() const {$/;"	f	class:unise::BranchIterator
get_hit_list	ju-seatch\unise\retri\branch_iterator.cc	/^void BranchIterator::get_hit_list(std::stack<TokenId> * hits) const {$/;"	f	class:unise::BranchIterator
get_match	ju-seatch\unise\retri\branch_iterator.cc	/^void BranchIterator::get_match() {$/;"	f	class:unise::BranchIterator
get_progress	ju-seatch\unise\retri\branch_iterator.cc	/^float BranchIterator::get_progress() const {$/;"	f	class:unise::BranchIterator
jump_to	ju-seatch\unise\retri\branch_iterator.cc	/^void BranchIterator::jump_to(DocId docid, int32_t score) {$/;"	f	class:unise::BranchIterator
next	ju-seatch\unise\retri\branch_iterator.cc	/^void BranchIterator::next() {$/;"	f	class:unise::BranchIterator
post_retrieval_check_internal	ju-seatch\unise\retri\branch_iterator.cc	/^bool BranchIterator::post_retrieval_check_internal() {$/;"	f	class:unise::BranchIterator
unise	ju-seatch\unise\retri\branch_iterator.cc	/^namespace unise {$/;"	n	file:
BAIDU_MMS_UNISE_RETRI_BRANCH_ITERATOR_H	ju-seatch\unise\retri\branch_iterator.h	4;"	d
BranchIterator	ju-seatch\unise\retri\branch_iterator.h	/^class BranchIterator : public ForwardIterator {$/;"	c	namespace:unise
ForwardItBranchComp	ju-seatch\unise\retri\branch_iterator.h	/^struct ForwardItBranchComp {$/;"	s	namespace:unise
SelectedSet	ju-seatch\unise\retri\branch_iterator.h	/^    typedef bsl::hashset<DocId>  SelectedSet;$/;"	t	class:unise::BranchIterator
WeightRoundPair	ju-seatch\unise\retri\branch_iterator.h	/^    WeightRoundPair(uint32_t w, uint32_t r) : weight(w), round(r) {}$/;"	f	struct:unise::WeightRoundPair
WeightRoundPair	ju-seatch\unise\retri\branch_iterator.h	/^struct WeightRoundPair {$/;"	s	namespace:unise
_cur_doc_hit	ju-seatch\unise\retri\branch_iterator.h	/^    doc_hit_t _cur_doc_hit;$/;"	m	class:unise::BranchIterator
_heap	ju-seatch\unise\retri\branch_iterator.h	/^                         ForwardItBranchComp > _heap;$/;"	m	class:unise::BranchIterator
_it_list	ju-seatch\unise\retri\branch_iterator.h	/^    std::vector<ForwardIterator *> _it_list;$/;"	m	class:unise::BranchIterator
_selected_set	ju-seatch\unise\retri\branch_iterator.h	/^    SelectedSet _selected_set;$/;"	m	class:unise::BranchIterator
_weight_list	ju-seatch\unise\retri\branch_iterator.h	/^    std::vector<uint32_t> _weight_list;$/;"	m	class:unise::BranchIterator
operator ()	ju-seatch\unise\retri\branch_iterator.h	/^    bool operator()(const std::pair<size_t, WeightRoundPair> & a,$/;"	f	struct:unise::ForwardItBranchComp
round	ju-seatch\unise\retri\branch_iterator.h	/^    uint32_t round;$/;"	m	struct:unise::WeightRoundPair
unise	ju-seatch\unise\retri\branch_iterator.h	/^namespace unise {$/;"	n
weight	ju-seatch\unise\retri\branch_iterator.h	/^    uint32_t weight;$/;"	m	struct:unise::WeightRoundPair
~BranchIterator	ju-seatch\unise\retri\branch_iterator.h	/^    virtual ~BranchIterator() {}$/;"	f	class:unise::BranchIterator
filter	ju-seatch\unise\retri\buildin_filter.cc	/^result_status_t BuildinFilter::filter(MatchedDoc * doc)$/;"	f	class:unise::BuildinFilter
init	ju-seatch\unise\retri\buildin_filter.cc	/^bool BuildinFilter::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::BuildinFilter
init_for_search	ju-seatch\unise\retri\buildin_filter.cc	/^void BuildinFilter::init_for_search(const GeneralSearchRequest* request, SearchContext * context)$/;"	f	class:unise::BuildinFilter
unise	ju-seatch\unise\retri\buildin_filter.cc	/^namespace unise$/;"	n	file:
BuildinFilter	ju-seatch\unise\retri\buildin_filter.h	/^    BuildinFilter() {}$/;"	f	class:unise::BuildinFilter
BuildinFilter	ju-seatch\unise\retri\buildin_filter.h	/^class BuildinFilter : public ResultFilter$/;"	c	namespace:unise
RETRI_BUILDIN_FILTER_H	ju-seatch\unise\retri\buildin_filter.h	4;"	d
_sort_schemas	ju-seatch\unise\retri\buildin_filter.h	/^    std::vector<const AnnotationSchema * > _sort_schemas;$/;"	m	class:unise::BuildinFilter
get_name	ju-seatch\unise\retri\buildin_filter.h	/^    virtual std::string get_name() const { return "BuildinFilter"; }$/;"	f	class:unise::BuildinFilter
unise	ju-seatch\unise\retri\buildin_filter.h	/^namespace unise$/;"	n
~BuildinFilter	ju-seatch\unise\retri\buildin_filter.h	/^    virtual ~BuildinFilter() {}$/;"	f	class:unise::BuildinFilter
operator ()	ju-seatch\unise\retri\default_comparator.cc	/^bool DefaultComparator::operator()(const MatchedDoc* a, const MatchedDoc* b) const$/;"	f	class:unise::DefaultComparator
unise	ju-seatch\unise\retri\default_comparator.cc	/^namespace unise {$/;"	n	file:
DefaultComparator	ju-seatch\unise\retri\default_comparator.h	/^    DefaultComparator() {}$/;"	f	class:unise::DefaultComparator
DefaultComparator	ju-seatch\unise\retri\default_comparator.h	/^class DefaultComparator : public Comparator$/;"	c	namespace:unise
RETRI_DEFAULT_COMPARATOR_H	ju-seatch\unise\retri\default_comparator.h	4;"	d
SearchResultComparator	ju-seatch\unise\retri\default_comparator.h	/^    SearchResultComparator() {}$/;"	f	class:unise::SearchResultComparator
SearchResultComparator	ju-seatch\unise\retri\default_comparator.h	/^class SearchResultComparator$/;"	c	namespace:unise
_comparator	ju-seatch\unise\retri\default_comparator.h	/^    SearchResultComparator _comparator;      \/\/\/< 基于排序参数的排序器$/;"	m	class:unise::DefaultComparator
_orders	ju-seatch\unise\retri\default_comparator.h	/^    std::vector<bool> _orders;$/;"	m	class:unise::SearchResultComparator
enable	ju-seatch\unise\retri\default_comparator.h	/^    inline bool enable() const$/;"	f	class:unise::SearchResultComparator
get_name	ju-seatch\unise\retri\default_comparator.h	/^    virtual std::string get_name() const$/;"	f	class:unise::DefaultComparator
init_for_search	ju-seatch\unise\retri\default_comparator.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::DefaultComparator
operator ()	ju-seatch\unise\retri\default_comparator.h	/^    bool operator()(const SearchResult* a, const SearchResult* b) const$/;"	f	class:unise::SearchResultComparator
reset	ju-seatch\unise\retri\default_comparator.h	/^    inline void reset(const GeneralSearchRequest * request)$/;"	f	class:unise::SearchResultComparator
unise	ju-seatch\unise\retri\default_comparator.h	/^namespace unise{$/;"	n
~DefaultComparator	ju-seatch\unise\retri\default_comparator.h	/^    virtual ~DefaultComparator() {}$/;"	f	class:unise::DefaultComparator
~SearchResultComparator	ju-seatch\unise\retri\default_comparator.h	/^    ~SearchResultComparator() {}$/;"	f	class:unise::SearchResultComparator
add_info	ju-seatch\unise\retri\demo_cluster.cc	/^void DemoCluster::add_info(MatchedDoc* result)$/;"	f	class:unise::DemoCluster
cluster_result	ju-seatch\unise\retri\demo_cluster.cc	/^cluster_status_t DemoCluster::cluster_result(MatchedDoc* result,$/;"	f	class:unise::DemoCluster
init_for_search	ju-seatch\unise\retri\demo_cluster.cc	/^void DemoCluster::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::DemoCluster
need_cluster	ju-seatch\unise\retri\demo_cluster.cc	/^bool DemoCluster::need_cluster(MatchedDoc* result) const$/;"	f	class:unise::DemoCluster
remove_info	ju-seatch\unise\retri\demo_cluster.cc	/^void DemoCluster::remove_info(MatchedDoc* result)$/;"	f	class:unise::DemoCluster
unise	ju-seatch\unise\retri\demo_cluster.cc	/^namespace unise$/;"	n	file:
DemoCluster	ju-seatch\unise\retri\demo_cluster.h	/^class DemoCluster : public ResultCluster$/;"	c	namespace:unise
MyClusterInternal	ju-seatch\unise\retri\demo_cluster.h	/^    typedef ClusterTemplate<dynamic_score_t, MatchedDoc*, 4> MyClusterInternal;$/;"	t	class:unise::DemoCluster
RETRI_DEMO_CLUSTER_H_	ju-seatch\unise\retri\demo_cluster.h	4;"	d
cluster_	ju-seatch\unise\retri\demo_cluster.h	/^    MyClusterInternal cluster_;$/;"	m	class:unise::DemoCluster
get_name	ju-seatch\unise\retri\demo_cluster.h	/^    std::string get_name() const { return "DemoCluster"; }$/;"	f	class:unise::DemoCluster
init	ju-seatch\unise\retri\demo_cluster.h	/^    bool init(const comcfg::ConfigUnit& conf) { return true; }$/;"	f	class:unise::DemoCluster
unise	ju-seatch\unise\retri\demo_cluster.h	/^namespace unise$/;"	n
DocMatchInfoProxy	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^DocMatchInfoProxy::DocMatchInfoProxy(const RepositoryManager & rm)$/;"	f	class:unise::DocMatchInfoProxy
build_doc_match_info	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^bool DocMatchInfoProxy::build_doc_match_info(const ForwardIndex * forward_index)$/;"	f	class:unise::DocMatchInfoProxy
finalize_result	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^void DocMatchInfoProxy::finalize_result(SearchResult * search_result)$/;"	f	class:unise::DocMatchInfoProxy
init_for_search	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^void DocMatchInfoProxy::init_for_search($/;"	f	class:unise::DocMatchInfoProxy
reset	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^void DocMatchInfoProxy::reset()$/;"	f	class:unise::DocMatchInfoProxy
reset_for_scoring	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^void DocMatchInfoProxy::reset_for_scoring()$/;"	f	class:unise::DocMatchInfoProxy
unise	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^namespace unise$/;"	n	file:
~DocMatchInfoProxy	ju-seatch\unise\retri\doc_match_info_proxy.cc	/^DocMatchInfoProxy::~DocMatchInfoProxy()$/;"	f	class:unise::DocMatchInfoProxy
DocMatchInfoProxy	ju-seatch\unise\retri\doc_match_info_proxy.h	/^class DocMatchInfoProxy$/;"	c	namespace:unise
RETRI_DOC_MATCH_INFO_PROXY_H_	ju-seatch\unise\retri\doc_match_info_proxy.h	4;"	d
_dochit_tokenids	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    std::stack<TokenId>     _dochit_tokenids;   \/\/\/< 一个DOC里命中的TOKENID列表$/;"	m	class:unise::DocMatchInfoProxy
_hit_pool	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    boost::scoped_ptr<MasfObjPool<doc_token_hit_t> > _hit_pool;$/;"	m	class:unise::DocMatchInfoProxy
_hits_list_pool	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    boost::scoped_ptr<MasfObjPool<std::vector<doc_token_hit_t*> > > _hits_list_pool;$/;"	m	class:unise::DocMatchInfoProxy
_matched_node_pool	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    boost::scoped_ptr<MasfObjPool<MatchedNode> > _matched_node_pool;$/;"	m	class:unise::DocMatchInfoProxy
_matched_nodes	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    std::vector<MatchedNode*>   _matched_nodes; \/\/\/< 命中的节点指针$/;"	m	class:unise::DocMatchInfoProxy
_repository_manager	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    const RepositoryManager & _repository_manager;$/;"	m	class:unise::DocMatchInfoProxy
_request	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    const GeneralSearchRequest * _request;$/;"	m	class:unise::DocMatchInfoProxy
_response	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    GeneralSearchResponse * _response;$/;"	m	class:unise::DocMatchInfoProxy
_root_it	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    const ForwardIterator * _root_it;$/;"	m	class:unise::DocMatchInfoProxy
get_matched_nodes	ju-seatch\unise\retri\doc_match_info_proxy.h	/^    const std::vector<MatchedNode*>& get_matched_nodes() const {$/;"	f	class:unise::DocMatchInfoProxy
unise	ju-seatch\unise\retri\doc_match_info_proxy.h	/^namespace unise$/;"	n
EmptyIterator	ju-seatch\unise\retri\empty_iterator.cc	/^EmptyIterator::EmptyIterator()$/;"	f	class:unise::EmptyIterator
unise	ju-seatch\unise\retri\empty_iterator.cc	/^namespace unise$/;"	n	file:
EmptyIterator	ju-seatch\unise\retri\empty_iterator.h	/^class EmptyIterator : public ForwardIterator$/;"	c	namespace:unise
RETRI_EMPTY_ITERATOR_H_	ju-seatch\unise\retri\empty_iterator.h	4;"	d
_illegal_doc_hit	ju-seatch\unise\retri\empty_iterator.h	/^    doc_hit_t _illegal_doc_hit;$/;"	m	class:unise::EmptyIterator
done	ju-seatch\unise\retri\empty_iterator.h	/^    virtual bool done() const {$/;"	f	class:unise::EmptyIterator
get_cur_doc_hit	ju-seatch\unise\retri\empty_iterator.h	/^    virtual const doc_hit_t & get_cur_doc_hit() const {$/;"	f	class:unise::EmptyIterator
get_estimated_num	ju-seatch\unise\retri\empty_iterator.h	/^    virtual uint64_t get_estimated_num() const {$/;"	f	class:unise::EmptyIterator
get_progress	ju-seatch\unise\retri\empty_iterator.h	/^    virtual float get_progress() const {$/;"	f	class:unise::EmptyIterator
jump_to	ju-seatch\unise\retri\empty_iterator.h	/^    virtual void jump_to(DocId docid, int32_t score)$/;"	f	class:unise::EmptyIterator
next	ju-seatch\unise\retri\empty_iterator.h	/^    virtual void next() {}$/;"	f	class:unise::EmptyIterator
unise	ju-seatch\unise\retri\empty_iterator.h	/^namespace unise$/;"	n
~EmptyIterator	ju-seatch\unise\retri\empty_iterator.h	/^    virtual ~EmptyIterator() {}$/;"	f	class:unise::EmptyIterator
ForwardIterator	ju-seatch\unise\retri\forward_iterator.h	/^    ForwardIterator() : _last_post_check_docid(ILLEGAL_DOCID) {}$/;"	f	class:unise::ForwardIterator
ForwardIterator	ju-seatch\unise\retri\forward_iterator.h	/^class ForwardIterator {$/;"	c	namespace:unise
RETRI_FORWARD_ITERATOR_H_	ju-seatch\unise\retri\forward_iterator.h	4;"	d
_last_post_check_docid	ju-seatch\unise\retri\forward_iterator.h	/^    DocId _last_post_check_docid;    \/\/\/< 上一次申请检查的docid$/;"	m	class:unise::ForwardIterator
_last_post_check_status	ju-seatch\unise\retri\forward_iterator.h	/^    bool _last_post_check_status;    \/\/\/< 上一次申请检查的结果$/;"	m	class:unise::ForwardIterator
get_hit_list	ju-seatch\unise\retri\forward_iterator.h	/^    virtual void get_hit_list(std::stack<TokenId> * hits) const {$/;"	f	class:unise::ForwardIterator
post_retrieval_check	ju-seatch\unise\retri\forward_iterator.h	/^    bool post_retrieval_check() {$/;"	f	class:unise::ForwardIterator
post_retrieval_check_internal	ju-seatch\unise\retri\forward_iterator.h	/^    virtual bool post_retrieval_check_internal() { return true; }$/;"	f	class:unise::ForwardIterator
unise	ju-seatch\unise\retri\forward_iterator.h	/^namespace unise {$/;"	n
~ForwardIterator	ju-seatch\unise\retri\forward_iterator.h	/^    virtual ~ForwardIterator() {}$/;"	f	class:unise::ForwardIterator
add_info	ju-seatch\unise\retri\general_cluster.cc	/^void GeneralCluster::add_info(MatchedDoc* result)$/;"	f	class:unise::GeneralCluster
cluster_result	ju-seatch\unise\retri\general_cluster.cc	/^cluster_status_t GeneralCluster::cluster_result(MatchedDoc* result,$/;"	f	class:unise::GeneralCluster
init	ju-seatch\unise\retri\general_cluster.cc	/^bool GeneralCluster::init(const comcfg::ConfigUnit & conf)$/;"	f	class:unise::GeneralCluster
init_for_search	ju-seatch\unise\retri\general_cluster.cc	/^void GeneralCluster::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::GeneralCluster
need_cluster	ju-seatch\unise\retri\general_cluster.cc	/^bool GeneralCluster::need_cluster(MatchedDoc* result) const$/;"	f	class:unise::GeneralCluster
remove_info	ju-seatch\unise\retri\general_cluster.cc	/^void GeneralCluster::remove_info(MatchedDoc* result)$/;"	f	class:unise::GeneralCluster
unise	ju-seatch\unise\retri\general_cluster.cc	/^namespace unise$/;"	n	file:
~GeneralCluster	ju-seatch\unise\retri\general_cluster.cc	/^GeneralCluster::~GeneralCluster() {}$/;"	f	class:unise::GeneralCluster
GeneralCluster	ju-seatch\unise\retri\general_cluster.h	/^class GeneralCluster : public ResultCluster$/;"	c	namespace:unise
MyClusterInternal	ju-seatch\unise\retri\general_cluster.h	/^    typedef ClusterTemplate<std::string, MatchedDoc*, 4> MyClusterInternal;$/;"	t	class:unise::GeneralCluster
RETRI_GENERAL_CLUSTER_H	ju-seatch\unise\retri\general_cluster.h	4;"	d
_cluster	ju-seatch\unise\retri\general_cluster.h	/^    MyClusterInternal _cluster;$/;"	m	class:unise::GeneralCluster
_cluster_item	ju-seatch\unise\retri\general_cluster.h	/^    AnnotationClusterItem _cluster_item;$/;"	m	class:unise::GeneralCluster
_need_cluster	ju-seatch\unise\retri\general_cluster.h	/^    bool _need_cluster;$/;"	m	class:unise::GeneralCluster
get_name	ju-seatch\unise\retri\general_cluster.h	/^    virtual std::string get_name() const { return "GeneralCluster"; }$/;"	f	class:unise::GeneralCluster
unise	ju-seatch\unise\retri\general_cluster.h	/^namespace unise$/;"	n
GeneralResultFiller	ju-seatch\unise\retri\general_result_filler.cc	/^GeneralResultFiller::GeneralResultFiller()$/;"	f	class:unise::GeneralResultFiller
fill_search_result	ju-seatch\unise\retri\general_result_filler.cc	/^void GeneralResultFiller::fill_search_result(MatchedDoc * doc,$/;"	f	class:unise::GeneralResultFiller
init	ju-seatch\unise\retri\general_result_filler.cc	/^bool GeneralResultFiller::init(const comcfg::ConfigUnit & conf)$/;"	f	class:unise::GeneralResultFiller
unise	ju-seatch\unise\retri\general_result_filler.cc	/^namespace unise$/;"	n	file:
DefaultResultFiller	ju-seatch\unise\retri\general_result_filler.h	/^    DefaultResultFiller() {}$/;"	f	class:unise::DefaultResultFiller
DefaultResultFiller	ju-seatch\unise\retri\general_result_filler.h	/^class DefaultResultFiller : public ResultFiller$/;"	c	namespace:unise
GeneralResultFiller	ju-seatch\unise\retri\general_result_filler.h	/^class GeneralResultFiller : public ResultFiller$/;"	c	namespace:unise
RETRI_GENERAL_RESULT_FILLER_H_	ju-seatch\unise\retri\general_result_filler.h	4;"	d
_filler_config	ju-seatch\unise\retri\general_result_filler.h	/^    GeneralFillerConfig _filler_config;$/;"	m	class:unise::GeneralResultFiller
_filler_items	ju-seatch\unise\retri\general_result_filler.h	/^    std::vector<const AnnotationFillerItem *> _filler_items;$/;"	m	class:unise::GeneralResultFiller
fill_search_result	ju-seatch\unise\retri\general_result_filler.h	/^    virtual void fill_search_result(MatchedDoc * doc,$/;"	f	class:unise::DefaultResultFiller
get_name	ju-seatch\unise\retri\general_result_filler.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::DefaultResultFiller
get_name	ju-seatch\unise\retri\general_result_filler.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::GeneralResultFiller
init	ju-seatch\unise\retri\general_result_filler.h	/^    virtual bool init(const comcfg::ConfigUnit & conf) { return true; }$/;"	f	class:unise::DefaultResultFiller
init_for_search	ju-seatch\unise\retri\general_result_filler.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::DefaultResultFiller
init_for_search	ju-seatch\unise\retri\general_result_filler.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::GeneralResultFiller
unise	ju-seatch\unise\retri\general_result_filler.h	/^namespace unise$/;"	n
~DefaultResultFiller	ju-seatch\unise\retri\general_result_filler.h	/^    virtual ~DefaultResultFiller() {}$/;"	f	class:unise::DefaultResultFiller
~GeneralResultFiller	ju-seatch\unise\retri\general_result_filler.h	/^    virtual ~GeneralResultFiller() {}$/;"	f	class:unise::GeneralResultFiller
GeneralScorer	ju-seatch\unise\retri\general_scorer.cc	/^GeneralScorer::GeneralScorer() {$/;"	f	class:unise::GeneralScorer
build_token_info_hashmap	ju-seatch\unise\retri\general_scorer.cc	/^void GeneralScorer::build_token_info_hashmap(const QueryNode * root) {$/;"	f	class:unise::GeneralScorer
init	ju-seatch\unise\retri\general_scorer.cc	/^bool GeneralScorer::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::GeneralScorer
init_for_search	ju-seatch\unise\retri\general_scorer.cc	/^void GeneralScorer::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::GeneralScorer
score	ju-seatch\unise\retri\general_scorer.cc	/^bool GeneralScorer::score(MatchedDoc * doc, dynamic_score_t * score) {$/;"	f	class:unise::GeneralScorer
unise	ju-seatch\unise\retri\general_scorer.cc	/^namespace unise {$/;"	n	file:
DefaultScorer	ju-seatch\unise\retri\general_scorer.h	/^    DefaultScorer() {}$/;"	f	class:unise::DefaultScorer
DefaultScorer	ju-seatch\unise\retri\general_scorer.h	/^class DefaultScorer : public Scorer {$/;"	c	namespace:unise
GeneralScorer	ju-seatch\unise\retri\general_scorer.h	/^class GeneralScorer : public Scorer {$/;"	c	namespace:unise
QueryNodeMap	ju-seatch\unise\retri\general_scorer.h	/^    typedef __gnu_cxx::hash_map<TokenId, const QueryNodeValue *> QueryNodeMap;$/;"	t	class:unise::GeneralScorer
RETRI_GENERAL_SCORER_H_	ju-seatch\unise\retri\general_scorer.h	4;"	d
anno_scorer_items_	ju-seatch\unise\retri\general_scorer.h	/^    std::vector<const AnnotationScorerItem *> anno_scorer_items_;$/;"	m	class:unise::GeneralScorer
get_name	ju-seatch\unise\retri\general_scorer.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::DefaultScorer
get_name	ju-seatch\unise\retri\general_scorer.h	/^    virtual std::string get_name() const {$/;"	f	class:unise::GeneralScorer
init	ju-seatch\unise\retri\general_scorer.h	/^    virtual bool init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::DefaultScorer
init_for_search	ju-seatch\unise\retri\general_scorer.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::DefaultScorer
query_builder_	ju-seatch\unise\retri\general_scorer.h	/^    BackendQueryBuilder query_builder_;$/;"	m	class:unise::GeneralScorer
query_node_	ju-seatch\unise\retri\general_scorer.h	/^    QueryNode query_node_;$/;"	m	class:unise::GeneralScorer
query_node_map_	ju-seatch\unise\retri\general_scorer.h	/^    QueryNodeMap query_node_map_;$/;"	m	class:unise::GeneralScorer
score	ju-seatch\unise\retri\general_scorer.h	/^    virtual bool score(MatchedDoc * doc, dynamic_score_t * score) {$/;"	f	class:unise::DefaultScorer
scorer_config_	ju-seatch\unise\retri\general_scorer.h	/^    GeneralScorerConfig scorer_config_;$/;"	m	class:unise::GeneralScorer
unise	ju-seatch\unise\retri\general_scorer.h	/^namespace unise {$/;"	n
~DefaultScorer	ju-seatch\unise\retri\general_scorer.h	/^    virtual ~DefaultScorer() {}$/;"	f	class:unise::DefaultScorer
~GeneralScorer	ju-seatch\unise\retri\general_scorer.h	/^    virtual ~GeneralScorer() {}$/;"	f	class:unise::GeneralScorer
LeafIterator	ju-seatch\unise\retri\leaf_iterator.cc	/^LeafIterator::LeafIterator(const DocHitList & list)$/;"	f	class:unise::LeafIterator
done	ju-seatch\unise\retri\leaf_iterator.cc	/^bool LeafIterator::done() const$/;"	f	class:unise::LeafIterator
get_cur_doc_hit	ju-seatch\unise\retri\leaf_iterator.cc	/^const doc_hit_t & LeafIterator::get_cur_doc_hit() const$/;"	f	class:unise::LeafIterator
get_estimated_num	ju-seatch\unise\retri\leaf_iterator.cc	/^uint64_t LeafIterator::get_estimated_num() const {$/;"	f	class:unise::LeafIterator
get_hit_list	ju-seatch\unise\retri\leaf_iterator.cc	/^void LeafIterator::get_hit_list(std::stack<TokenId> * hits) const$/;"	f	class:unise::LeafIterator
get_progress	ju-seatch\unise\retri\leaf_iterator.cc	/^float LeafIterator::get_progress() const {$/;"	f	class:unise::LeafIterator
jump_to	ju-seatch\unise\retri\leaf_iterator.cc	/^void LeafIterator::jump_to(DocId docid, int32_t score)$/;"	f	class:unise::LeafIterator
next	ju-seatch\unise\retri\leaf_iterator.cc	/^void LeafIterator::next()$/;"	f	class:unise::LeafIterator
unise	ju-seatch\unise\retri\leaf_iterator.cc	/^namespace unise$/;"	n	file:
~LeafIterator	ju-seatch\unise\retri\leaf_iterator.cc	/^LeafIterator::~LeafIterator()$/;"	f	class:unise::LeafIterator
LeafIterator	ju-seatch\unise\retri\leaf_iterator.h	/^class LeafIterator : public ForwardIterator$/;"	c	namespace:unise
RETRI_LEAF_ITERATOR_H_	ju-seatch\unise\retri\leaf_iterator.h	4;"	d
_iterator	ju-seatch\unise\retri\leaf_iterator.h	/^    DocHitListIterator * _iterator;$/;"	m	class:unise::LeafIterator
_list	ju-seatch\unise\retri\leaf_iterator.h	/^    const DocHitList & _list;$/;"	m	class:unise::LeafIterator
unise	ju-seatch\unise\retri\leaf_iterator.h	/^namespace unise$/;"	n
MatchedDocInternal	ju-seatch\unise\retri\matched_doc_internal.cc	/^MatchedDocInternal::MatchedDocInternal($/;"	f	class:unise::MatchedDocInternal
build_doc_match_info	ju-seatch\unise\retri\matched_doc_internal.cc	/^bool MatchedDocInternal::build_doc_match_info()$/;"	f	class:unise::MatchedDocInternal
finalize_result	ju-seatch\unise\retri\matched_doc_internal.cc	/^void MatchedDocInternal::finalize_result()$/;"	f	class:unise::MatchedDocInternal
get_doc_info	ju-seatch\unise\retri\matched_doc_internal.cc	/^const doc_info_t& MatchedDocInternal::get_doc_info() const$/;"	f	class:unise::MatchedDocInternal
get_fact_doc	ju-seatch\unise\retri\matched_doc_internal.cc	/^const FactDoc& MatchedDocInternal::get_fact_doc() const$/;"	f	class:unise::MatchedDocInternal
get_matched_nodes	ju-seatch\unise\retri\matched_doc_internal.cc	/^const std::vector<MatchedNode*>& MatchedDocInternal::get_matched_nodes() const$/;"	f	class:unise::MatchedDocInternal
unise	ju-seatch\unise\retri\matched_doc_internal.cc	/^namespace unise$/;"	n	file:
MatchedDocInternal	ju-seatch\unise\retri\matched_doc_internal.h	/^class MatchedDocInternal : public MatchedDoc$/;"	c	namespace:unise
RETRI_MATCHED_DOC_INTERNAL_H_	ju-seatch\unise\retri\matched_doc_internal.h	4;"	d
_doc_info	ju-seatch\unise\retri\matched_doc_internal.h	/^    doc_info_t _doc_info;$/;"	m	class:unise::MatchedDocInternal
_doc_match_info_proxy	ju-seatch\unise\retri\matched_doc_internal.h	/^    DocMatchInfoProxy * _doc_match_info_proxy;$/;"	m	class:unise::MatchedDocInternal
_docid	ju-seatch\unise\retri\matched_doc_internal.h	/^    DocId _docid;$/;"	m	class:unise::MatchedDocInternal
_score	ju-seatch\unise\retri\matched_doc_internal.h	/^    dynamic_score_t _score;$/;"	m	class:unise::MatchedDocInternal
_search_result	ju-seatch\unise\retri\matched_doc_internal.h	/^    boost::scoped_ptr<SearchResult> _search_result;$/;"	m	class:unise::MatchedDocInternal
get_doc_id	ju-seatch\unise\retri\matched_doc_internal.h	/^    virtual DocId get_doc_id() const { return _docid; }$/;"	f	class:unise::MatchedDocInternal
get_score	ju-seatch\unise\retri\matched_doc_internal.h	/^    virtual dynamic_score_t get_score() const { return _score; }$/;"	f	class:unise::MatchedDocInternal
get_search_result	ju-seatch\unise\retri\matched_doc_internal.h	/^    virtual SearchResult * get_search_result() { return _search_result.get(); }$/;"	f	class:unise::MatchedDocInternal
get_search_result	ju-seatch\unise\retri\matched_doc_internal.h	/^    virtual const SearchResult * get_search_result() const { return _search_result.get(); }$/;"	f	class:unise::MatchedDocInternal
set_score	ju-seatch\unise\retri\matched_doc_internal.h	/^    inline void set_score(dynamic_score_t score)$/;"	f	class:unise::MatchedDocInternal
unise	ju-seatch\unise\retri\matched_doc_internal.h	/^namespace unise$/;"	n
~MatchedDocInternal	ju-seatch\unise\retri\matched_doc_internal.h	/^    virtual ~MatchedDocInternal() {}$/;"	f	class:unise::MatchedDocInternal
MatchedNode	ju-seatch\unise\retri\matched_node.cc	/^MatchedNode::MatchedNode(TokenId token_id, vector<doc_token_hit_t*>* hits)$/;"	f	class:unise::MatchedNode
to_string	ju-seatch\unise\retri\matched_node.cc	/^void MatchedNode::to_string(std::string* output) const$/;"	f	class:unise::MatchedNode
unise	ju-seatch\unise\retri\matched_node.cc	/^namespace unise$/;"	n	file:
NotIterator	ju-seatch\unise\retri\not_iterator.cc	/^NotIterator::NotIterator(const RepositoryManager & repos,$/;"	f	class:unise::NotIterator
done	ju-seatch\unise\retri\not_iterator.cc	/^bool NotIterator::done() const$/;"	f	class:unise::NotIterator
get_cur_doc_hit	ju-seatch\unise\retri\not_iterator.cc	/^const doc_hit_t & NotIterator::get_cur_doc_hit() const$/;"	f	class:unise::NotIterator
get_estimated_num	ju-seatch\unise\retri\not_iterator.cc	/^uint64_t NotIterator::get_estimated_num() const {$/;"	f	class:unise::NotIterator
get_match	ju-seatch\unise\retri\not_iterator.cc	/^void NotIterator::get_match()$/;"	f	class:unise::NotIterator
get_progress	ju-seatch\unise\retri\not_iterator.cc	/^float NotIterator::get_progress() const {$/;"	f	class:unise::NotIterator
jump_to	ju-seatch\unise\retri\not_iterator.cc	/^void NotIterator::jump_to(DocId docid, int32_t score)$/;"	f	class:unise::NotIterator
next	ju-seatch\unise\retri\not_iterator.cc	/^void NotIterator::next()$/;"	f	class:unise::NotIterator
unise	ju-seatch\unise\retri\not_iterator.cc	/^namespace unise$/;"	n	file:
NotIterator	ju-seatch\unise\retri\not_iterator.h	/^class NotIterator : public ForwardIterator {$/;"	c	namespace:unise
RETRI_NOT_ITERATOR_H_	ju-seatch\unise\retri\not_iterator.h	4;"	d
_cur_doc_hit	ju-seatch\unise\retri\not_iterator.h	/^    doc_hit_t _cur_doc_hit;$/;"	m	class:unise::NotIterator
_forward_it	ju-seatch\unise\retri\not_iterator.h	/^    ForwardIterator * _forward_it;$/;"	m	class:unise::NotIterator
_repository_manager	ju-seatch\unise\retri\not_iterator.h	/^    const RepositoryManager & _repository_manager;$/;"	m	class:unise::NotIterator
unise	ju-seatch\unise\retri\not_iterator.h	/^namespace unise {$/;"	n
~NotIterator	ju-seatch\unise\retri\not_iterator.h	/^    virtual ~NotIterator() {}$/;"	f	class:unise::NotIterator
OrIterator	ju-seatch\unise\retri\or_iterator.cc	/^OrIterator::OrIterator(const vector<ForwardIterator *> & it_list) :$/;"	f	class:unise::OrIterator
done	ju-seatch\unise\retri\or_iterator.cc	/^bool OrIterator::done() const {$/;"	f	class:unise::OrIterator
get_cur_doc_hit	ju-seatch\unise\retri\or_iterator.cc	/^const doc_hit_t & OrIterator::get_cur_doc_hit() const {$/;"	f	class:unise::OrIterator
get_estimated_num	ju-seatch\unise\retri\or_iterator.cc	/^uint64_t OrIterator::get_estimated_num() const {$/;"	f	class:unise::OrIterator
get_hit_list	ju-seatch\unise\retri\or_iterator.cc	/^void OrIterator::get_hit_list(std::stack<TokenId> * hits) const {$/;"	f	class:unise::OrIterator
get_match	ju-seatch\unise\retri\or_iterator.cc	/^void OrIterator::get_match() {$/;"	f	class:unise::OrIterator
get_progress	ju-seatch\unise\retri\or_iterator.cc	/^float OrIterator::get_progress() const {$/;"	f	class:unise::OrIterator
jump_to	ju-seatch\unise\retri\or_iterator.cc	/^void OrIterator::jump_to(DocId docid, int32_t score) {$/;"	f	class:unise::OrIterator
next	ju-seatch\unise\retri\or_iterator.cc	/^void OrIterator::next() {$/;"	f	class:unise::OrIterator
post_retrieval_check_internal	ju-seatch\unise\retri\or_iterator.cc	/^bool OrIterator::post_retrieval_check_internal() {$/;"	f	class:unise::OrIterator
unise	ju-seatch\unise\retri\or_iterator.cc	/^namespace unise {$/;"	n	file:
ForwardItComp	ju-seatch\unise\retri\or_iterator.h	/^struct ForwardItComp {$/;"	s	namespace:unise
OrIterator	ju-seatch\unise\retri\or_iterator.h	/^class OrIterator : public ForwardIterator {$/;"	c	namespace:unise
RETRI_OR_ITERATOR_H_	ju-seatch\unise\retri\or_iterator.h	4;"	d
_cur_doc_hit	ju-seatch\unise\retri\or_iterator.h	/^    doc_hit_t _cur_doc_hit;$/;"	m	class:unise::OrIterator
_heap	ju-seatch\unise\retri\or_iterator.h	/^                         ForwardItComp > _heap;$/;"	m	class:unise::OrIterator
_it_list	ju-seatch\unise\retri\or_iterator.h	/^    std::vector<ForwardIterator *> _it_list;$/;"	m	class:unise::OrIterator
operator ()	ju-seatch\unise\retri\or_iterator.h	/^    bool operator()(const std::pair<size_t, doc_hit_t>& a,$/;"	f	struct:unise::ForwardItComp
unise	ju-seatch\unise\retri\or_iterator.h	/^namespace unise {$/;"	n
~OrIterator	ju-seatch\unise\retri\or_iterator.h	/^    virtual ~OrIterator() {}$/;"	f	class:unise::OrIterator
ResultClusterHandler	ju-seatch\unise\retri\result_cluster_handler.cc	/^ResultClusterHandler::ResultClusterHandler(const RepositoryManager& rm)$/;"	f	class:unise::ResultClusterHandler
add_cluster_info	ju-seatch\unise\retri\result_cluster_handler.cc	/^void ResultClusterHandler::add_cluster_info(MatchedDoc* result)$/;"	f	class:unise::ResultClusterHandler
cluster	ju-seatch\unise\retri\result_cluster_handler.cc	/^cluster_status_t ResultClusterHandler::cluster(MatchedDoc* result,$/;"	f	class:unise::ResultClusterHandler
enable_result_handler_counter	ju-seatch\unise\retri\result_cluster_handler.cc	/^DECLARE_bool(enable_result_handler_counter);$/;"	v
end_for_search	ju-seatch\unise\retri\result_cluster_handler.cc	/^void ResultClusterHandler::end_for_search(GeneralSearchResponse * response)$/;"	f	class:unise::ResultClusterHandler
fill_result_cluster_info	ju-seatch\unise\retri\result_cluster_handler.cc	/^void ResultClusterHandler::fill_result_cluster_info(MatchedDoc* doc,$/;"	f	class:unise::ResultClusterHandler
init	ju-seatch\unise\retri\result_cluster_handler.cc	/^bool ResultClusterHandler::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::ResultClusterHandler
init_for_search	ju-seatch\unise\retri\result_cluster_handler.cc	/^void ResultClusterHandler::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::ResultClusterHandler
remove_cluster_info	ju-seatch\unise\retri\result_cluster_handler.cc	/^void ResultClusterHandler::remove_cluster_info(MatchedDoc* result)$/;"	f	class:unise::ResultClusterHandler
unise	ju-seatch\unise\retri\result_cluster_handler.cc	/^namespace unise$/;"	n	file:
~ResultClusterHandler	ju-seatch\unise\retri\result_cluster_handler.cc	/^ResultClusterHandler::~ResultClusterHandler()$/;"	f	class:unise::ResultClusterHandler
RETRI_RESULT_CLUSTER_HANDLER_H_	ju-seatch\unise\retri\result_cluster_handler.h	4;"	d
ResultClusterHandler	ju-seatch\unise\retri\result_cluster_handler.h	/^class ResultClusterHandler$/;"	c	namespace:unise
UniseClustersMap	ju-seatch\unise\retri\result_cluster_handler.h	/^    typedef std::map<uint64_t, std::vector<ResultCluster*> > UniseClustersMap;$/;"	t	class:unise::ResultClusterHandler
_cluster_counters	ju-seatch\unise\retri\result_cluster_handler.h	/^    std::vector<uint32_t> _cluster_counters;$/;"	m	class:unise::ResultClusterHandler
_clusters_map	ju-seatch\unise\retri\result_cluster_handler.h	/^    UniseClustersMap _clusters_map;$/;"	m	class:unise::ResultClusterHandler
_cur_clusters	ju-seatch\unise\retri\result_cluster_handler.h	/^    std::vector<ResultCluster*> * _cur_clusters;$/;"	m	class:unise::ResultClusterHandler
_repository_manager	ju-seatch\unise\retri\result_cluster_handler.h	/^    const RepositoryManager& _repository_manager;$/;"	m	class:unise::ResultClusterHandler
comcfg	ju-seatch\unise\retri\result_cluster_handler.h	/^namespace comcfg$/;"	n
unise	ju-seatch\unise\retri\result_cluster_handler.h	/^namespace unise$/;"	n
ResultFilterHandler	ju-seatch\unise\retri\result_filter_handler.cc	/^ResultFilterHandler::ResultFilterHandler(const RepositoryManager& rm)$/;"	f	class:unise::ResultFilterHandler
destroy_filters_map	ju-seatch\unise\retri\result_filter_handler.cc	/^void ResultFilterHandler::destroy_filters_map(UniseFiltersMap * filters_map)$/;"	f	class:unise::ResultFilterHandler
early_filter	ju-seatch\unise\retri\result_filter_handler.cc	/^bool ResultFilterHandler::early_filter(MatchedDoc* result,$/;"	f	class:unise::ResultFilterHandler
end_for_search	ju-seatch\unise\retri\result_filter_handler.cc	/^void ResultFilterHandler::end_for_search(GeneralSearchResponse * response)$/;"	f	class:unise::ResultFilterHandler
end_for_search_filters	ju-seatch\unise\retri\result_filter_handler.cc	/^void ResultFilterHandler::end_for_search_filters(std::vector<ResultFilter*> * filters,$/;"	f	class:unise::ResultFilterHandler
final_filter	ju-seatch\unise\retri\result_filter_handler.cc	/^bool ResultFilterHandler::final_filter(MatchedDoc* result,$/;"	f	class:unise::ResultFilterHandler
init	ju-seatch\unise\retri\result_filter_handler.cc	/^bool ResultFilterHandler::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::ResultFilterHandler
init_for_search	ju-seatch\unise\retri\result_filter_handler.cc	/^bool ResultFilterHandler::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::ResultFilterHandler
init_handler	ju-seatch\unise\retri\result_filter_handler.cc	/^bool ResultFilterHandler::init_handler(const comcfg::ConfigUnit& conf,$/;"	f	class:unise::ResultFilterHandler
later_filter	ju-seatch\unise\retri\result_filter_handler.cc	/^bool ResultFilterHandler::later_filter(MatchedDoc* result,$/;"	f	class:unise::ResultFilterHandler
unise	ju-seatch\unise\retri\result_filter_handler.cc	/^namespace unise$/;"	n	file:
~ResultFilterHandler	ju-seatch\unise\retri\result_filter_handler.cc	/^ResultFilterHandler::~ResultFilterHandler()$/;"	f	class:unise::ResultFilterHandler
RETRI_RESULT_FILTER_HANDLER_H_	ju-seatch\unise\retri\result_filter_handler.h	4;"	d
ResultFilterHandler	ju-seatch\unise\retri\result_filter_handler.h	/^class ResultFilterHandler$/;"	c	namespace:unise
UniseFiltersMap	ju-seatch\unise\retri\result_filter_handler.h	/^    typedef std::map<uint64_t, std::vector<ResultFilter*> > UniseFiltersMap;$/;"	t	class:unise::ResultFilterHandler
_cur_early_filters	ju-seatch\unise\retri\result_filter_handler.h	/^    std::vector<ResultFilter*> * _cur_early_filters;$/;"	m	class:unise::ResultFilterHandler
_cur_final_filters	ju-seatch\unise\retri\result_filter_handler.h	/^    std::vector<ResultFilter*> * _cur_final_filters;$/;"	m	class:unise::ResultFilterHandler
_cur_later_filters	ju-seatch\unise\retri\result_filter_handler.h	/^    std::vector<ResultFilter*> * _cur_later_filters;$/;"	m	class:unise::ResultFilterHandler
_early_filter_counters	ju-seatch\unise\retri\result_filter_handler.h	/^    std::vector<uint32_t> _early_filter_counters;$/;"	m	class:unise::ResultFilterHandler
_early_filters_map	ju-seatch\unise\retri\result_filter_handler.h	/^    UniseFiltersMap _early_filters_map;$/;"	m	class:unise::ResultFilterHandler
_final_filter_counters	ju-seatch\unise\retri\result_filter_handler.h	/^    std::vector<uint32_t> _final_filter_counters;$/;"	m	class:unise::ResultFilterHandler
_final_filters_map	ju-seatch\unise\retri\result_filter_handler.h	/^    UniseFiltersMap _final_filters_map;$/;"	m	class:unise::ResultFilterHandler
_later_filter_counters	ju-seatch\unise\retri\result_filter_handler.h	/^    std::vector<uint32_t> _later_filter_counters;$/;"	m	class:unise::ResultFilterHandler
_later_filters_map	ju-seatch\unise\retri\result_filter_handler.h	/^    UniseFiltersMap _later_filters_map;$/;"	m	class:unise::ResultFilterHandler
_repository_manager	ju-seatch\unise\retri\result_filter_handler.h	/^    const RepositoryManager& _repository_manager;$/;"	m	class:unise::ResultFilterHandler
comcfg	ju-seatch\unise\retri\result_filter_handler.h	/^namespace comcfg$/;"	n
unise	ju-seatch\unise\retri\result_filter_handler.h	/^namespace unise$/;"	n
ResultManager	ju-seatch\unise\retri\result_manager.cc	/^ResultManager::ResultManager($/;"	f	class:unise::ResultManager
add_candidate_result	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::add_candidate_result(MatchedDoc* result)$/;"	f	class:unise::ResultManager
early_filter	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::early_filter(MatchedDoc* result, result_status_t* result_status)$/;"	f	class:unise::ResultManager
final_filter	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::final_filter(MatchedDoc* result, result_status_t* result_status)$/;"	f	class:unise::ResultManager
finish	ju-seatch\unise\retri\result_manager.cc	/^void ResultManager::finish()$/;"	f	class:unise::ResultManager
init	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::ResultManager
init_comparator	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::init_comparator(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::ResultManager
init_for_search	ju-seatch\unise\retri\result_manager.cc	/^void ResultManager::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::ResultManager
init_result_filler	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::init_result_filler(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::ResultManager
later_filter	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::later_filter(MatchedDoc* result, result_status_t* result_status)$/;"	f	class:unise::ResultManager
maybe_add_candidate_result	ju-seatch\unise\retri\result_manager.cc	/^bool ResultManager::maybe_add_candidate_result(MatchedDoc* result, int* replace_num,$/;"	f	class:unise::ResultManager
remove_candidate_result	ju-seatch\unise\retri\result_manager.cc	/^void ResultManager::remove_candidate_result(MatchedDoc* result)$/;"	f	class:unise::ResultManager
retrieve_max_depth	ju-seatch\unise\retri\result_manager.cc	/^DECLARE_int32(retrieve_max_depth);$/;"	v
unise	ju-seatch\unise\retri\result_manager.cc	/^namespace unise$/;"	n	file:
~ResultManager	ju-seatch\unise\retri\result_manager.cc	/^ResultManager::~ResultManager()$/;"	f	class:unise::ResultManager
HeapHash	ju-seatch\unise\retri\result_manager.h	/^    typedef bsl::hashmap<uint64_t, hash_node_t*> HeapHash;$/;"	t	class:unise::ResultManager
RETRI_RESULT_MANAGER_H_	ju-seatch\unise\retri\result_manager.h	4;"	d
ResultManager	ju-seatch\unise\retri\result_manager.h	/^class ResultManager {$/;"	c	namespace:unise
UniseComparatorMap	ju-seatch\unise\retri\result_manager.h	/^    typedef std::map<uint64_t, boost::shared_ptr<Comparator> > UniseComparatorMap;$/;"	t	class:unise::ResultManager
UniseFillersMap	ju-seatch\unise\retri\result_manager.h	/^    typedef std::map<uint64_t, boost::shared_ptr<ResultFiller> > UniseFillersMap;$/;"	t	class:unise::ResultManager
_accepted_results_heap	ju-seatch\unise\retri\result_manager.h	/^    heap_node_t ** _accepted_results_heap;  \/\/\/< 小顶堆，最坏的元素在头部$/;"	m	class:unise::ResultManager
_clustered_results	ju-seatch\unise\retri\result_manager.h	/^    std::set<MatchedDoc*> _clustered_results;$/;"	m	class:unise::ResultManager
_comparators_map	ju-seatch\unise\retri\result_manager.h	/^    UniseComparatorMap _comparators_map;     \/\/\/< Comparator插件管理容器$/;"	m	class:unise::ResultManager
_cur_comparator	ju-seatch\unise\retri\result_manager.h	/^    Comparator * _cur_comparator;            \/\/\/< 当前search过程的comparator$/;"	m	class:unise::ResultManager
_cur_result_filler	ju-seatch\unise\retri\result_manager.h	/^    ResultFiller * _cur_result_filler;       \/\/\/< 当前search过程的result_filter$/;"	m	class:unise::ResultManager
_fillers_map	ju-seatch\unise\retri\result_manager.h	/^    UniseFillersMap _fillers_map;            \/\/\/< ResultFiller插件管理容器$/;"	m	class:unise::ResultManager
_hash_clear_count	ju-seatch\unise\retri\result_manager.h	/^    uint8_t _hash_clear_count;              \/\/\/< 用来定期清空hash$/;"	m	class:unise::ResultManager
_hash_nodes	ju-seatch\unise\retri\result_manager.h	/^    std::vector<hash_node_t> _hash_nodes;   \/\/\/< 为hash分配节点使用$/;"	m	class:unise::ResultManager
_hash_nodes_index	ju-seatch\unise\retri\result_manager.h	/^    size_t _hash_nodes_index;               \/\/\/< 游标$/;"	m	class:unise::ResultManager
_hash_stamp	ju-seatch\unise\retri\result_manager.h	/^    uint8_t _hash_stamp;                    \/\/\/< 用来区分不同的检索$/;"	m	class:unise::ResultManager
_heap_hash	ju-seatch\unise\retri\result_manager.h	/^    boost::scoped_ptr<HeapHash> _heap_hash; $/;"	m	class:unise::ResultManager
_heap_nodes	ju-seatch\unise\retri\result_manager.h	/^    std::vector<heap_node_t> _heap_nodes;   \/\/\/< 为heap分配节点使用$/;"	m	class:unise::ResultManager
_heap_nodes_index	ju-seatch\unise\retri\result_manager.h	/^    size_t _heap_nodes_index;               \/\/\/< 游标$/;"	m	class:unise::ResultManager
_heap_size	ju-seatch\unise\retri\result_manager.h	/^    size_t _heap_size;                      \/\/\/< 堆的当前大小$/;"	m	class:unise::ResultManager
_num_results_requested	ju-seatch\unise\retri\result_manager.h	/^    size_t _num_results_requested;$/;"	m	class:unise::ResultManager
_repository_manager	ju-seatch\unise\retri\result_manager.h	/^    const RepositoryManager & _repository_manager;$/;"	m	class:unise::ResultManager
_request	ju-seatch\unise\retri\result_manager.h	/^    const GeneralSearchRequest* _request;$/;"	m	class:unise::ResultManager
_response	ju-seatch\unise\retri\result_manager.h	/^    GeneralSearchResponse* _response;$/;"	m	class:unise::ResultManager
_result_cluster_handler	ju-seatch\unise\retri\result_manager.h	/^    boost::scoped_ptr<ResultClusterHandler> _result_cluster_handler;$/;"	m	class:unise::ResultManager
_result_filter_handler	ju-seatch\unise\retri\result_manager.h	/^    boost::scoped_ptr<ResultFilterHandler> _result_filter_handler;$/;"	m	class:unise::ResultManager
_result_manager_capacity	ju-seatch\unise\retri\result_manager.h	/^    size_t _result_manager_capacity;$/;"	m	class:unise::ResultManager
_result_pool	ju-seatch\unise\retri\result_manager.h	/^    MasfObjPool<MatchedDocInternal>* _result_pool;$/;"	m	class:unise::ResultManager
_scorer_handler	ju-seatch\unise\retri\result_manager.h	/^    boost::scoped_ptr<ScorerHandler> _scorer_handler;$/;"	m	class:unise::ResultManager
_search_context	ju-seatch\unise\retri\result_manager.h	/^    SearchContext * _search_context;$/;"	m	class:unise::ResultManager
comcfg	ju-seatch\unise\retri\result_manager.h	/^namespace comcfg$/;"	n
doc	ju-seatch\unise\retri\result_manager.h	/^    MatchedDoc * doc;         \/\/\/< 数据域$/;"	m	struct:unise::heap_node_t
down_adjust_heap	ju-seatch\unise\retri\result_manager.h	/^    inline void down_adjust_heap(size_t p) {$/;"	f	class:unise::ResultManager
hash_node	ju-seatch\unise\retri\result_manager.h	/^    hash_node_t * hash_node;  \/\/\/< 反向指针，目的减少一次hash$/;"	m	struct:unise::heap_node_t
hash_node_t	ju-seatch\unise\retri\result_manager.h	/^struct hash_node_t {$/;"	s	namespace:unise
heap_index	ju-seatch\unise\retri\result_manager.h	/^    size_t heap_index;     \/\/\/< 堆的下标，正向指针$/;"	m	struct:unise::hash_node_t
heap_node_t	ju-seatch\unise\retri\result_manager.h	/^struct heap_node_t {$/;"	s	namespace:unise
stamp	ju-seatch\unise\retri\result_manager.h	/^    uint8_t stamp;         \/\/\/< 循环使用，避免hash的clear操作$/;"	m	struct:unise::hash_node_t
unise	ju-seatch\unise\retri\result_manager.h	/^namespace unise$/;"	n
ResultRetrievor	ju-seatch\unise\retri\result_retrievor.cc	/^ResultRetrievor::ResultRetrievor(const RepositoryManager & repository_manager) :$/;"	f	class:unise::ResultRetrievor
construct_range_restriction	ju-seatch\unise\retri\result_retrievor.cc	/^ForwardIterator* ResultRetrievor::construct_range_restriction($/;"	f	class:unise::ResultRetrievor
construct_retrieve_tree	ju-seatch\unise\retri\result_retrievor.cc	/^ForwardIterator * ResultRetrievor::construct_retrieve_tree(const QueryNode & query_node) {$/;"	f	class:unise::ResultRetrievor
finish_retrieve	ju-seatch\unise\retri\result_retrievor.cc	/^void ResultRetrievor::finish_retrieve() {$/;"	f	class:unise::ResultRetrievor
get_estimated_num	ju-seatch\unise\retri\result_retrievor.cc	/^uint64_t ResultRetrievor::get_estimated_num($/;"	f	class:unise::ResultRetrievor
init	ju-seatch\unise\retri\result_retrievor.cc	/^bool ResultRetrievor::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::ResultRetrievor
retrieve	ju-seatch\unise\retri\result_retrievor.cc	/^void ResultRetrievor::retrieve($/;"	f	class:unise::ResultRetrievor
unise	ju-seatch\unise\retri\result_retrievor.cc	/^namespace unise {$/;"	n	file:
~ResultRetrievor	ju-seatch\unise\retri\result_retrievor.cc	/^ResultRetrievor::~ResultRetrievor() {$/;"	f	class:unise::ResultRetrievor
RETRI_RESULT_RETRIEVOR_H_	ju-seatch\unise\retri\result_retrievor.h	4;"	d
ResultRetrievor	ju-seatch\unise\retri\result_retrievor.h	/^class ResultRetrievor {$/;"	c	namespace:unise
_doc_match_info_proxy	ju-seatch\unise\retri\result_retrievor.h	/^    DocMatchInfoProxy _doc_match_info_proxy;$/;"	m	class:unise::ResultRetrievor
_forward_iterators	ju-seatch\unise\retri\result_retrievor.h	/^    std::vector<ForwardIterator*> _forward_iterators;$/;"	m	class:unise::ResultRetrievor
_matched_doc_pool	ju-seatch\unise\retri\result_retrievor.h	/^    boost::scoped_ptr<MasfObjPool<MatchedDocInternal> > _matched_doc_pool;$/;"	m	class:unise::ResultRetrievor
_repository_manager	ju-seatch\unise\retri\result_retrievor.h	/^    const RepositoryManager & _repository_manager;$/;"	m	class:unise::ResultRetrievor
_result_manager	ju-seatch\unise\retri\result_retrievor.h	/^    boost::scoped_ptr<ResultManager> _result_manager;$/;"	m	class:unise::ResultRetrievor
_search_context	ju-seatch\unise\retri\result_retrievor.h	/^    SearchContext * _search_context;$/;"	m	class:unise::ResultRetrievor
_search_context_factory	ju-seatch\unise\retri\result_retrievor.h	/^    boost::scoped_ptr<SearchContextFactory> _search_context_factory;$/;"	m	class:unise::ResultRetrievor
unise	ju-seatch\unise\retri\result_retrievor.h	/^namespace unise {$/;"	n
ScorerHandler	ju-seatch\unise\retri\scorer_handler.cc	/^ScorerHandler::ScorerHandler(const RepositoryManager & pm) : _repository_manager(pm) {}$/;"	f	class:unise::ScorerHandler
end_for_search	ju-seatch\unise\retri\scorer_handler.cc	/^void ScorerHandler::end_for_search(GeneralSearchResponse * response) {$/;"	f	class:unise::ScorerHandler
init	ju-seatch\unise\retri\scorer_handler.cc	/^bool ScorerHandler::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::ScorerHandler
init_for_search	ju-seatch\unise\retri\scorer_handler.cc	/^void ScorerHandler::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::ScorerHandler
score	ju-seatch\unise\retri\scorer_handler.cc	/^void ScorerHandler::score(MatchedDoc * doc) {$/;"	f	class:unise::ScorerHandler
unise	ju-seatch\unise\retri\scorer_handler.cc	/^namespace unise {$/;"	n	file:
~ScorerHandler	ju-seatch\unise\retri\scorer_handler.cc	/^ScorerHandler::~ScorerHandler() {$/;"	f	class:unise::ScorerHandler
RETRI_SCORER_HANDLER_H_	ju-seatch\unise\retri\scorer_handler.h	4;"	d
ScorerHandler	ju-seatch\unise\retri\scorer_handler.h	/^class ScorerHandler {$/;"	c	namespace:unise
UniseScorersMap	ju-seatch\unise\retri\scorer_handler.h	/^    typedef std::map<uint64_t, std::vector<Scorer*> > UniseScorersMap;$/;"	t	class:unise::ScorerHandler
_cur_scorers	ju-seatch\unise\retri\scorer_handler.h	/^    std::vector<Scorer*> * _cur_scorers;$/;"	m	class:unise::ScorerHandler
_repository_manager	ju-seatch\unise\retri\scorer_handler.h	/^    const RepositoryManager & _repository_manager;$/;"	m	class:unise::ScorerHandler
_scorers_map	ju-seatch\unise\retri\scorer_handler.h	/^    UniseScorersMap _scorers_map;$/;"	m	class:unise::ScorerHandler
comcfg	ju-seatch\unise\retri\scorer_handler.h	/^namespace comcfg {$/;"	n
unise	ju-seatch\unise\retri\scorer_handler.h	/^namespace unise {$/;"	n
DefaultSearchContextFactory	ju-seatch\unise\retri\search_context.cc	/^    DefaultSearchContextFactory() {}$/;"	f	class:unise::DefaultSearchContextFactory
DefaultSearchContextFactory	ju-seatch\unise\retri\search_context.cc	/^class DefaultSearchContextFactory : public SearchContextFactory {$/;"	c	namespace:unise	file:
destroy	ju-seatch\unise\retri\search_context.cc	/^    virtual void destroy(SearchContext * c) { delete c; }$/;"	f	class:unise::DefaultSearchContextFactory
get_experiment_value	ju-seatch\unise\retri\search_context.cc	/^bool SearchContext::get_experiment_value(const std::string& key, bool * value) const$/;"	f	class:unise::SearchContext
get_experiment_value	ju-seatch\unise\retri\search_context.cc	/^bool SearchContext::get_experiment_value(const std::string& key, int64_t * value) const$/;"	f	class:unise::SearchContext
get_experiment_value	ju-seatch\unise\retri\search_context.cc	/^bool SearchContext::get_experiment_value(const std::string& key, std::string * value) const$/;"	f	class:unise::SearchContext
get_experiment_value	ju-seatch\unise\retri\search_context.cc	/^bool SearchContext::get_experiment_value(const std::string& key, uint64_t * value) const$/;"	f	class:unise::SearchContext
get_name	ju-seatch\unise\retri\search_context.cc	/^    virtual std::string get_name() { return "DefaultSearchContextFactory"; }$/;"	f	class:unise::DefaultSearchContextFactory
init	ju-seatch\unise\retri\search_context.cc	/^    virtual bool init(const comcfg::ConfigUnit & conf) { return true; }$/;"	f	class:unise::DefaultSearchContextFactory
init_for_search	ju-seatch\unise\retri\search_context.cc	/^void SearchContext::init_for_search(const GeneralSearchRequest* request)$/;"	f	class:unise::SearchContext
max_result_manager_capacity	ju-seatch\unise\retri\search_context.cc	/^DECLARE_int32(max_result_manager_capacity);$/;"	v
produce	ju-seatch\unise\retri\search_context.cc	/^    virtual SearchContext * produce() { return new SearchContext(); }$/;"	f	class:unise::DefaultSearchContextFactory
recall_max_docs	ju-seatch\unise\retri\search_context.cc	/^DECLARE_int32(recall_max_docs);$/;"	v
retrieve_max_depth	ju-seatch\unise\retri\search_context.cc	/^DECLARE_int32(retrieve_max_depth);$/;"	v
retrieve_timeout	ju-seatch\unise\retri\search_context.cc	/^DECLARE_double(retrieve_timeout);$/;"	v
unise	ju-seatch\unise\retri\search_context.cc	/^namespace unise {$/;"	n	file:
~DefaultSearchContextFactory	ju-seatch\unise\retri\search_context.cc	/^    ~DefaultSearchContextFactory() {}$/;"	f	class:unise::DefaultSearchContextFactory
basic_init	ju-seatch\unise\retri\unise_plugin.cc	/^bool UnisePlugin::basic_init(const RepositoryManager * rm, const comcfg::ConfigUnit& conf)$/;"	f	class:unise::UnisePlugin
get_annotation_schema	ju-seatch\unise\retri\unise_plugin.cc	/^const AnnotationSchema * UnisePlugin::get_annotation_schema(AnnotationId id) const$/;"	f	class:unise::UnisePlugin
get_annotation_schema	ju-seatch\unise\retri\unise_plugin.cc	/^const AnnotationSchema * UnisePlugin::get_annotation_schema(const std::string& name) const$/;"	f	class:unise::UnisePlugin
get_annotation_schemas	ju-seatch\unise\retri\unise_plugin.cc	/^const std::vector<const AnnotationSchema*> & UnisePlugin::get_annotation_schemas() const$/;"	f	class:unise::UnisePlugin
get_dimension_doc	ju-seatch\unise\retri\unise_plugin.cc	/^const DimensionDoc * UnisePlugin::get_dimension_doc($/;"	f	class:unise::UnisePlugin
get_fact_doc	ju-seatch\unise\retri\unise_plugin.cc	/^const FactDoc * UnisePlugin::get_fact_doc(DocId docid) const$/;"	f	class:unise::UnisePlugin
get_fact_doc_dimension_name	ju-seatch\unise\retri\unise_plugin.cc	/^const std::string & UnisePlugin::get_fact_doc_dimension_name() const$/;"	f	class:unise::UnisePlugin
get_fact_doc_level_id	ju-seatch\unise\retri\unise_plugin.cc	/^size_t UnisePlugin::get_fact_doc_level_id() const$/;"	f	class:unise::UnisePlugin
unise	ju-seatch\unise\retri\unise_plugin.cc	/^namespace unise$/;"	n	file:
adapt	ju-seatch\unise\serve\default_result_adapter.cc	/^void DefaultResultAdapter::adapt(const std::vector<SearchResult*> &results,$/;"	f	class:unise::DefaultResultAdapter
init_for_search	ju-seatch\unise\serve\default_result_adapter.cc	/^void DefaultResultAdapter::init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::DefaultResultAdapter
unise	ju-seatch\unise\serve\default_result_adapter.cc	/^namespace unise$/;"	n	file:
DefaultResultAdapter	ju-seatch\unise\serve\default_result_adapter.h	/^    DefaultResultAdapter() {}$/;"	f	class:unise::DefaultResultAdapter
DefaultResultAdapter	ju-seatch\unise\serve\default_result_adapter.h	/^class DefaultResultAdapter : public ResultAdapter$/;"	c	namespace:unise
__DEFAULT_RESULT_ADAPTER_H_	ju-seatch\unise\serve\default_result_adapter.h	21;"	d
_comparator	ju-seatch\unise\serve\default_result_adapter.h	/^    SearchResultComparator _comparator;$/;"	m	class:unise::DefaultResultAdapter
get_name	ju-seatch\unise\serve\default_result_adapter.h	/^    virtual std::string get_name() const $/;"	f	class:unise::DefaultResultAdapter
init	ju-seatch\unise\serve\default_result_adapter.h	/^    virtual bool init(const comcfg::ConfigUnit & conf)$/;"	f	class:unise::DefaultResultAdapter
ultimatum	ju-seatch\unise\serve\default_result_adapter.h	/^    virtual void ultimatum(const GeneralSearchRequest& request,$/;"	f	class:unise::DefaultResultAdapter
unise	ju-seatch\unise\serve\default_result_adapter.h	/^namespace unise$/;"	n
~DefaultResultAdapter	ju-seatch\unise\serve\default_result_adapter.h	/^    virtual ~DefaultResultAdapter() {}$/;"	f	class:unise::DefaultResultAdapter
exact_num_results	ju-seatch\unise\serve\default_search_handler.cc	/^DECLARE_int32(exact_num_results);$/;"	v
my_init	ju-seatch\unise\serve\default_search_handler.cc	/^bool DefaultSearchHandler::my_init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::DefaultSearchHandler
search_internal	ju-seatch\unise\serve\default_search_handler.cc	/^void DefaultSearchHandler::search_internal($/;"	f	class:unise::DefaultSearchHandler
unise	ju-seatch\unise\serve\default_search_handler.cc	/^namespace unise$/;"	n	file:
DEFAULT_SEARCH_HANDLER_H_	ju-seatch\unise\serve\default_search_handler.h	4;"	d
DefaultSearchHandler	ju-seatch\unise\serve\default_search_handler.h	/^    DefaultSearchHandler() : _result_num_all(0), _result_num_eu(0) {}$/;"	f	class:unise::DefaultSearchHandler
DefaultSearchHandler	ju-seatch\unise\serve\default_search_handler.h	/^class DefaultSearchHandler : public SearchHandler$/;"	c	namespace:unise
REGISTER_SEARCH_HANDLER	ju-seatch\unise\serve\default_search_handler.h	40;"	d
_result_num_all	ju-seatch\unise\serve\default_search_handler.h	/^    int32_t _result_num_all;    \/\/\/< SE需要收集的结果总数$/;"	m	class:unise::DefaultSearchHandler
_result_num_eu	ju-seatch\unise\serve\default_search_handler.h	/^    int32_t _result_num_eu;     \/\/\/< 每个EU需要返回的结果数$/;"	m	class:unise::DefaultSearchHandler
engine_unit_list_	ju-seatch\unise\serve\default_search_handler.h	/^    std::vector<EngineUnit*> engine_unit_list_;$/;"	m	class:unise::DefaultSearchHandler
get_name	ju-seatch\unise\serve\default_search_handler.h	/^    const std::string get_name() const {$/;"	f	class:unise::DefaultSearchHandler
get_type	ju-seatch\unise\serve\default_search_handler.h	/^    const std::string get_type() const {$/;"	f	class:unise::DefaultSearchHandler
unise	ju-seatch\unise\serve\default_search_handler.h	/^namespace unise$/;"	n
~DefaultSearchHandler	ju-seatch\unise\serve\default_search_handler.h	/^    virtual ~DefaultSearchHandler() {}$/;"	f	class:unise::DefaultSearchHandler
EngineUnitManager	ju-seatch\unise\serve\engine_unit_manager.cc	/^EngineUnitManager::EngineUnitManager() {}$/;"	f	class:unise::EngineUnitManager
get_engine_unit	ju-seatch\unise\serve\engine_unit_manager.cc	/^EngineUnit * EngineUnitManager::get_engine_unit(const std::string & name)$/;"	f	class:unise::EngineUnitManager
init	ju-seatch\unise\serve\engine_unit_manager.cc	/^bool EngineUnitManager::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::EngineUnitManager
unise	ju-seatch\unise\serve\engine_unit_manager.cc	/^namespace unise$/;"	n	file:
~EngineUnitManager	ju-seatch\unise\serve\engine_unit_manager.cc	/^EngineUnitManager::~EngineUnitManager()$/;"	f	class:unise::EngineUnitManager
ENGINE_UNIT_MANAGER_H_	ju-seatch\unise\serve\engine_unit_manager.h	4;"	d
EngineUnitManager	ju-seatch\unise\serve\engine_unit_manager.h	/^class EngineUnitManager$/;"	c	namespace:unise
engine_unit_map_	ju-seatch\unise\serve\engine_unit_manager.h	/^    std::map<std::string, EngineUnit*> engine_unit_map_;$/;"	m	class:unise::EngineUnitManager
unise	ju-seatch\unise\serve\engine_unit_manager.h	/^namespace unise$/;"	n
BinlogProcessor	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^BinlogProcessor::BinlogProcessor() :$/;"	f	class:unise::BinlogProcessor
GetTemplate	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^const Template* BinlogProcessor::GetTemplate() const {$/;"	f	class:unise::BinlogProcessor
HandleHttpRequest	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^bool BinlogProcessor::HandleHttpRequest(const Request& request, Respond *respond) {$/;"	f	class:unise::BinlogProcessor
Init	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^bool BinlogProcessor::Init() {$/;"	f	class:unise::BinlogProcessor
RenderInput	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^bool BinlogProcessor::RenderInput(const Request& request, TemplateDictionary* dict) {$/;"	f	class:unise::BinlogProcessor
RenderResultOutput	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^bool BinlogProcessor::RenderResultOutput(TemplateDictionary* dict) {$/;"	f	class:unise::BinlogProcessor
RenderScript	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^void BinlogProcessor::RenderScript(TemplateDictionary* dict) {}$/;"	f	class:unise::BinlogProcessor
binlog_buffer_size	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^DECLARE_int32(binlog_buffer_size);$/;"	v
unise	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^namespace unise {$/;"	n	file:
~BinlogProcessor	ju-seatch\unise\serve\frontend\binlog_processor.cc	/^BinlogProcessor::~BinlogProcessor() {$/;"	f	class:unise::BinlogProcessor
BinlogProcessor	ju-seatch\unise\serve\frontend\binlog_processor.h	/^class BinlogProcessor : public PageProcessor {$/;"	c	namespace:unise
GetDescription	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    virtual std::string GetDescription() const { return "Unise Binlog Frontend"; }$/;"	f	class:unise::BinlogProcessor
GetName	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    virtual std::string GetName() const { return "BinlogProcessor"; }$/;"	f	class:unise::BinlogProcessor
GetPath	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    virtual std::string GetPath() const { return "binlog"; }$/;"	f	class:unise::BinlogProcessor
SERVE_FRONTEND_BINLOG_PROCESSOR_H_	ju-seatch\unise\serve\frontend\binlog_processor.h	5;"	d
_base64_buf	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    uint8_t * _base64_buf;$/;"	m	class:unise::BinlogProcessor
_proto_buf	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    uint8_t * _proto_buf;$/;"	m	class:unise::BinlogProcessor
_request_text	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    std::string _request_text;$/;"	m	class:unise::BinlogProcessor
_response_text	ju-seatch\unise\serve\frontend\binlog_processor.h	/^    std::string _response_text;$/;"	m	class:unise::BinlogProcessor
ctemplate	ju-seatch\unise\serve\frontend\binlog_processor.h	/^namespace ctemplate {$/;"	n
unise	ju-seatch\unise\serve\frontend\binlog_processor.h	/^namespace unise{$/;"	n
BINLOG_CTPL_H_	ju-seatch\unise\serve\frontend\ctpl\binlog.ctpl.h	10;"	d
UNISE_FRONTEND_CTPL_DEFAULT_CTPL_H_	ju-seatch\unise\serve\frontend\ctpl\default.ctpl.h	10;"	d
INDEX_CTPL_H_	ju-seatch\unise\serve\frontend\ctpl\index.ctpl.h	10;"	d
UNISE_FRONTEND_CTPL_MONITOR_CTPL_H_	ju-seatch\unise\serve\frontend\ctpl\monitor.ctpl.h	10;"	d
UNISE_FRONTEND_CTPL_SEARCH_ENGINE_CTPL_H_	ju-seatch\unise\serve\frontend\ctpl\search_engine.ctpl.h	10;"	d
GetTemplate	ju-seatch\unise\serve\frontend\index_processor.cc	/^const Template* IndexProcessor::GetTemplate() const {$/;"	f	class:unise::IndexProcessor
HandleHttpRequest	ju-seatch\unise\serve\frontend\index_processor.cc	/^bool IndexProcessor::HandleHttpRequest(const Request& request, Respond *respond) {$/;"	f	class:unise::IndexProcessor
IndexProcessor	ju-seatch\unise\serve\frontend\index_processor.cc	/^IndexProcessor::IndexProcessor() {}$/;"	f	class:unise::IndexProcessor
Init	ju-seatch\unise\serve\frontend\index_processor.cc	/^bool IndexProcessor::Init() {$/;"	f	class:unise::IndexProcessor
RenderInput	ju-seatch\unise\serve\frontend\index_processor.cc	/^bool IndexProcessor::RenderInput(const Request& request, TemplateDictionary* dict) {$/;"	f	class:unise::IndexProcessor
RenderResultOutput	ju-seatch\unise\serve\frontend\index_processor.cc	/^bool IndexProcessor::RenderResultOutput(TemplateDictionary* dict) {$/;"	f	class:unise::IndexProcessor
RenderScript	ju-seatch\unise\serve\frontend\index_processor.cc	/^void IndexProcessor::RenderScript(TemplateDictionary* dict) {}$/;"	f	class:unise::IndexProcessor
unise	ju-seatch\unise\serve\frontend\index_processor.cc	/^namespace unise {$/;"	n	file:
~IndexProcessor	ju-seatch\unise\serve\frontend\index_processor.cc	/^IndexProcessor::~IndexProcessor() {}$/;"	f	class:unise::IndexProcessor
GetDescription	ju-seatch\unise\serve\frontend\index_processor.h	/^    virtual std::string GetDescription() const { return "Unise Index Frontend"; }$/;"	f	class:unise::IndexProcessor
GetName	ju-seatch\unise\serve\frontend\index_processor.h	/^    virtual std::string GetName() const { return "IndexProcessor"; }$/;"	f	class:unise::IndexProcessor
GetPath	ju-seatch\unise\serve\frontend\index_processor.h	/^    virtual std::string GetPath() const { return "index"; }$/;"	f	class:unise::IndexProcessor
IndexProcessor	ju-seatch\unise\serve\frontend\index_processor.h	/^class IndexProcessor : public PageProcessor {$/;"	c	namespace:unise
UNISE_SERVE_FRONTEND_INDEX_PROCESSOR_H	ju-seatch\unise\serve\frontend\index_processor.h	5;"	d
_docid	ju-seatch\unise\serve\frontend\index_processor.h	/^    DocId _docid;$/;"	m	class:unise::IndexProcessor
_engine_name	ju-seatch\unise\serve\frontend\index_processor.h	/^    std::string _engine_name;$/;"	m	class:unise::IndexProcessor
_search_engine	ju-seatch\unise\serve\frontend\index_processor.h	/^    SearchEngine * _search_engine;$/;"	m	class:unise::IndexProcessor
_token_id_list	ju-seatch\unise\serve\frontend\index_processor.h	/^    std::vector<TokenId> _token_id_list;$/;"	m	class:unise::IndexProcessor
ctemplate	ju-seatch\unise\serve\frontend\index_processor.h	/^namespace ctemplate {$/;"	n
unise	ju-seatch\unise\serve\frontend\index_processor.h	/^namespace unise{$/;"	n
GetTemplate	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^const Template* MonitorProcessor::GetTemplate() const {$/;"	f	class:unise::MonitorProcessor
HandleHttpRequest	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^bool MonitorProcessor::HandleHttpRequest(const Request& request, Respond *respond) {$/;"	f	class:unise::MonitorProcessor
Init	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^bool MonitorProcessor::Init() {$/;"	f	class:unise::MonitorProcessor
MonitorProcessor	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^MonitorProcessor::MonitorProcessor() : _state_monitor(NULL) {$/;"	f	class:unise::MonitorProcessor
RenderInput	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^bool MonitorProcessor::RenderInput($/;"	f	class:unise::MonitorProcessor
RenderResultOutput	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^bool MonitorProcessor::RenderResultOutput(TemplateDictionary* dict) {$/;"	f	class:unise::MonitorProcessor
RenderScript	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^void MonitorProcessor::RenderScript(TemplateDictionary* dict) {$/;"	f	class:unise::MonitorProcessor
monitor_record_queue_size	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^DECLARE_int32(monitor_record_queue_size);$/;"	v
unise	ju-seatch\unise\serve\frontend\monitor_processor.cc	/^namespace unise {$/;"	n	file:
GetDescription	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    virtual std::string GetDescription() const { return "Unise Monitor Frontend"; }$/;"	f	class:unise::MonitorProcessor
GetName	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    virtual std::string GetName() const { return "MonitorProcessor"; }$/;"	f	class:unise::MonitorProcessor
GetPath	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    virtual std::string GetPath() const { return "monitor"; }$/;"	f	class:unise::MonitorProcessor
MonitorProcessor	ju-seatch\unise\serve\frontend\monitor_processor.h	/^class MonitorProcessor : public PageProcessor {$/;"	c	namespace:unise
SERVE_FRONTEND_MONITOR_PROCESSOR_H	ju-seatch\unise\serve\frontend\monitor_processor.h	5;"	d
_mem_info	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    GetMemInfo _mem_info; $/;"	m	class:unise::MonitorProcessor
_number_keys	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    std::vector<std::string> _number_keys;$/;"	m	class:unise::MonitorProcessor
_records	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    boost::scoped_ptr<std::vector<tens_record_t> > _records;$/;"	m	class:unise::MonitorProcessor
_state_monitor	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    StateMonitor * _state_monitor;$/;"	m	class:unise::MonitorProcessor
_text_keys	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    std::vector<std::string> _text_keys;$/;"	m	class:unise::MonitorProcessor
ctemplate	ju-seatch\unise\serve\frontend\monitor_processor.h	/^namespace ctemplate {$/;"	n
unise	ju-seatch\unise\serve\frontend\monitor_processor.h	/^namespace unise {$/;"	n
~MonitorProcessor	ju-seatch\unise\serve\frontend\monitor_processor.h	/^    virtual ~MonitorProcessor() {}$/;"	f	class:unise::MonitorProcessor
GetTemplate	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^const Template* SearchEngineProcessor::GetTemplate() const {$/;"	f	class:unise::SearchEngineProcessor
HandleHttpRequest	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^bool SearchEngineProcessor::HandleHttpRequest(const Request& request, Respond *respond) {$/;"	f	class:unise::SearchEngineProcessor
Init	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^bool SearchEngineProcessor::Init() {$/;"	f	class:unise::SearchEngineProcessor
RenderInput	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^bool SearchEngineProcessor::RenderInput(const Request& request,$/;"	f	class:unise::SearchEngineProcessor
RenderResultOutput	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^bool SearchEngineProcessor::RenderResultOutput($/;"	f	class:unise::SearchEngineProcessor
RenderScript	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^void SearchEngineProcessor::RenderScript(TemplateDictionary* dict) {$/;"	f	class:unise::SearchEngineProcessor
communicate_timeout	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^DECLARE_int64(communicate_timeout);$/;"	v
conf_fname	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^DECLARE_string(conf_fname);$/;"	v
conf_fpath	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^DECLARE_string(conf_fpath);$/;"	v
recall_max_docs	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^DECLARE_int32(recall_max_docs);$/;"	v
retrieve_max_depth	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^DECLARE_int32(retrieve_max_depth);$/;"	v
set_experiments	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^void SearchEngineProcessor::set_experiments(const std::string& exp, SearchParams * sp) {$/;"	f	class:unise::SearchEngineProcessor
set_sort_params	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^void SearchEngineProcessor::set_sort_params(const std::string& sort_params,$/;"	f	class:unise::SearchEngineProcessor
unise	ju-seatch\unise\serve\frontend\search_engine_processor.cc	/^namespace unise {$/;"	n	file:
GetDescription	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    virtual std::string GetDescription() const { return "Unise Search Engine Frontend"; }$/;"	f	class:unise::SearchEngineProcessor
GetName	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    virtual std::string GetName() const { return "SearchEngineProcessor"; }$/;"	f	class:unise::SearchEngineProcessor
GetPath	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    virtual std::string GetPath() const { return "search"; }$/;"	f	class:unise::SearchEngineProcessor
SERVE_SEARCH_FRONTEND_H_	ju-seatch\unise\serve\frontend\search_engine_processor.h	5;"	d
SearchEngineProcessor	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    SearchEngineProcessor() {}$/;"	f	class:unise::SearchEngineProcessor
SearchEngineProcessor	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^class SearchEngineProcessor : public PageProcessor$/;"	c	namespace:unise
_channel	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    boost::scoped_ptr<bhp::Channel> _channel;$/;"	m	class:unise::SearchEngineProcessor
_controller	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    boost::scoped_ptr<bhp::Controller> _controller;$/;"	m	class:unise::SearchEngineProcessor
_server_address	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    std::string _server_address;$/;"	m	class:unise::SearchEngineProcessor
_stub	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    boost::scoped_ptr<UniseService_Stub> _stub;$/;"	m	class:unise::SearchEngineProcessor
ctemplate	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^namespace ctemplate$/;"	n
unise	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^namespace unise$/;"	n
~SearchEngineProcessor	ju-seatch\unise\serve\frontend\search_engine_processor.h	/^    virtual ~SearchEngineProcessor() {}$/;"	f	class:unise::SearchEngineProcessor
GetInt64UrlParameter	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^int64_t PageProcessor::GetInt64UrlParameter(const Request &request,$/;"	f	class:unise::PageProcessor
GetIntUrlParameter	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^int PageProcessor::GetIntUrlParameter(const Request &request,$/;"	f	class:unise::PageProcessor
GetTemplate	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^const Template* UniseFrontend::GetTemplate() const {$/;"	f	class:unise::UniseFrontend
GetUint64UrlParameter	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^uint64_t PageProcessor::GetUint64UrlParameter(const Request &request,$/;"	f	class:unise::PageProcessor
GetUrlParameter	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^const string PageProcessor::GetUrlParameter(const Request &request,$/;"	f	class:unise::PageProcessor
HandleDefaultRequest	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^bool UniseFrontend::HandleDefaultRequest($/;"	f	class:unise::UniseFrontend
HasUrlParameter	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^bool PageProcessor::HasUrlParameter(const Request &request,$/;"	f	class:unise::PageProcessor
Init	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^void UniseFrontend::Init() {$/;"	f	class:unise::UniseFrontend
SetUniseFrontendProc	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^void PageProcessor::SetUniseFrontendProc(const UniseFrontendProc& unise_frontend_proc) {$/;"	f	class:unise::PageProcessor
unise	ju-seatch\unise\serve\frontend\unise_frontend.cc	/^namespace unise {$/;"	n	file:
PageProcessor	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    PageProcessor() {}$/;"	f	class:unise::PageProcessor
PageProcessor	ju-seatch\unise\serve\frontend\unise_frontend.h	/^class PageProcessor {$/;"	c	namespace:unise
REGISTER_PAGEPROCESSOR	ju-seatch\unise\serve\frontend\unise_frontend.h	53;"	d
UTIL_FRONTEND_UNISE_FRONTEND_H_	ju-seatch\unise\serve\frontend\unise_frontend.h	4;"	d
UniseFrontend	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    UniseFrontend() {}$/;"	f	class:unise::UniseFrontend
UniseFrontend	ju-seatch\unise\serve\frontend\unise_frontend.h	/^class UniseFrontend {$/;"	c	namespace:unise
UniseFrontendProc	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    typedef std::vector<std::pair<std::string, std::string> > UniseFrontendProc;$/;"	t	class:unise::PageProcessor
_unise_frontend_proc	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    UniseFrontendProc _unise_frontend_proc;$/;"	m	class:unise::PageProcessor
ctemplate	ju-seatch\unise\serve\frontend\unise_frontend.h	/^namespace ctemplate {$/;"	n
http_server_	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    boost::shared_ptr<HttpServer> http_server_;$/;"	m	class:unise::UniseFrontend
processors_	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    std::vector<PageProcessor*> processors_;$/;"	m	class:unise::UniseFrontend
unise	ju-seatch\unise\serve\frontend\unise_frontend.h	/^namespace unise {$/;"	n
~PageProcessor	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    virtual ~PageProcessor() {}$/;"	f	class:unise::PageProcessor
~UniseFrontend	ju-seatch\unise\serve\frontend\unise_frontend.h	/^    ~UniseFrontend() {}$/;"	f	class:unise::UniseFrontend
EmptyQueryRewriter	ju-seatch\unise\serve\query_rewriter.cc	/^    EmptyQueryRewriter() {}$/;"	f	class:unise::EmptyQueryRewriter
EmptyQueryRewriter	ju-seatch\unise\serve\query_rewriter.cc	/^class EmptyQueryRewriter : public QueryRewriter {$/;"	c	namespace:unise	file:
get_name	ju-seatch\unise\serve\query_rewriter.cc	/^    virtual std::string get_name() const {$/;"	f	class:unise::EmptyQueryRewriter
init	ju-seatch\unise\serve\query_rewriter.cc	/^    virtual bool init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::EmptyQueryRewriter
merge_search_params_from_exp	ju-seatch\unise\serve\query_rewriter.cc	/^void QueryRewriter::merge_search_params_from_exp($/;"	f	class:unise::QueryRewriter
rewrite	ju-seatch\unise\serve\query_rewriter.cc	/^void QueryRewriter::rewrite(const GeneralSearchRequest * raw, GeneralSearchRequest * req) {$/;"	f	class:unise::QueryRewriter
rewrite_internal	ju-seatch\unise\serve\query_rewriter.cc	/^    virtual void rewrite_internal(GeneralSearchRequest * req) {$/;"	f	class:unise::EmptyQueryRewriter
trans_query_node	ju-seatch\unise\serve\query_rewriter.cc	/^void QueryRewriter::trans_query_node(QueryNode * node) {$/;"	f	class:unise::QueryRewriter
unise	ju-seatch\unise\serve\query_rewriter.cc	/^namespace unise {$/;"	n	file:
~EmptyQueryRewriter	ju-seatch\unise\serve\query_rewriter.cc	/^    virtual ~EmptyQueryRewriter() {}$/;"	f	class:unise::EmptyQueryRewriter
RealEngineUnit	ju-seatch\unise\serve\real_engine_unit.cc	/^RealEngineUnit::RealEngineUnit() :$/;"	f	class:unise::RealEngineUnit
get_forward_index	ju-seatch\unise\serve\real_engine_unit.cc	/^const ForwardIndex * RealEngineUnit::get_forward_index(DocId docid) const {$/;"	f	class:unise::RealEngineUnit
init	ju-seatch\unise\serve\real_engine_unit.cc	/^bool RealEngineUnit::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::RealEngineUnit
init_for_search	ju-seatch\unise\serve\real_engine_unit.cc	/^bool RealEngineUnit::init_for_search() {$/;"	f	class:unise::RealEngineUnit
inited	ju-seatch\unise\serve\real_engine_unit.cc	/^bool RealEngineUnit::inited() const {$/;"	f	class:unise::RealEngineUnit
is_initing	ju-seatch\unise\serve\real_engine_unit.cc	/^bool RealEngineUnit::is_initing() const {$/;"	f	class:unise::RealEngineUnit
search	ju-seatch\unise\serve\real_engine_unit.cc	/^void RealEngineUnit::search(GeneralSearchRequest* request,$/;"	f	class:unise::RealEngineUnit
unise	ju-seatch\unise\serve\real_engine_unit.cc	/^namespace unise {$/;"	n	file:
~RealEngineUnit	ju-seatch\unise\serve\real_engine_unit.cc	/^RealEngineUnit::~RealEngineUnit() {$/;"	f	class:unise::RealEngineUnit
RealEngineUnit	ju-seatch\unise\serve\real_engine_unit.h	/^class RealEngineUnit : public EngineUnit {$/;"	c	namespace:unise
RetrievorQueue	ju-seatch\unise\serve\real_engine_unit.h	/^    typedef boost::lockfree::queue<ResultRetrievor*> RetrievorQueue;$/;"	t	class:unise::RealEngineUnit
SERVE_REAL_ENGINE_UNIT_H_	ju-seatch\unise\serve\real_engine_unit.h	4;"	d
_das_callbacks	ju-seatch\unise\serve\real_engine_unit.h	/^    std::vector<boost::shared_ptr<DasCbClosure> > _das_callbacks;$/;"	m	class:unise::RealEngineUnit
_das_inc_builder	ju-seatch\unise\serve\real_engine_unit.h	/^    boost::scoped_ptr<DasIncBuilder> _das_inc_builder;$/;"	m	class:unise::RealEngineUnit
_das_loader	ju-seatch\unise\serve\real_engine_unit.h	/^    boost::scoped_ptr<DasLoader> _das_loader;$/;"	m	class:unise::RealEngineUnit
_dimension_doc_manager	ju-seatch\unise\serve\real_engine_unit.h	/^    boost::shared_ptr<DimensionDocManager> _dimension_doc_manager;$/;"	m	class:unise::RealEngineUnit
_inc_doc_name_prefix	ju-seatch\unise\serve\real_engine_unit.h	/^    std::string _inc_doc_name_prefix;       \/**< 增量文件名字的前缀       *\/$/;"	m	class:unise::RealEngineUnit
_inc_doc_path	ju-seatch\unise\serve\real_engine_unit.h	/^    std::string _inc_doc_path;              \/**< 增量文件的路径       *\/$/;"	m	class:unise::RealEngineUnit
_info_file_name	ju-seatch\unise\serve\real_engine_unit.h	/^    std::string _info_file_name;            \/**< das 的base.n文件的全路径 *\/$/;"	m	class:unise::RealEngineUnit
_name	ju-seatch\unise\serve\real_engine_unit.h	/^    std::string _name;$/;"	m	class:unise::RealEngineUnit
_repository_manager	ju-seatch\unise\serve\real_engine_unit.h	/^    boost::shared_ptr<RepositoryManager> _repository_manager;$/;"	m	class:unise::RealEngineUnit
_result_retrievor_queue	ju-seatch\unise\serve\real_engine_unit.h	/^    boost::scoped_ptr<RetrievorQueue> _result_retrievor_queue;$/;"	m	class:unise::RealEngineUnit
_retrievor_number	ju-seatch\unise\serve\real_engine_unit.h	/^    int32_t _retrievor_number;$/;"	m	class:unise::RealEngineUnit
_type	ju-seatch\unise\serve\real_engine_unit.h	/^    std::string _type;$/;"	m	class:unise::RealEngineUnit
get_name	ju-seatch\unise\serve\real_engine_unit.h	/^    virtual const std::string& get_name() const {$/;"	f	class:unise::RealEngineUnit
get_type	ju-seatch\unise\serve\real_engine_unit.h	/^    virtual const std::string& get_type() const {$/;"	f	class:unise::RealEngineUnit
unise	ju-seatch\unise\serve\real_engine_unit.h	/^namespace unise {$/;"	n
SearchEngine	ju-seatch\unise\serve\search_engine.cc	/^SearchEngine::SearchEngine() :$/;"	f	class:unise::SearchEngine
finish_search	ju-seatch\unise\serve\search_engine.cc	/^void SearchEngine::finish_search(const GeneralSearchRequest& request,$/;"	f	class:unise::SearchEngine
get_forward_index	ju-seatch\unise\serve\search_engine.cc	/^const ForwardIndex * SearchEngine::get_forward_index(const std::string& engine_name, DocId docid) {$/;"	f	class:unise::SearchEngine
init	ju-seatch\unise\serve\search_engine.cc	/^bool SearchEngine::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::SearchEngine
search	ju-seatch\unise\serve\search_engine.cc	/^void SearchEngine::search(const GeneralSearchRequest* request,$/;"	f	class:unise::SearchEngine
unise	ju-seatch\unise\serve\search_engine.cc	/^namespace unise {$/;"	n	file:
~SearchEngine	ju-seatch\unise\serve\search_engine.cc	/^SearchEngine::~SearchEngine() {$/;"	f	class:unise::SearchEngine
SERVE_SEARCH_ENGINE_H_	ju-seatch\unise\serve\search_engine.h	4;"	d
SearchEngine	ju-seatch\unise\serve\search_engine.h	/^class SearchEngine {$/;"	c	namespace:unise
_base64_buf	ju-seatch\unise\serve\search_engine.h	/^    uint8_t * _base64_buf;   \/\/\/< base64结果$/;"	m	class:unise::SearchEngine
_engine_unit_manager	ju-seatch\unise\serve\search_engine.h	/^    EngineUnitManager _engine_unit_manager;$/;"	m	class:unise::SearchEngine
_handler_number	ju-seatch\unise\serve\search_engine.h	/^    int32_t _handler_number;$/;"	m	class:unise::SearchEngine
_proto_buf	ju-seatch\unise\serve\search_engine.h	/^    uint8_t * _proto_buf; \/\/\/< protobuf序列化buffer$/;"	m	class:unise::SearchEngine
_search_handler_map	ju-seatch\unise\serve\search_engine.h	/^    search_handler_map _search_handler_map;     \/**< bid->search_handler的map       *\/$/;"	m	class:unise::SearchEngine
_state_monitor	ju-seatch\unise\serve\search_engine.h	/^    StateMonitor * _state_monitor;    \/\/\/< 状态监控模块的指针，避免每次获取$/;"	m	class:unise::SearchEngine
search_handler_map	ju-seatch\unise\serve\search_engine.h	/^    typedef std::map<uint64_t, search_handler_queue> search_handler_map;$/;"	t	class:unise::SearchEngine
search_handler_queue	ju-seatch\unise\serve\search_engine.h	/^    typedef boost::shared_ptr<boost::lockfree::queue<DefaultSearchHandler*> > search_handler_queue;$/;"	t	class:unise::SearchEngine
unise	ju-seatch\unise\serve\search_engine.h	/^namespace unise {$/;"	n
DocIdLess	ju-seatch\unise\serve\search_handler.cc	/^class DocIdLess {$/;"	c	namespace:unise	file:
DocIdWithLevelidLess	ju-seatch\unise\serve\search_handler.cc	/^class DocIdWithLevelidLess {$/;"	c	namespace:unise	file:
ResultEqual	ju-seatch\unise\serve\search_handler.cc	/^class ResultEqual {$/;"	c	namespace:unise	file:
ResultWithLevelidEqual	ju-seatch\unise\serve\search_handler.cc	/^class ResultWithLevelidEqual {$/;"	c	namespace:unise	file:
SearchHandler	ju-seatch\unise\serve\search_handler.cc	/^SearchHandler::SearchHandler() {$/;"	f	class:unise::SearchHandler
enable_estimated_num_results	ju-seatch\unise\serve\search_handler.cc	/^DECLARE_bool(enable_estimated_num_results);$/;"	v
get_engine_unit	ju-seatch\unise\serve\search_handler.cc	/^EngineUnit * SearchHandler::get_engine_unit(const std::string& name) const$/;"	f	class:unise::SearchHandler
get_query_rewriter	ju-seatch\unise\serve\search_handler.cc	/^QueryRewriter * SearchHandler::get_query_rewriter(uint64_t sample_id) {$/;"	f	class:unise::SearchHandler
get_response	ju-seatch\unise\serve\search_handler.cc	/^GeneralSearchResponse* SearchHandler::get_response()$/;"	f	class:unise::SearchHandler
get_result_adapter	ju-seatch\unise\serve\search_handler.cc	/^ResultAdapter * SearchHandler::get_result_adapter(uint64_t sample_id) {$/;"	f	class:unise::SearchHandler
init	ju-seatch\unise\serve\search_handler.cc	/^bool SearchHandler::init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::SearchHandler
init_query_rewriter	ju-seatch\unise\serve\search_handler.cc	/^bool SearchHandler::init_query_rewriter(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::SearchHandler
init_result_adapter	ju-seatch\unise\serve\search_handler.cc	/^bool SearchHandler::init_result_adapter(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::SearchHandler
merge	ju-seatch\unise\serve\search_handler.cc	/^void SearchHandler::merge(const std::vector<GeneralSearchResponse*> &org_responses,$/;"	f	class:unise::SearchHandler
operator ()	ju-seatch\unise\serve\search_handler.cc	/^    bool operator()(const SearchResult* a, const  SearchResult* b) const {$/;"	f	class:unise::DocIdLess
operator ()	ju-seatch\unise\serve\search_handler.cc	/^    bool operator()(const SearchResult* a, const  SearchResult* b) const {$/;"	f	class:unise::DocIdWithLevelidLess
operator ()	ju-seatch\unise\serve\search_handler.cc	/^    bool operator()(const SearchResult* a, const SearchResult* b) const {$/;"	f	class:unise::ResultEqual
operator ()	ju-seatch\unise\serve\search_handler.cc	/^    bool operator()(const SearchResult* a, const SearchResult* b) const {$/;"	f	class:unise::ResultWithLevelidEqual
operator ()	ju-seatch\unise\serve\search_handler.cc	/^bool ResultLess::operator()(const SearchResult* a, const  SearchResult* b) const {$/;"	f	class:unise::ResultLess
page_turn	ju-seatch\unise\serve\search_handler.cc	/^void SearchHandler::page_turn(const GeneralSearchRequest* request,$/;"	f	class:unise::SearchHandler
return_response	ju-seatch\unise\serve\search_handler.cc	/^void SearchHandler::return_response(GeneralSearchResponse* resp)$/;"	f	class:unise::SearchHandler
search	ju-seatch\unise\serve\search_handler.cc	/^void SearchHandler::search(const GeneralSearchRequest* request,$/;"	f	class:unise::SearchHandler
unise	ju-seatch\unise\serve\search_handler.cc	/^namespace unise {$/;"	n	file:
~SearchHandler	ju-seatch\unise\serve\search_handler.cc	/^SearchHandler::~SearchHandler() {$/;"	f	class:unise::SearchHandler
init	ju-seatch\unise\serve\search_handler_helper.cc	/^bool SearchHandlerHelper::init(uint32_t num)$/;"	f	class:unise::SearchHandlerHelper
unise	ju-seatch\unise\serve\search_handler_helper.cc	/^namespace unise$/;"	n	file:
~SearchHandlerHelper	ju-seatch\unise\serve\search_handler_helper.cc	/^SearchHandlerHelper::~SearchHandlerHelper()$/;"	f	class:unise::SearchHandlerHelper
SearchHandlerHelper	ju-seatch\unise\serve\search_handler_helper.h	/^    SearchHandlerHelper() : _org_size(0) {}$/;"	f	class:unise::SearchHandlerHelper
SearchHandlerHelper	ju-seatch\unise\serve\search_handler_helper.h	/^class SearchHandlerHelper$/;"	c	namespace:unise
__SEARCH_HANDLER_HELPER_H_	ju-seatch\unise\serve\search_handler_helper.h	21;"	d
_org_size	ju-seatch\unise\serve\search_handler_helper.h	/^    uint32_t _org_size;       \/**< 队列大小       *\/$/;"	m	class:unise::SearchHandlerHelper
_responses	ju-seatch\unise\serve\search_handler_helper.h	/^    std::queue<GeneralSearchResponse*> _responses;        \/**< response对象队列       *\/$/;"	m	class:unise::SearchHandlerHelper
get_org_size	ju-seatch\unise\serve\search_handler_helper.h	/^    uint32_t get_org_size() $/;"	f	class:unise::SearchHandlerHelper
pop_response	ju-seatch\unise\serve\search_handler_helper.h	/^    GeneralSearchResponse* pop_response() $/;"	f	class:unise::SearchHandlerHelper
push_response	ju-seatch\unise\serve\search_handler_helper.h	/^    void push_response(GeneralSearchResponse* resp) $/;"	f	class:unise::SearchHandlerHelper
unise	ju-seatch\unise\serve\search_handler_helper.h	/^namespace unise$/;"	n
SERVE_SERVE_IMPL_H_	ju-seatch\unise\serve\serve_impl.h	2;"	d
Search	ju-seatch\unise\serve\serve_impl.h	/^    virtual void Search(::google::protobuf::RpcController* controller,$/;"	f	class:ServeImpl
ServeImpl	ju-seatch\unise\serve\serve_impl.h	/^    ServeImpl(unise::SearchEngine * search_engine)$/;"	f	class:ServeImpl
ServeImpl	ju-seatch\unise\serve\serve_impl.h	/^class ServeImpl : public unise::UniseService$/;"	c
search_engine_	ju-seatch\unise\serve\serve_impl.h	/^    unise::SearchEngine * search_engine_;$/;"	m	class:ServeImpl
~ServeImpl	ju-seatch\unise\serve\serve_impl.h	/^    virtual ~ServeImpl() {}$/;"	f	class:ServeImpl
VeuSearchHandler	ju-seatch\unise\serve\veu_search_handler.cc	/^VeuSearchHandler::VeuSearchHandler() : _channel_pool(NULL) {}$/;"	f	class:unise::VeuSearchHandler
exact_num_results	ju-seatch\unise\serve\veu_search_handler.cc	/^DECLARE_int32(exact_num_results);$/;"	v
get_channel_by_index	ju-seatch\unise\serve\veu_search_handler.cc	/^baidu::rpc::Channel * VeuChannelPool::get_channel_by_index(size_t i) {$/;"	f	class:unise::VeuChannelPool
init	ju-seatch\unise\serve\veu_search_handler.cc	/^bool VeuChannelPool::init(const std::vector<std::string> & service_names,$/;"	f	class:unise::VeuChannelPool
my_init	ju-seatch\unise\serve\veu_search_handler.cc	/^bool VeuSearchHandler::my_init(const comcfg::ConfigUnit& conf,$/;"	f	class:unise::VeuSearchHandler
retrieve_timeout	ju-seatch\unise\serve\veu_search_handler.cc	/^DECLARE_double(retrieve_timeout);$/;"	v
rpc_callback	ju-seatch\unise\serve\veu_search_handler.cc	/^void rpc_callback(const GeneralSearchRequest* request, GeneralSearchResponse* response, $/;"	f	namespace:unise
search_internal	ju-seatch\unise\serve\veu_search_handler.cc	/^void VeuSearchHandler::search_internal(const GeneralSearchRequest* request,$/;"	f	class:unise::VeuSearchHandler
unise	ju-seatch\unise\serve\veu_search_handler.cc	/^namespace unise$/;"	n	file:
~VeuChannelPool	ju-seatch\unise\serve\veu_search_handler.cc	/^VeuChannelPool::~VeuChannelPool() {$/;"	f	class:unise::VeuChannelPool
REGISTER_VEU_SEARCH_HANDLER	ju-seatch\unise\serve\veu_search_handler.h	124;"	d
RpcContext	ju-seatch\unise\serve\veu_search_handler.h	/^    struct RpcContext {$/;"	s	class:unise::VeuSearchHandler
VeuChannelPool	ju-seatch\unise\serve\veu_search_handler.h	/^    VeuChannelPool() : _inited(false) {}$/;"	f	class:unise::VeuChannelPool
VeuChannelPool	ju-seatch\unise\serve\veu_search_handler.h	/^class VeuChannelPool {$/;"	c	namespace:unise
VeuSearchHandler	ju-seatch\unise\serve\veu_search_handler.h	/^class VeuSearchHandler : public SearchHandler$/;"	c	namespace:unise
__VEU_SEARCH_HANDLER_H_	ju-seatch\unise\serve\veu_search_handler.h	20;"	d
_channel_pool	ju-seatch\unise\serve\veu_search_handler.h	/^    VeuChannelPool * _channel_pool;$/;"	m	class:unise::VeuSearchHandler
_hostname	ju-seatch\unise\serve\veu_search_handler.h	/^    std::string _hostname;        \/**< 主机名       *\/$/;"	m	class:unise::VeuSearchHandler
_inited	ju-seatch\unise\serve\veu_search_handler.h	/^    bool _inited;$/;"	m	class:unise::VeuChannelPool
_result_num_eu	ju-seatch\unise\serve\veu_search_handler.h	/^    int32_t _result_num_eu;$/;"	m	class:unise::VeuSearchHandler
_rpc_channel_pool	ju-seatch\unise\serve\veu_search_handler.h	/^    std::vector<baidu::rpc::Channel *> _rpc_channel_pool;$/;"	m	class:unise::VeuChannelPool
_rpc_contexts	ju-seatch\unise\serve\veu_search_handler.h	/^    boost::shared_array<RpcContext> _rpc_contexts;        \/**< rpc上下文       *\/$/;"	m	class:unise::VeuSearchHandler
_service_names	ju-seatch\unise\serve\veu_search_handler.h	/^    std::vector<std::string> _service_names;          \/**< 下游service的名字       *\/$/;"	m	class:unise::VeuSearchHandler
call_id	ju-seatch\unise\serve\veu_search_handler.h	/^        baidu::rpc::CallId call_id;$/;"	m	struct:unise::VeuSearchHandler::RpcContext
cntl	ju-seatch\unise\serve\veu_search_handler.h	/^        baidu::rpc::Controller cntl;$/;"	m	struct:unise::VeuSearchHandler::RpcContext
get_name	ju-seatch\unise\serve\veu_search_handler.h	/^    const std::string get_name() const {$/;"	f	class:unise::VeuSearchHandler
get_type	ju-seatch\unise\serve\veu_search_handler.h	/^    const std::string get_type() const {$/;"	f	class:unise::VeuSearchHandler
response	ju-seatch\unise\serve\veu_search_handler.h	/^        GeneralSearchResponse* response;          \/**< response       *\/$/;"	m	struct:unise::VeuSearchHandler::RpcContext
unise	ju-seatch\unise\serve\veu_search_handler.h	/^namespace unise {$/;"	n
unise_service_stub	ju-seatch\unise\serve\veu_search_handler.h	/^        boost::shared_ptr<UniseService_Stub> unise_service_stub;         \/**< service stub       *\/$/;"	m	struct:unise::VeuSearchHandler::RpcContext
~VeuSearchHandler	ju-seatch\unise\serve\veu_search_handler.h	/^    virtual ~VeuSearchHandler() {}$/;"	f	class:unise::VeuSearchHandler
VirtualEngineUnit	ju-seatch\unise\serve\virtual_engine_unit.cc	/^VirtualEngineUnit::VirtualEngineUnit() :$/;"	f	class:unise::VirtualEngineUnit
init	ju-seatch\unise\serve\virtual_engine_unit.cc	/^bool VirtualEngineUnit::init(const comcfg::ConfigUnit& conf)$/;"	f	class:unise::VirtualEngineUnit
init_for_search	ju-seatch\unise\serve\virtual_engine_unit.cc	/^bool VirtualEngineUnit::init_for_search()$/;"	f	class:unise::VirtualEngineUnit
search	ju-seatch\unise\serve\virtual_engine_unit.cc	/^void VirtualEngineUnit::search(GeneralSearchRequest* request, $/;"	f	class:unise::VirtualEngineUnit
unise	ju-seatch\unise\serve\virtual_engine_unit.cc	/^namespace unise$/;"	n	file:
Queue	ju-seatch\unise\serve\virtual_engine_unit.h	/^    typedef boost::lockfree::queue<VeuSearchHandler*> Queue;$/;"	t	class:unise::VirtualEngineUnit
VirtualEngineUnit	ju-seatch\unise\serve\virtual_engine_unit.h	/^class VirtualEngineUnit : public EngineUnit$/;"	c	namespace:unise
__VIRTUAL_ENGINE_UNIT_H_	ju-seatch\unise\serve\virtual_engine_unit.h	20;"	d
_eu_name	ju-seatch\unise\serve\virtual_engine_unit.h	/^    std::string _eu_name;        \/**< EU的名字       *\/$/;"	m	class:unise::VirtualEngineUnit
_eu_type	ju-seatch\unise\serve\virtual_engine_unit.h	/^    std::string _eu_type;        \/**< EU的类型       *\/$/;"	m	class:unise::VirtualEngineUnit
_inited	ju-seatch\unise\serve\virtual_engine_unit.h	/^    bool        _inited;        \/\/\/< 是否已经完成初始化$/;"	m	class:unise::VirtualEngineUnit
_service_names	ju-seatch\unise\serve\virtual_engine_unit.h	/^    std::vector<std::string> _service_names;          \/**< 下游service的名字       *\/$/;"	m	class:unise::VirtualEngineUnit
_veu_search_handler_name	ju-seatch\unise\serve\virtual_engine_unit.h	/^    std::string _veu_search_handler_name;          \/**< 所使用的VeuSearchHandler的名字       *\/$/;"	m	class:unise::VirtualEngineUnit
_veu_search_handler_num	ju-seatch\unise\serve\virtual_engine_unit.h	/^    uint32_t _veu_search_handler_num;         \/**< SearchHandler的个数       *\/$/;"	m	class:unise::VirtualEngineUnit
_veu_search_handler_queue	ju-seatch\unise\serve\virtual_engine_unit.h	/^    boost::scoped_ptr<Queue> _veu_search_handler_queue;  \/**< SerachHandler队列       *\/$/;"	m	class:unise::VirtualEngineUnit
get_name	ju-seatch\unise\serve\virtual_engine_unit.h	/^    virtual const std::string& get_name() const {$/;"	f	class:unise::VirtualEngineUnit
get_type	ju-seatch\unise\serve\virtual_engine_unit.h	/^    virtual const std::string& get_type() const {$/;"	f	class:unise::VirtualEngineUnit
inited	ju-seatch\unise\serve\virtual_engine_unit.h	/^    virtual bool inited() const {$/;"	f	class:unise::VirtualEngineUnit
unise	ju-seatch\unise\serve\virtual_engine_unit.h	/^namespace unise$/;"	n
~VirtualEngineUnit	ju-seatch\unise\serve\virtual_engine_unit.h	/^    virtual ~VirtualEngineUnit() $/;"	f	class:unise::VirtualEngineUnit
conf_fname	ju-seatch\unise\serve_main.cc	/^DECLARE_string(conf_fname);$/;"	v
conf_fpath	ju-seatch\unise\serve_main.cc	/^DECLARE_string(conf_fpath);$/;"	v
dump_callback	ju-seatch\unise\serve_main.cc	/^static bool dump_callback(const google_breakpad::MinidumpDescriptor& descriptor,$/;"	f	file:
g_signal_quit	ju-seatch\unise\serve_main.cc	/^static bool g_signal_quit = false;$/;"	v	file:
main	ju-seatch\unise\serve_main.cc	/^int main(int argc, char *argv[]) {$/;"	f
on_exit	ju-seatch\unise\serve_main.cc	/^void on_exit(int signum)$/;"	f
conf_fname	ju-seatch\unise\tools\base_index_generator.cc	/^DECLARE_string(conf_fname);$/;"	v
conf_fpath	ju-seatch\unise\tools\base_index_generator.cc	/^DECLARE_string(conf_fpath);$/;"	v
main	ju-seatch\unise\tools\base_index_generator.cc	/^int main(int argc, char *argv[])$/;"	f
AslWordseg	ju-seatch\unise\unise\asl_wordseg.h	/^    AslWordseg(): _seg_dict(NULL), _ucode_init_succ(false) {$/;"	f	class:unise::AslWordseg
AslWordseg	ju-seatch\unise\unise\asl_wordseg.h	/^class AslWordseg {$/;"	c	namespace:unise
UNISE_ASL_WORDSEG_H	ju-seatch\unise\unise\asl_wordseg.h	2;"	d
_handle_map	ju-seatch\unise\unise\asl_wordseg.h	/^    bsl::phashmap<pthread_t, scw_out_t*> _handle_map;$/;"	m	class:unise::AslWordseg
_lock	ju-seatch\unise\unise\asl_wordseg.h	/^    pthread_mutex_t                 _lock;$/;"	m	class:unise::AslWordseg
_seg_dict	ju-seatch\unise\unise\asl_wordseg.h	/^    scw_worddict_t                * _seg_dict;        \/\/\/< 打开后的词典指针$/;"	m	class:unise::AslWordseg
_ucode_init_succ	ju-seatch\unise\unise\asl_wordseg.h	/^    bool                         _ucode_init_succ;    \/\/\/< ucode加载词典成功$/;"	m	class:unise::AslWordseg
get_dict	ju-seatch\unise\unise\asl_wordseg.h	/^    scw_worddict_t * get_dict() {$/;"	f	class:unise::AslWordseg
get_handle	ju-seatch\unise\unise\asl_wordseg.h	/^    scw_out_t * get_handle(unsigned int tsize = 1024, int type = SCW_OUT_ALL|SCW_OUT_PROP) {$/;"	f	class:unise::AslWordseg
unise	ju-seatch\unise\unise\asl_wordseg.h	/^namespace unise {$/;"	n
~AslWordseg	ju-seatch\unise\unise\asl_wordseg.h	/^    ~AslWordseg() {$/;"	f	class:unise::AslWordseg
ANNOTATION_ID_MAX	ju-seatch\unise\unise\base.h	/^const AnnotationId ANNOTATION_ID_MAX = static_cast<AnnotationId>(-1) - 1;$/;"	m	namespace:unise
ANNOTATION_SIZE_MAX	ju-seatch\unise\unise\base.h	/^const uint32_t ANNOTATION_SIZE_MAX = 409600;$/;"	m	namespace:unise
AnnotationId	ju-seatch\unise\unise\base.h	/^typedef uint16_t AnnotationId;$/;"	t	namespace:unise
BASE_DATA	ju-seatch\unise\unise\base.h	/^enum data_t { BASE_DATA = 0, INC_DATA };$/;"	e	enum:unise::data_t
DAS_SEP	ju-seatch\unise\unise\base.h	/^const char DAS_SEP = '\\t'; \/\/ TODO: 使用das的info信息，自动获取分隔符$/;"	m	namespace:unise
DEFAULT_SAMPLE_ID	ju-seatch\unise\unise\base.h	/^const uint64_t DEFAULT_SAMPLE_ID = 0ULL;$/;"	m	namespace:unise
DOCID_MIN	ju-seatch\unise\unise\base.h	/^const DocId DOCID_MIN = 0;$/;"	m	namespace:unise
DocId	ju-seatch\unise\unise\base.h	/^typedef uint64_t DocId;$/;"	t	namespace:unise
FORWARD_MAGIC	ju-seatch\unise\unise\base.h	/^const uint32_t FORWARD_MAGIC = 0x19860630;$/;"	m	namespace:unise
ILLEGAL_ANNOTATION_ID	ju-seatch\unise\unise\base.h	/^const AnnotationId ILLEGAL_ANNOTATION_ID = static_cast<AnnotationId>(-1);$/;"	m	namespace:unise
ILLEGAL_DOCID	ju-seatch\unise\unise\base.h	/^const DocId ILLEGAL_DOCID = static_cast<DocId>(-1);$/;"	m	namespace:unise
ILLEGAL_LEVEL_ID	ju-seatch\unise\unise\base.h	/^const size_t ILLEGAL_LEVEL_ID = 0x7fffffff;$/;"	m	namespace:unise
ILLEGAL_POS	ju-seatch\unise\unise\base.h	/^const int32_t ILLEGAL_POS = 0x7fffffff;$/;"	m	namespace:unise
ILLEGAL_SCORE	ju-seatch\unise\unise\base.h	/^const int32_t ILLEGAL_SCORE = -1;$/;"	m	namespace:unise
ILLEGAL_SECTION_ID	ju-seatch\unise\unise\base.h	/^const SectionId ILLEGAL_SECTION_ID = static_cast<SectionId>(-1);$/;"	m	namespace:unise
ILLEGAL_TOKEN_ID	ju-seatch\unise\unise\base.h	/^const TokenId ILLEGAL_TOKEN_ID = static_cast<TokenId>(-1);$/;"	m	namespace:unise
INC_DATA	ju-seatch\unise\unise\base.h	/^enum data_t { BASE_DATA = 0, INC_DATA };$/;"	e	enum:unise::data_t
INVERTED_MAGIC	ju-seatch\unise\unise\base.h	/^const uint32_t INVERTED_MAGIC = 0x20120706;$/;"	m	namespace:unise
MAX_EVENT_ID	ju-seatch\unise\unise\base.h	/^const uint32_t MAX_EVENT_ID = static_cast<uint32_t>(-1);$/;"	m	namespace:unise
RESULT_ACCEPTED	ju-seatch\unise\unise\base.h	/^    RESULT_ACCEPTED = 0,           \/\/ accepted currently$/;"	e	enum:unise::result_status_t
RESULT_FILTED_EARLY	ju-seatch\unise\unise\base.h	/^    RESULT_FILTED_EARLY = 5,       \/\/ filted by ealry filter$/;"	e	enum:unise::result_status_t
RESULT_FILTED_FINAL	ju-seatch\unise\unise\base.h	/^    RESULT_FILTED_FINAL = 7,       \/\/ filted by final filter$/;"	e	enum:unise::result_status_t
RESULT_FILTED_LATER	ju-seatch\unise\unise\base.h	/^    RESULT_FILTED_LATER = 6,       \/\/ filted by later filter$/;"	e	enum:unise::result_status_t
RESULT_INVALID	ju-seatch\unise\unise\base.h	/^    RESULT_INVALID = 4,            \/\/ invalid result$/;"	e	enum:unise::result_status_t
RESULT_REJECTED_DUPLICATE	ju-seatch\unise\unise\base.h	/^    RESULT_REJECTED_DUPLICATE = 3, \/\/ replaced by others$/;"	e	enum:unise::result_status_t
RESULT_REJECTED_LOW_SCORE	ju-seatch\unise\unise\base.h	/^    RESULT_REJECTED_LOW_SCORE = 2,$/;"	e	enum:unise::result_status_t
RESULT_REPLACE	ju-seatch\unise\unise\base.h	/^    RESULT_REPLACE = 1,            \/\/ replace others$/;"	e	enum:unise::result_status_t
SCORE_MAX	ju-seatch\unise\unise\base.h	/^const int32_t SCORE_MAX = 0x7fffffff;$/;"	m	namespace:unise
SECTION_ID_MAX	ju-seatch\unise\unise\base.h	/^const SectionId SECTION_ID_MAX = static_cast<SectionId>(-1) - 1;$/;"	m	namespace:unise
SectionId	ju-seatch\unise\unise\base.h	/^typedef uint8_t SectionId;$/;"	t	namespace:unise
TOKEN_SEP	ju-seatch\unise\unise\base.h	/^const std::string TOKEN_SEP = "__";$/;"	m	namespace:unise
TRIM_LETTERS	ju-seatch\unise\unise\base.h	/^const std::string TRIM_LETTERS = " .,:;[]{}_!";$/;"	m	namespace:unise
TokenId	ju-seatch\unise\unise\base.h	/^typedef uint64_t TokenId;$/;"	t	namespace:unise
UDEBUG	ju-seatch\unise\unise\base.h	44;"	d
UDEBUG	ju-seatch\unise\unise\base.h	46;"	d
UFATAL	ju-seatch\unise\unise\base.h	31;"	d
UINFO	ju-seatch\unise\unise\base.h	26;"	d
UNISE_BASE_H	ju-seatch\unise\unise\base.h	4;"	d
UNOTICE	ju-seatch\unise\unise\base.h	37;"	d
UTRACE	ju-seatch\unise\unise\base.h	40;"	d
UWARNING	ju-seatch\unise\unise\base.h	34;"	d
WORD_SEP	ju-seatch\unise\unise\base.h	/^const std::string WORD_SEP = " .,:;[]{}_!";$/;"	m	namespace:unise
annotation_id	ju-seatch\unise\unise\base.h	/^    AnnotationId annotation_id;$/;"	m	struct:unise::doc_token_hit_t
das_inc_record_t	ju-seatch\unise\unise\base.h	/^struct das_inc_record_t {$/;"	s	namespace:unise
data_t	ju-seatch\unise\unise\base.h	/^enum data_t { BASE_DATA = 0, INC_DATA };$/;"	g	namespace:unise
doc_hit_t	ju-seatch\unise\unise\base.h	/^struct doc_hit_t {$/;"	s	namespace:unise
doc_info_t	ju-seatch\unise\unise\base.h	/^struct doc_info_t {$/;"	s	namespace:unise
doc_token_hit_t	ju-seatch\unise\unise\base.h	/^struct doc_token_hit_t {$/;"	s	namespace:unise
docid	ju-seatch\unise\unise\base.h	/^    DocId docid;                   \/\/\/< 检索到的fact doc的docid$/;"	m	struct:unise::doc_info_t
docid	ju-seatch\unise\unise\base.h	/^    DocId docid;  \/\/ second rank$/;"	m	struct:unise::doc_hit_t
dynamic_score_t	ju-seatch\unise\unise\base.h	/^typedef int64_t dynamic_score_t;$/;"	t	namespace:unise
event_id	ju-seatch\unise\unise\base.h	/^    uint32_t event_id;             \/\/ the event id of das inc$/;"	m	struct:unise::das_inc_record_t
event_id	ju-seatch\unise\unise\base.h	/^    uint32_t event_id;$/;"	m	struct:unise::event_info_t
event_info_t	ju-seatch\unise\unise\base.h	/^    event_info_t() : type(BASE_DATA), event_id(MAX_EVENT_ID), level_id(ILLEGAL_LEVEL_ID) {}$/;"	f	struct:unise::event_info_t
event_info_t	ju-seatch\unise\unise\base.h	/^struct event_info_t {$/;"	s	namespace:unise
fact_doc	ju-seatch\unise\unise\base.h	/^    const FactDoc * fact_doc;      \/\/\/< 当前doc的fact_doc指针$/;"	m	struct:unise::doc_info_t
filter_flag	ju-seatch\unise\unise\base.h	/^    uint8_t filter_flag;           \/\/\/< 过滤位，表示FilterRelationShip的状态$/;"	m	struct:unise::doc_info_t
forward_index	ju-seatch\unise\unise\base.h	/^    ForwardIndex * forward_index;  \/\/\/< 当前doc的正排指针$/;"	m	struct:unise::doc_info_t
from_id	ju-seatch\unise\unise\base.h	/^    uint32_t from_id;              \/\/ the record's source, from das, not use here$/;"	m	struct:unise::das_inc_record_t
level_id	ju-seatch\unise\unise\base.h	/^    uint32_t level_id;             \/\/ the das level$/;"	m	struct:unise::das_inc_record_t
level_id	ju-seatch\unise\unise\base.h	/^    uint32_t level_id;$/;"	m	struct:unise::event_info_t
op_id	ju-seatch\unise\unise\base.h	/^    uint32_t op_id;                \/\/ 0-add, 1-delete, 2-delete-and-add$/;"	m	struct:unise::das_inc_record_t
operator <	ju-seatch\unise\unise\base.h	/^    bool operator<(const doc_hit_t & b) const {$/;"	f	struct:unise::doc_hit_t
operator <	ju-seatch\unise\unise\base.h	/^    bool operator<(const doc_info_t & b) const {$/;"	f	struct:unise::doc_info_t
operator ==	ju-seatch\unise\unise\base.h	/^    bool operator==(const doc_hit_t & b) const {$/;"	f	struct:unise::doc_hit_t
operator ==	ju-seatch\unise\unise\base.h	/^    bool operator==(const doc_info_t & b) const {$/;"	f	struct:unise::doc_info_t
other	ju-seatch\unise\unise\base.h	/^    std::string other;             \/\/ other info of the line, useful to add operation$/;"	m	struct:unise::das_inc_record_t
pos	ju-seatch\unise\unise\base.h	/^    int32_t pos;$/;"	m	struct:unise::doc_token_hit_t
reset	ju-seatch\unise\unise\base.h	/^    void reset() {$/;"	f	struct:unise::doc_hit_t
result_status_t	ju-seatch\unise\unise\base.h	/^enum result_status_t {$/;"	g	namespace:unise
score	ju-seatch\unise\unise\base.h	/^    int32_t score;                 \/\/\/< 当前doc的分数$/;"	m	struct:unise::doc_info_t
score	ju-seatch\unise\unise\base.h	/^    int32_t score;  \/\/ first rank$/;"	m	struct:unise::doc_hit_t
section_id	ju-seatch\unise\unise\base.h	/^    SectionId section_id;$/;"	m	struct:unise::doc_token_hit_t
set_max	ju-seatch\unise\unise\base.h	/^    void set_max() {$/;"	f	struct:unise::doc_hit_t
set_min	ju-seatch\unise\unise\base.h	/^    void set_min() {$/;"	f	struct:unise::doc_hit_t
type	ju-seatch\unise\unise\base.h	/^    data_t type;$/;"	m	struct:unise::event_info_t
unise	ju-seatch\unise\unise\base.h	/^namespace unise$/;"	n
DISALLOW_IMPLICIT_CONSTRUCTORS	ju-seatch\unise\unise\basictypes.h	24;"	d
DO_NOT_TAKE_OWNERSHIP	ju-seatch\unise\unise\basictypes.h	/^    DO_NOT_TAKE_OWNERSHIP,$/;"	e	enum:Ownership
MetatagId	ju-seatch\unise\unise\basictypes.h	/^typedef uint32_t MetatagId;$/;"	t
Ownership	ju-seatch\unise\unise\basictypes.h	/^enum Ownership {$/;"	g
TAKE_OWNERSHIP	ju-seatch\unise\unise\basictypes.h	/^    TAKE_OWNERSHIP$/;"	e	enum:Ownership
UNISE_BASICTYPES_H	ju-seatch\unise\unise\basictypes.h	2;"	d
UNISE_DEPRECATED	ju-seatch\unise\unise\basictypes.h	31;"	d
unise	ju-seatch\unise\unise\basictypes.h	/^namespace unise$/;"	n
CR	ju-seatch\unise\unise\boost_wrap.h	13;"	d
CR	ju-seatch\unise\unise\boost_wrap.h	22;"	d
CR_CONFLICTED	ju-seatch\unise\unise\boost_wrap.h	12;"	d
CR_CONFLICTED	ju-seatch\unise\unise\boost_wrap.h	23;"	d
UNISE_BOOST_WRAP_H	ju-seatch\unise\unise\boost_wrap.h	6;"	d
MemberSignature	ju-seatch\unise\unise\callback.h	/^    typedef R(T::*MemberSignature)(Arg1, Arg2);$/;"	t	class:unise::internal::_MemberResultCallback_0_2
NewCallback	ju-seatch\unise\unise\callback.h	/^NewCallback(T1* obj, R(T2::*member)(Arg1, Arg2))$/;"	f	namespace:unise
NewCallback	ju-seatch\unise\unise\callback.h	/^NewCallback(const T1* obj, R(T2::*member)(Arg1, Arg2) const)$/;"	f	namespace:unise
NewPermanentCallback	ju-seatch\unise\unise\callback.h	/^NewPermanentCallback(T1* obj, R(T2::*member)(Arg1, Arg2))$/;"	f	namespace:unise
NewPermanentCallback	ju-seatch\unise\unise\callback.h	/^NewPermanentCallback(const T1* obj, R(T2::*member)(Arg1, Arg2) const)$/;"	f	namespace:unise
ResultCallback2	ju-seatch\unise\unise\callback.h	/^    ResultCallback2() {}$/;"	f	class:unise::ResultCallback2
ResultCallback2	ju-seatch\unise\unise\callback.h	/^class ResultCallback2$/;"	c	namespace:unise
Run	ju-seatch\unise\unise\callback.h	/^    virtual R Run(Arg1 arg1, Arg2 arg2) {$/;"	f	class:unise::internal::_ConstMemberResultCallback_0_2
Run	ju-seatch\unise\unise\callback.h	/^    virtual R Run(Arg1 arg1, Arg2 arg2) {$/;"	f	class:unise::internal::_MemberResultCallback_0_2
UTIL_CALLBACK_H_	ju-seatch\unise\unise\callback.h	64;"	d
_ConstMemberResultCallback_0_2	ju-seatch\unise\unise\callback.h	/^    inline _ConstMemberResultCallback_0_2(const T* object, MemberSignature member)$/;"	f	class:unise::internal::_ConstMemberResultCallback_0_2
_ConstMemberResultCallback_0_2	ju-seatch\unise\unise\callback.h	/^class _ConstMemberResultCallback_0_2 : public ResultCallback2<R, Arg1, Arg2>$/;"	c	namespace:unise::internal
_MemberResultCallback_0_2	ju-seatch\unise\unise\callback.h	/^    inline _MemberResultCallback_0_2(T* object, MemberSignature member)$/;"	f	class:unise::internal::_MemberResultCallback_0_2
_MemberResultCallback_0_2	ju-seatch\unise\unise\callback.h	/^class _MemberResultCallback_0_2 : public ResultCallback2<R, Arg1, Arg2>$/;"	c	namespace:unise::internal
base	ju-seatch\unise\unise\callback.h	/^    typedef ResultCallback2<R, Arg1, Arg2> base;$/;"	t	class:unise::internal::_ConstMemberResultCallback_0_2
base	ju-seatch\unise\unise\callback.h	/^    typedef ResultCallback2<R, Arg1, Arg2> base;$/;"	t	class:unise::internal::_MemberResultCallback_0_2
internal	ju-seatch\unise\unise\callback.h	/^namespace internal$/;"	n	namespace:unise
member_	ju-seatch\unise\unise\callback.h	/^    MemberSignature member_;$/;"	m	class:unise::internal::_ConstMemberResultCallback_0_2
member_	ju-seatch\unise\unise\callback.h	/^    MemberSignature member_;$/;"	m	class:unise::internal::_MemberResultCallback_0_2
object_	ju-seatch\unise\unise\callback.h	/^    T* object_;$/;"	m	class:unise::internal::_MemberResultCallback_0_2
object_	ju-seatch\unise\unise\callback.h	/^    const T* object_;$/;"	m	class:unise::internal::_ConstMemberResultCallback_0_2
unise	ju-seatch\unise\unise\callback.h	/^namespace unise$/;"	n
~ResultCallback2	ju-seatch\unise\unise\callback.h	/^    virtual ~ResultCallback2() {}$/;"	f	class:unise::ResultCallback2
ClusterDataSet	ju-seatch\unise\unise\cluster_template.h	/^        explicit ClusterDataSet(const Data& first_data, size_t MaxNumPerKey)$/;"	f	class:unise::ClusterTemplate::ClusterDataSet
ClusterDataSet	ju-seatch\unise\unise\cluster_template.h	/^    class ClusterDataSet$/;"	c	class:unise::ClusterTemplate
ClusterTemplate	ju-seatch\unise\unise\cluster_template.h	/^    explicit ClusterTemplate()$/;"	f	class:unise::ClusterTemplate
ClusterTemplate	ju-seatch\unise\unise\cluster_template.h	/^    explicit ClusterTemplate(Comparator* comparator)$/;"	f	class:unise::ClusterTemplate
ClusterTemplate	ju-seatch\unise\unise\cluster_template.h	/^class ClusterTemplate$/;"	c	namespace:unise
UNISE_CLUSTER_TEMPLATE_H_	ju-seatch\unise\unise\cluster_template.h	4;"	d
add	ju-seatch\unise\unise\cluster_template.h	/^    virtual cluster_status_t add(const Key& key,$/;"	f	class:unise::ClusterTemplate
cluster_result	ju-seatch\unise\unise\cluster_template.h	/^    virtual cluster_status_t cluster_result(const Key& key,$/;"	f	class:unise::ClusterTemplate
comp_	ju-seatch\unise\unise\cluster_template.h	/^    const Comparator* comp_;$/;"	m	class:unise::ClusterTemplate
data_	ju-seatch\unise\unise\cluster_template.h	/^        Data data_[Capacity];$/;"	m	class:unise::ClusterTemplate::ClusterDataSet
find	ju-seatch\unise\unise\cluster_template.h	/^        cluster_status_t find(const Key& key,$/;"	f	class:unise::ClusterTemplate::ClusterDataSet
find_worst_data_index	ju-seatch\unise\unise\cluster_template.h	/^        size_t find_worst_data_index(const Comparator * comparator) {$/;"	f	class:unise::ClusterTemplate::ClusterDataSet
get_num_data	ju-seatch\unise\unise\cluster_template.h	/^        size_t get_num_data() { return num_data_; }$/;"	f	class:unise::ClusterTemplate::ClusterDataSet
hash_cluster_	ju-seatch\unise\unise\cluster_template.h	/^    __gnu_cxx::hash_map<Key, ClusterDataSet> hash_cluster_;$/;"	m	class:unise::ClusterTemplate
max_num_per_key_	ju-seatch\unise\unise\cluster_template.h	/^        size_t max_num_per_key_;$/;"	m	class:unise::ClusterTemplate::ClusterDataSet
num_data_	ju-seatch\unise\unise\cluster_template.h	/^        size_t num_data_;$/;"	m	class:unise::ClusterTemplate::ClusterDataSet
push	ju-seatch\unise\unise\cluster_template.h	/^        cluster_status_t push(const Key& key,$/;"	f	class:unise::ClusterTemplate::ClusterDataSet
remove	ju-seatch\unise\unise\cluster_template.h	/^        bool remove(const Data& input_data) {$/;"	f	class:unise::ClusterTemplate::ClusterDataSet
remove	ju-seatch\unise\unise\cluster_template.h	/^    virtual bool remove(const Key& key, const Data& input_data) {$/;"	f	class:unise::ClusterTemplate
reset	ju-seatch\unise\unise\cluster_template.h	/^    virtual void reset() { hash_cluster_.clear(); }$/;"	f	class:unise::ClusterTemplate
set_comparator	ju-seatch\unise\unise\cluster_template.h	/^    void set_comparator(const Comparator* comparator) { comp_ = comparator; }$/;"	f	class:unise::ClusterTemplate
unise	ju-seatch\unise\unise\cluster_template.h	/^namespace unise$/;"	n
~ClusterTemplate	ju-seatch\unise\unise\cluster_template.h	/^    virtual ~ClusterTemplate() {}$/;"	f	class:unise::ClusterTemplate
Comparator	ju-seatch\unise\unise\comparator.h	/^    Comparator() {}$/;"	f	class:unise::Comparator
Comparator	ju-seatch\unise\unise\comparator.h	/^class Comparator : public UnisePlugin {$/;"	c	namespace:unise
REGISTER_COMPARATOR	ju-seatch\unise\unise\comparator.h	49;"	d
UNISE_COMPARATOR_H_	ju-seatch\unise\unise\comparator.h	4;"	d
init_for_search	ju-seatch\unise\unise\comparator.h	/^    virtual void init_for_search(const GeneralSearchRequest* request,$/;"	f	class:unise::Comparator
unise	ju-seatch\unise\unise\comparator.h	/^namespace unise {$/;"	n
~Comparator	ju-seatch\unise\unise\comparator.h	/^    virtual ~Comparator() {}$/;"	f	class:unise::Comparator
DELAY_MAX	ju-seatch\unise\unise\delay_callback.h	/^    static const long DELAY_MAX = 3600000;  \/\/\/< 最多支持延时多少毫秒$/;"	m	class:unise::DelayedEnv
DELAY_UNIT	ju-seatch\unise\unise\delay_callback.h	/^    static const long DELAY_UNIT = 100;      \/\/\/< 指数增长的时间单位$/;"	m	class:unise::DelayedEnv
DelayCallbackThread	ju-seatch\unise\unise\delay_callback.h	/^    DelayCallbackThread() :$/;"	f	class:unise::DelayCallbackThread
DelayCallbackThread	ju-seatch\unise\unise\delay_callback.h	/^class DelayCallbackThread : public Thread$/;"	c	namespace:unise
DelayedEnv	ju-seatch\unise\unise\delay_callback.h	/^    DelayedEnv() : _frozen(false) {$/;"	f	class:unise::DelayedEnv
DelayedEnv	ju-seatch\unise\unise\delay_callback.h	/^class DelayedEnv$/;"	c	namespace:unise
UNISE_DELAY_CALLBACK_H_	ju-seatch\unise\unise\delay_callback.h	4;"	d
_delay_env	ju-seatch\unise\unise\delay_callback.h	/^    DelayedEnv * _delay_env;$/;"	m	class:unise::DelayCallbackThread
_frozen	ju-seatch\unise\unise\delay_callback.h	/^    bool _frozen;  \/\/\/< 回调队列被冻结，不允许再添加新的回调$/;"	m	class:unise::DelayedEnv
_ltcb_vec	ju-seatch\unise\unise\delay_callback.h	/^    std::vector<boost::shared_ptr<LazyTimedJobs> >     _ltcb_vec;   \/\/\/< 延时回调级别向量$/;"	m	class:unise::DelayedEnv
_stop	ju-seatch\unise\unise\delay_callback.h	/^    bool _stop;$/;"	m	class:unise::DelayCallbackThread
add_callback	ju-seatch\unise\unise\delay_callback.h	/^    bool add_callback(Closure * closure, long min_delay_ms = 15000) {$/;"	f	class:unise::DelayedEnv
execute_callback	ju-seatch\unise\unise\delay_callback.h	/^    size_t execute_callback() {$/;"	f	class:unise::DelayedEnv
execute_callback_now	ju-seatch\unise\unise\delay_callback.h	/^    size_t execute_callback_now() {$/;"	f	class:unise::DelayedEnv
run	ju-seatch\unise\unise\delay_callback.h	/^    virtual int run()$/;"	f	class:unise::DelayCallbackThread
stop	ju-seatch\unise\unise\delay_callback.h	/^    void stop() { _stop = true; }$/;"	f	class:unise::DelayCallbackThread
unise	ju-seatch\unise\unise\delay_callback.h	/^namespace unise$/;"	n
~DelayCallbackThread	ju-seatch\unise\unise\delay_callback.h	/^    virtual ~DelayCallbackThread() {$/;"	f	class:unise::DelayCallbackThread
~DelayedEnv	ju-seatch\unise\unise\delay_callback.h	/^    ~DelayedEnv() {$/;"	f	class:unise::DelayedEnv
DelayedJobs	ju-seatch\unise\unise\delayed.h	/^class DelayedJobs : public ::boost::noncopyable {$/;"	c	namespace:unise
LazyTimedJobs	ju-seatch\unise\unise\delayed.h	/^class LazyTimedJobs : public DelayedJobs {$/;"	c	namespace:unise
UNISE_DELAYED_H	ju-seatch\unise\unise\delayed.h	2;"	d
_cb_queue	ju-seatch\unise\unise\delayed.h	/^    boost::lockfree::queue<Closure *> _cb_queue;    \/\/\/< 回调任务的队列，无锁结构$/;"	m	class:unise::DelayedJobs
_last_tick	ju-seatch\unise\unise\delayed.h	/^    boost::posix_time::ptime    _last_tick;         \/\/\/< 上一次执行 tick 的时间$/;"	m	class:unise::LazyTimedJobs
_tick_in_ms	ju-seatch\unise\unise\delayed.h	/^    long                        _tick_in_ms;        \/\/\/< 每次 tick 的时间长度，以ms为单位$/;"	m	class:unise::LazyTimedJobs
unise	ju-seatch\unise\unise\delayed.h	/^namespace unise {$/;"	n
Annotation	ju-seatch\unise\unise\dimension_doc.h	/^struct Annotation {$/;"	s	namespace:unise
DimensionDoc	ju-seatch\unise\unise\dimension_doc.h	/^    DimensionDoc() {}$/;"	f	class:unise::DimensionDoc
DimensionDoc	ju-seatch\unise\unise\dimension_doc.h	/^class DimensionDoc {$/;"	c	namespace:unise
UNISE_DIMENSION_DOC_H_	ju-seatch\unise\unise\dimension_doc.h	4;"	d
annotations	ju-seatch\unise\unise\dimension_doc.h	/^    std::vector<Annotation> annotations;   \/\/\/< 为了使用方便，采用public$/;"	m	class:unise::DimensionDoc
id	ju-seatch\unise\unise\dimension_doc.h	/^    AnnotationId id;        \/\/\/< 取值范围，参见unise\/base.h的类型定义$/;"	m	struct:unise::Annotation
number_value	ju-seatch\unise\unise\dimension_doc.h	/^    int64_t number_value;   \/\/\/< 数字类型，只支持int64类型$/;"	m	struct:unise::Annotation
operator <	ju-seatch\unise\unise\dimension_doc.h	/^    bool operator<(const Annotation & b) const {$/;"	f	struct:unise::Annotation
operator ==	ju-seatch\unise\unise\dimension_doc.h	/^    bool operator==(const Annotation & b) const {$/;"	f	struct:unise::Annotation
serialize	ju-seatch\unise\unise\dimension_doc.h	/^        void serialize(Archive &ar, const unsigned int version) { $/;"	f	class:unise::DimensionDoc
serialize	ju-seatch\unise\unise\dimension_doc.h	/^        void serialize(Archive& ar, const unsigned int version) {$/;"	f	struct:unise::Annotation
text_value	ju-seatch\unise\unise\dimension_doc.h	/^    std::string text_value; \/\/\/< 注意编码必须是UTF-8$/;"	m	struct:unise::Annotation
unise	ju-seatch\unise\unise\dimension_doc.h	/^namespace unise {$/;"	n
~DimensionDoc	ju-seatch\unise\unise\dimension_doc.h	/^    virtual ~DimensionDoc() {}$/;"	f	class:unise::DimensionDoc
DocFactory	ju-seatch\unise\unise\doc_factory.h	/^    DocFactory() {}$/;"	f	class:unise::DocFactory
DocFactory	ju-seatch\unise\unise\doc_factory.h	/^class DocFactory$/;"	c	namespace:unise
REGISTER_DOC_FACTORY	ju-seatch\unise\unise\doc_factory.h	175;"	d
UNISE_DOC_FACTORY_H	ju-seatch\unise\unise\doc_factory.h	4;"	d
_event_info	ju-seatch\unise\unise\doc_factory.h	/^    event_info_t _event_info;$/;"	m	class:unise::DocFactory
comcfg	ju-seatch\unise\unise\doc_factory.h	/^namespace comcfg {$/;"	n
deserialize	ju-seatch\unise\unise\doc_factory.h	/^    virtual bool deserialize(std::vector<DimensionDoc *> * dimension_docs) {$/;"	f	class:unise::DocFactory
get_event_info	ju-seatch\unise\unise\doc_factory.h	/^    const event_info_t* get_event_info() const {$/;"	f	class:unise::DocFactory
on_delete_event	ju-seatch\unise\unise\doc_factory.h	/^    virtual void on_delete_event(DimensionDoc * doc)$/;"	f	class:unise::DocFactory
serialize	ju-seatch\unise\unise\doc_factory.h	/^    virtual bool serialize(const std::vector<const DimensionDoc *> & dimension_docs) {$/;"	f	class:unise::DocFactory
set_event_info	ju-seatch\unise\unise\doc_factory.h	/^    void set_event_info(const event_info_t& event_info) {$/;"	f	class:unise::DocFactory
unise	ju-seatch\unise\unise\doc_factory.h	/^namespace unise$/;"	n
~DocFactory	ju-seatch\unise\unise\doc_factory.h	/^    virtual ~DocFactory() {}$/;"	f	class:unise::DocFactory
EngineUnit	ju-seatch\unise\unise\engine_unit.h	/^    EngineUnit() {}$/;"	f	class:unise::EngineUnit
EngineUnit	ju-seatch\unise\unise\engine_unit.h	/^class EngineUnit {$/;"	c	namespace:unise
REGISTER_ENGINEUNIT	ju-seatch\unise\unise\engine_unit.h	122;"	d
UNISE_ENGINE_UNIT_H_	ju-seatch\unise\unise\engine_unit.h	4;"	d
comcfg	ju-seatch\unise\unise\engine_unit.h	/^namespace comcfg {$/;"	n
get_forward_index	ju-seatch\unise\unise\engine_unit.h	/^    virtual const ForwardIndex * get_forward_index(DocId docid) const {$/;"	f	class:unise::EngineUnit
is_initing	ju-seatch\unise\unise\engine_unit.h	/^    virtual bool is_initing() const {$/;"	f	class:unise::EngineUnit
unise	ju-seatch\unise\unise\engine_unit.h	/^namespace unise {$/;"	n
~EngineUnit	ju-seatch\unise\unise\engine_unit.h	/^    virtual ~EngineUnit() {}$/;"	f	class:unise::EngineUnit
FactDoc	ju-seatch\unise\unise\fact_doc.h	/^    FactDoc() {}$/;"	f	class:unise::FactDoc
FactDoc	ju-seatch\unise\unise\fact_doc.h	/^class FactDoc : public DimensionDoc {$/;"	c	namespace:unise
UNISE_FACT_DOC_H_	ju-seatch\unise\unise\fact_doc.h	6;"	d
serialize	ju-seatch\unise\unise\fact_doc.h	/^        void serialize(Archive &ar, const unsigned int version) { $/;"	f	class:unise::FactDoc
unise	ju-seatch\unise\unise\fact_doc.h	/^namespace unise {$/;"	n
~FactDoc	ju-seatch\unise\unise\fact_doc.h	/^    virtual ~FactDoc() {}$/;"	f	class:unise::FactDoc
Any	ju-seatch\unise\unise\factory.h	/^    Any() : _var_ptr(NULL) {}$/;"	f	class:unise::Any
Any	ju-seatch\unise\unise\factory.h	/^    Any(const Any &other) : _var_ptr(other._var_ptr ? other._var_ptr->clone() : NULL) {}$/;"	f	class:unise::Any
Any	ju-seatch\unise\unise\factory.h	/^    Any(const T &value) : _var_ptr(new Type<T>(value)) {}$/;"	f	class:unise::Any
Any	ju-seatch\unise\unise\factory.h	/^class Any$/;"	c	namespace:unise
BaseClassMap	ju-seatch\unise\unise\factory.h	/^typedef std::map<std::string, FactoryMap> BaseClassMap;$/;"	t	namespace:unise
ConcreteFactory	ju-seatch\unise\unise\factory.h	/^struct ConcreteFactory {$/;"	s	namespace:unise
FactoryIntf	ju-seatch\unise\unise\factory.h	/^    typedef Any(*FactoryIntf)();$/;"	t	struct:unise::ConcreteFactory
FactoryMap	ju-seatch\unise\unise\factory.h	/^typedef std::map<std::string, ConcreteFactory> FactoryMap;$/;"	t	namespace:unise
REGISTER_CLASS	ju-seatch\unise\unise\factory.h	154;"	d
REGISTER_FACTORY	ju-seatch\unise\unise\factory.h	107;"	d
Type	ju-seatch\unise\unise\factory.h	/^        explicit Type(const T &value) : _var(value) {}$/;"	f	class:unise::Any::Type
Type	ju-seatch\unise\unise\factory.h	/^    class Type : public Typeless$/;"	c	class:unise::Any
Typeless	ju-seatch\unise\unise\factory.h	/^    class Typeless$/;"	c	class:unise::Any
UNISE_FACTORY_H_	ju-seatch\unise\unise\factory.h	36;"	d
_var	ju-seatch\unise\unise\factory.h	/^        T _var;             \/\/\/< The real variable of a specific type$/;"	m	class:unise::Any::Type
_var_ptr	ju-seatch\unise\unise\factory.h	/^    Typeless *_var_ptr;     \/\/\/< Typeless variable pointer$/;"	m	class:unise::Any
any_cast	ju-seatch\unise\unise\factory.h	/^    T *any_cast() {$/;"	f	class:unise::Any
clone	ju-seatch\unise\unise\factory.h	/^        virtual Typeless *clone() const {$/;"	f	class:unise::Any::Type
get_instance	ju-seatch\unise\unise\factory.h	/^    FactoryIntf  get_instance;      \/\/\/< Function pointer to get instance$/;"	m	struct:unise::ConcreteFactory
get_singleton	ju-seatch\unise\unise\factory.h	/^    FactoryIntf  get_singleton;     \/\/\/< Function pointer to get singleton$/;"	m	struct:unise::ConcreteFactory
unise	ju-seatch\unise\unise\factory.h	/^namespace unise$/;"	n
~Any	ju-seatch\unise\unise\factory.h	/^    ~Any() {$/;"	f	class:unise::Any
~Typeless	ju-seatch\unise\unise\factory.h	/^        virtual ~Typeless() {}$/;"	f	class:unise::Any::Typeless
GlobalHandler	ju-seatch\unise\unise\global_handler.h	/^    GlobalHandler() {}$/;"	f	class:unise::GlobalHandler
GlobalHandler	ju-seatch\unise\unise\global_handler.h	/^class GlobalHandler {$/;"	c	namespace:unise
REGISTER_GLOBAL_HANDLER	ju-seatch\unise\unise\global_handler.h	57;"	d
UNISE_GLOBAL_HANDLER_H	ju-seatch\unise\unise\global_handler.h	4;"	d
comcfg	ju-seatch\unise\unise\global_handler.h	/^namespace comcfg {$/;"	n
init_basic	ju-seatch\unise\unise\global_handler.h	/^    bool init_basic(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::GlobalHandler
unise	ju-seatch\unise\unise\global_handler.h	/^namespace unise {$/;"	n
~GlobalHandler	ju-seatch\unise\unise\global_handler.h	/^    virtual ~GlobalHandler() {}$/;"	f	class:unise::GlobalHandler
MatchedDoc	ju-seatch\unise\unise\matched_doc.h	/^    MatchedDoc() {}$/;"	f	class:unise::MatchedDoc
MatchedDoc	ju-seatch\unise\unise\matched_doc.h	/^class MatchedDoc {$/;"	c	namespace:unise
UNISE_MATCHED_DOC_H_	ju-seatch\unise\unise\matched_doc.h	4;"	d
unise	ju-seatch\unise\unise\matched_doc.h	/^namespace unise {$/;"	n
~MatchedDoc	ju-seatch\unise\unise\matched_doc.h	/^    virtual ~MatchedDoc() {}$/;"	f	class:unise::MatchedDoc
MatchedNode	ju-seatch\unise\unise\matched_node.h	/^class MatchedNode$/;"	c	namespace:unise
UNISE_MATCHED_NODE_H_	ju-seatch\unise\unise\matched_node.h	4;"	d
_hits_per_doc	ju-seatch\unise\unise\matched_node.h	/^    std::vector<doc_token_hit_t*> * _hits_per_doc;$/;"	m	class:unise::MatchedNode
_token_id	ju-seatch\unise\unise\matched_node.h	/^    TokenId _token_id;$/;"	m	class:unise::MatchedNode
get_hits	ju-seatch\unise\unise\matched_node.h	/^    inline const std::vector<doc_token_hit_t*>& get_hits() const {$/;"	f	class:unise::MatchedNode
get_hits_p	ju-seatch\unise\unise\matched_node.h	/^    inline std::vector<doc_token_hit_t*> *get_hits_p() {$/;"	f	class:unise::MatchedNode
get_token_id	ju-seatch\unise\unise\matched_node.h	/^    TokenId get_token_id() const$/;"	f	class:unise::MatchedNode
unise	ju-seatch\unise\unise\matched_node.h	/^namespace unise$/;"	n
UNISE_PBRPC_CLIENT_H	ju-seatch\unise\unise\pbrpc_client.h	4;"	d
CS_VS_CROSS_UNISE_UNISE_QUERY_REWRITER_H	ju-seatch\unise\unise\query_rewriter.h	4;"	d
QueryRewriter	ju-seatch\unise\unise\query_rewriter.h	/^    QueryRewriter() {}$/;"	f	class:unise::QueryRewriter
QueryRewriter	ju-seatch\unise\unise\query_rewriter.h	/^class QueryRewriter {$/;"	c	namespace:unise
REGISTER_QUERY_REWRITER	ju-seatch\unise\unise\query_rewriter.h	44;"	d
comcfg	ju-seatch\unise\unise\query_rewriter.h	/^namespace comcfg {$/;"	n
unise	ju-seatch\unise\unise\query_rewriter.h	/^namespace unise {$/;"	n
~QueryRewriter	ju-seatch\unise\unise\query_rewriter.h	/^    virtual ~QueryRewriter() {}$/;"	f	class:unise::QueryRewriter
REGISTER_RESULT_ADAPTER	ju-seatch\unise\unise\result_adapter.h	100;"	d
ResultAdapter	ju-seatch\unise\unise\result_adapter.h	/^    ResultAdapter() {}$/;"	f	class:unise::ResultAdapter
ResultAdapter	ju-seatch\unise\unise\result_adapter.h	/^class ResultAdapter {$/;"	c	namespace:unise
UNISE_RESULT_ADAPTER_H_	ju-seatch\unise\unise\result_adapter.h	9;"	d
comcfg	ju-seatch\unise\unise\result_adapter.h	/^namespace comcfg {$/;"	n
end_for_search	ju-seatch\unise\unise\result_adapter.h	/^    virtual void end_for_search(PluginResponse * plugin_response) {$/;"	f	class:unise::ResultAdapter
unise	ju-seatch\unise\unise\result_adapter.h	/^namespace unise {$/;"	n
~ResultAdapter	ju-seatch\unise\unise\result_adapter.h	/^    virtual ~ResultAdapter() {}$/;"	f	class:unise::ResultAdapter
CLUSTER_ADD	ju-seatch\unise\unise\result_cluster.h	/^    CLUSTER_ADD = 0,     \/\/ the result will be add$/;"	e	enum:unise::cluster_status_t
CLUSTER_REPLACE	ju-seatch\unise\unise\result_cluster.h	/^    CLUSTER_REPLACE = 2, \/\/ the result will replace many other results$/;"	e	enum:unise::cluster_status_t
CLUSTER_SKIP	ju-seatch\unise\unise\result_cluster.h	/^    CLUSTER_SKIP = 1,    \/\/ the result will be skip$/;"	e	enum:unise::cluster_status_t
REGISTER_RESULT_CLUSTER	ju-seatch\unise\unise\result_cluster.h	102;"	d
ResultCluster	ju-seatch\unise\unise\result_cluster.h	/^    ResultCluster() {}$/;"	f	class:unise::ResultCluster
ResultCluster	ju-seatch\unise\unise\result_cluster.h	/^class ResultCluster : public UnisePlugin$/;"	c	namespace:unise
UNISE_RESULT_CLUSTER_H_	ju-seatch\unise\unise\result_cluster.h	4;"	d
cluster_status_t	ju-seatch\unise\unise\result_cluster.h	/^enum cluster_status_t {$/;"	g	namespace:unise
fill_result_cluster_info	ju-seatch\unise\unise\result_cluster.h	/^    virtual bool fill_result_cluster_info(MatchedDoc* doc,$/;"	f	class:unise::ResultCluster
unise	ju-seatch\unise\unise\result_cluster.h	/^namespace unise$/;"	n
~ResultCluster	ju-seatch\unise\unise\result_cluster.h	/^    virtual ~ResultCluster() {}$/;"	f	class:unise::ResultCluster
REGISTER_RESULT_FILLER	ju-seatch\unise\unise\result_filler.h	56;"	d
ResultFiller	ju-seatch\unise\unise\result_filler.h	/^    ResultFiller() {}$/;"	f	class:unise::ResultFiller
ResultFiller	ju-seatch\unise\unise\result_filler.h	/^class ResultFiller : public UnisePlugin {$/;"	c	namespace:unise
UNISE_RESULT_FILLER_H_	ju-seatch\unise\unise\result_filler.h	4;"	d
unise	ju-seatch\unise\unise\result_filler.h	/^namespace unise {$/;"	n
~ResultFiller	ju-seatch\unise\unise\result_filler.h	/^    virtual ~ResultFiller() {}$/;"	f	class:unise::ResultFiller
REGISTER_RESULT_FILTER	ju-seatch\unise\unise\result_filter.h	61;"	d
ResultFilter	ju-seatch\unise\unise\result_filter.h	/^    ResultFilter() {}$/;"	f	class:unise::ResultFilter
ResultFilter	ju-seatch\unise\unise\result_filter.h	/^class ResultFilter : public UnisePlugin$/;"	c	namespace:unise
UNISE_RESULT_FILTER_H_	ju-seatch\unise\unise\result_filter.h	4;"	d
unise	ju-seatch\unise\unise\result_filter.h	/^namespace unise$/;"	n
~ResultFilter	ju-seatch\unise\unise\result_filter.h	/^    virtual ~ResultFilter() {}$/;"	f	class:unise::ResultFilter
REGISTER_SCORER	ju-seatch\unise\unise\scorer.h	61;"	d
Scorer	ju-seatch\unise\unise\scorer.h	/^    Scorer() {}$/;"	f	class:unise::Scorer
Scorer	ju-seatch\unise\unise\scorer.h	/^class Scorer : public UnisePlugin$/;"	c	namespace:unise
UNISE_SCORER_H_	ju-seatch\unise\unise\scorer.h	4;"	d
unise	ju-seatch\unise\unise\scorer.h	/^namespace unise$/;"	n
~Scorer	ju-seatch\unise\unise\scorer.h	/^    virtual ~Scorer() {}$/;"	f	class:unise::Scorer
REGISTER_SEARCH_CONTEXT_FACTORY	ju-seatch\unise\unise\search_context.h	125;"	d
SearchContext	ju-seatch\unise\unise\search_context.h	/^    SearchContext() {}$/;"	f	class:unise::SearchContext
SearchContext	ju-seatch\unise\unise\search_context.h	/^class SearchContext {$/;"	c	namespace:unise
SearchContextFactory	ju-seatch\unise\unise\search_context.h	/^    SearchContextFactory() {}$/;"	f	class:unise::SearchContextFactory
SearchContextFactory	ju-seatch\unise\unise\search_context.h	/^class SearchContextFactory {$/;"	c	namespace:unise
UNISE_SEARCH_CONTEXT_H_	ju-seatch\unise\unise\search_context.h	4;"	d
_experiment_kvs	ju-seatch\unise\unise\search_context.h	/^    std::map<std::string, std::string> _experiment_kvs;$/;"	m	class:unise::SearchContext
_recall_docs	ju-seatch\unise\unise\search_context.h	/^    int32_t _recall_docs;                  \/\/\/< 停止条件——召回文档数$/;"	m	class:unise::SearchContext
_retrieve_depth	ju-seatch\unise\unise\search_context.h	/^    int32_t _retrieve_depth;               \/\/\/< 停止条件——倒排检索深度$/;"	m	class:unise::SearchContext
_retrieve_timeout	ju-seatch\unise\unise\search_context.h	/^    double _retrieve_timeout;              \/\/\/< 停止条件——倒排检索超时$/;"	m	class:unise::SearchContext
_sample_id	ju-seatch\unise\unise\search_context.h	/^    uint64_t _sample_id;                   \/\/\/< 流量实验id，默认为0$/;"	m	class:unise::SearchContext
get_recall_docs	ju-seatch\unise\unise\search_context.h	/^    inline int32_t get_recall_docs() const$/;"	f	class:unise::SearchContext
get_retrieve_depth	ju-seatch\unise\unise\search_context.h	/^    inline int32_t get_retrieve_depth() const$/;"	f	class:unise::SearchContext
get_retrieve_timeout	ju-seatch\unise\unise\search_context.h	/^    inline double get_retrieve_timeout() const$/;"	f	class:unise::SearchContext
get_sample_id	ju-seatch\unise\unise\search_context.h	/^    inline uint64_t get_sample_id() const$/;"	f	class:unise::SearchContext
init_for_search_internal	ju-seatch\unise\unise\search_context.h	/^    virtual void init_for_search_internal(const GeneralSearchRequest* request)$/;"	f	class:unise::SearchContext
unise	ju-seatch\unise\unise\search_context.h	/^namespace unise {$/;"	n
~SearchContext	ju-seatch\unise\unise\search_context.h	/^    virtual ~SearchContext() {}$/;"	f	class:unise::SearchContext
~SearchContextFactory	ju-seatch\unise\unise\search_context.h	/^    virtual ~SearchContextFactory() {}$/;"	f	class:unise::SearchContextFactory
CS_VS_CROSS_UNISE_SRC_UNISE_SEARCH_HANDLER_H	ju-seatch\unise\unise\search_handler.h	4;"	d
DEFAULT_SH_HELPER_RESPONSE_QUEUE_SIZE	ju-seatch\unise\unise\search_handler.h	/^const uint32_t DEFAULT_SH_HELPER_RESPONSE_QUEUE_SIZE = 32;$/;"	m	namespace:unise
QueryRewriterMap	ju-seatch\unise\unise\search_handler.h	/^    typedef std::map<uint64_t, QueryRewriter*> QueryRewriterMap;$/;"	t	class:unise::SearchHandler
ResultAdapterMap	ju-seatch\unise\unise\search_handler.h	/^    typedef std::map<uint64_t, ResultAdapter*> ResultAdapterMap;$/;"	t	class:unise::SearchHandler
ResultLess	ju-seatch\unise\unise\search_handler.h	/^class ResultLess {$/;"	c	namespace:unise
SearchHandler	ju-seatch\unise\unise\search_handler.h	/^class SearchHandler {$/;"	c	namespace:unise
_engine_unit_manager	ju-seatch\unise\unise\search_handler.h	/^    EngineUnitManager * _engine_unit_manager;$/;"	m	class:unise::SearchHandler
_query_rewriter_map	ju-seatch\unise\unise\search_handler.h	/^    QueryRewriterMap _query_rewriter_map;   \/\/\/< 存储query rewriter插件的map$/;"	m	class:unise::SearchHandler
_result_adapter_map	ju-seatch\unise\unise\search_handler.h	/^    ResultAdapterMap _result_adapter_map;     \/**< 存储多个adapter插件的map       *\/$/;"	m	class:unise::SearchHandler
_search_handler_helper	ju-seatch\unise\unise\search_handler.h	/^    SearchHandlerHelper * _search_handler_helper;$/;"	m	class:unise::SearchHandler
comcfg	ju-seatch\unise\unise\search_handler.h	/^namespace comcfg {$/;"	n
unise	ju-seatch\unise\unise\search_handler.h	/^namespace unise {$/;"	n
CS_VS_CROSS_UNISE_SRC_UNISE_SERIALIZE_H	ju-seatch\unise\unise\serialization.h	5;"	d
deserialize	ju-seatch\unise\unise\serialization.h	/^bool deserialize(std::vector<DimensionDoc *> * dimension_docs, const std::string& fname) {$/;"	f	namespace:unise
serialize	ju-seatch\unise\unise\serialization.h	/^bool serialize(const std::vector<const DimensionDoc *> & dimension_docs, const std::string& fname) {$/;"	f	namespace:unise
unise	ju-seatch\unise\unise\serialization.h	/^namespace unise {$/;"	n
Singleton	ju-seatch\unise\unise\singleton.h	/^class Singleton : boost::noncopyable$/;"	c	namespace:unise
UNISE_SINGLETON_H_	ju-seatch\unise\unise\singleton.h	2;"	d
_delete	ju-seatch\unise\unise\singleton.h	/^    __attribute__((destructor)) static void _delete() {$/;"	f	class:unise::Singleton
_instance	ju-seatch\unise\unise\singleton.h	/^    static T*             _instance;    \/\/\/< The singleton instance$/;"	m	class:unise::Singleton
_instance	ju-seatch\unise\unise\singleton.h	/^T* Singleton<T>::_instance = NULL;$/;"	m	class:unise::Singleton
_new	ju-seatch\unise\unise\singleton.h	/^    static void _new() {$/;"	f	class:unise::Singleton
_p_once	ju-seatch\unise\unise\singleton.h	/^    static pthread_once_t _p_once;      \/\/\/< Initialization once control$/;"	m	class:unise::Singleton
_p_once	ju-seatch\unise\unise\singleton.h	/^pthread_once_t Singleton<T>::_p_once = PTHREAD_ONCE_INIT;$/;"	m	class:unise::Singleton
get	ju-seatch\unise\unise\singleton.h	/^    static T* get() {$/;"	f	class:unise::Singleton
unise	ju-seatch\unise\unise\singleton.h	/^namespace unise$/;"	n
MAXLEVEL	ju-seatch\unise\unise\skiplist.h	/^    const static level_type             MAXLEVEL = 16;  \/\/\/< Skip list 最大层级$/;"	m	class:unise::SkipList
PROB	ju-seatch\unise\unise\skiplist.h	/^    const static double                 PROB = 0.25;    \/\/\/< 下层元素出现在上层概率$/;"	m	class:unise::SkipList
SkipList	ju-seatch\unise\unise\skiplist.h	/^    SkipList()$/;"	f	class:unise::SkipList
SkipList	ju-seatch\unise\unise\skiplist.h	/^class SkipList$/;"	c	namespace:unise
UTIL_SKIPLIST_H_	ju-seatch\unise\unise\skiplist.h	2;"	d
_Node	ju-seatch\unise\unise\skiplist.h	/^    typedef _SkipListNode<_Tp>          _Node;$/;"	t	struct:unise::_SkipListConstIterator
_Self	ju-seatch\unise\unise\skiplist.h	/^    typedef _SkipListConstIterator<_Tp>  _Self;$/;"	t	struct:unise::_SkipListConstIterator
_SkipListConstIterator	ju-seatch\unise\unise\skiplist.h	/^    _SkipListConstIterator(): _node() { }$/;"	f	struct:unise::_SkipListConstIterator
_SkipListConstIterator	ju-seatch\unise\unise\skiplist.h	/^    _SkipListConstIterator(const _Node* __x): _node(__x) { }$/;"	f	struct:unise::_SkipListConstIterator
_SkipListConstIterator	ju-seatch\unise\unise\skiplist.h	/^struct _SkipListConstIterator {$/;"	s	namespace:unise
_SkipListNode	ju-seatch\unise\unise\skiplist.h	/^struct _SkipListNode {$/;"	s	namespace:unise
_create_node	ju-seatch\unise\unise\skiplist.h	/^    inline node_type * _create_node(level_type level) {$/;"	f	class:unise::SkipList
_delayed_free	ju-seatch\unise\unise\skiplist.h	/^    void _delayed_free(node_type * node) {$/;"	f	class:unise::SkipList
_find_prev	ju-seatch\unise\unise\skiplist.h	/^    inline node_type * _find_prev(const _Tp &t, node_type **update) const {$/;"	f	class:unise::SkipList
_head	ju-seatch\unise\unise\skiplist.h	/^    node_type                          *_head;          \/\/\/< Skip list 的链表头$/;"	m	class:unise::SkipList
_level	ju-seatch\unise\unise\skiplist.h	/^    level_type                          _level;         \/\/\/< 当前 Skip list 的层级数$/;"	m	class:unise::SkipList
_node	ju-seatch\unise\unise\skiplist.h	/^    const _Node* _node;     \/\/\/< 存储当前节点信息$/;"	m	struct:unise::_SkipListConstIterator
_random_level	ju-seatch\unise\unise\skiplist.h	/^    inline level_type _random_level() const {$/;"	f	class:unise::SkipList
_size	ju-seatch\unise\unise\skiplist.h	/^    volatile size_type                  _size;          \/\/\/< 当前 Skip list 的长度$/;"	m	class:unise::SkipList
begin	ju-seatch\unise\unise\skiplist.h	/^    const_iterator begin() const {$/;"	f	class:unise::SkipList
clear	ju-seatch\unise\unise\skiplist.h	/^    void clear() {$/;"	f	class:unise::SkipList
const_iterator	ju-seatch\unise\unise\skiplist.h	/^    typedef _SkipListConstIterator<_Tp> const_iterator;$/;"	t	class:unise::SkipList
data	ju-seatch\unise\unise\skiplist.h	/^    _Tp                 data;       \/\/\/< 不区分 key, value，_Tp 需重载 < 运算符$/;"	m	struct:unise::_SkipListNode
difference_type	ju-seatch\unise\unise\skiplist.h	/^    typedef ptrdiff_t                   difference_type;$/;"	t	struct:unise::_SkipListConstIterator
end	ju-seatch\unise\unise\skiplist.h	/^    const_iterator end() const {$/;"	f	class:unise::SkipList
erase	ju-seatch\unise\unise\skiplist.h	/^    size_type erase(const _Tp & t) {$/;"	f	class:unise::SkipList
find	ju-seatch\unise\unise\skiplist.h	/^    const_iterator find(const _Tp &t) const {$/;"	f	class:unise::SkipList
forward	ju-seatch\unise\unise\skiplist.h	/^    _SkipListNode<_Tp> *forward[1]; \/\/\/< 前向指针数组，指向对应层级下一个节点$/;"	m	struct:unise::_SkipListNode
insert	ju-seatch\unise\unise\skiplist.h	/^    const_iterator insert(const _Tp &t) {$/;"	f	class:unise::SkipList
iterator_category	ju-seatch\unise\unise\skiplist.h	/^    typedef std::forward_iterator_tag   iterator_category;$/;"	t	struct:unise::_SkipListConstIterator
key_type	ju-seatch\unise\unise\skiplist.h	/^    typedef _Tp                         key_type;$/;"	t	class:unise::SkipList
level_type	ju-seatch\unise\unise\skiplist.h	/^    typedef int8_t                      level_type;     \/\/\/< 需要是有符号整型，好 handle i-- 的情况$/;"	t	class:unise::SkipList
lower_bound	ju-seatch\unise\unise\skiplist.h	/^    const_iterator lower_bound(const _Tp &t) const {$/;"	f	class:unise::SkipList
node_type	ju-seatch\unise\unise\skiplist.h	/^    typedef _SkipListNode<_Tp>          node_type;$/;"	t	class:unise::SkipList
operator !=	ju-seatch\unise\unise\skiplist.h	/^    bool operator!=(const _Self& __x) const {$/;"	f	struct:unise::_SkipListConstIterator
operator *	ju-seatch\unise\unise\skiplist.h	/^    reference operator*() const {$/;"	f	struct:unise::_SkipListConstIterator
operator ++	ju-seatch\unise\unise\skiplist.h	/^    _Self operator++(int) {$/;"	f	struct:unise::_SkipListConstIterator
operator ++	ju-seatch\unise\unise\skiplist.h	/^    _Self& operator++() {$/;"	f	struct:unise::_SkipListConstIterator
operator ->	ju-seatch\unise\unise\skiplist.h	/^    pointer operator->() const {$/;"	f	struct:unise::_SkipListConstIterator
operator ==	ju-seatch\unise\unise\skiplist.h	/^    bool operator==(const _Self& __x) const {$/;"	f	struct:unise::_SkipListConstIterator
pointer	ju-seatch\unise\unise\skiplist.h	/^    typedef const _Tp*                  pointer;$/;"	t	struct:unise::_SkipListConstIterator
reference	ju-seatch\unise\unise\skiplist.h	/^    typedef const _Tp&                  reference;$/;"	t	struct:unise::_SkipListConstIterator
size	ju-seatch\unise\unise\skiplist.h	/^    size_type size() const {$/;"	f	class:unise::SkipList
size_type	ju-seatch\unise\unise\skiplist.h	/^    typedef uint32_t                    size_type;      \/\/\/< 尽量减少空间占用$/;"	t	class:unise::SkipList
unise	ju-seatch\unise\unise\skiplist.h	/^namespace unise$/;"	n
value_type	ju-seatch\unise\unise\skiplist.h	/^    typedef _Tp                         value_type;$/;"	t	class:unise::SkipList
value_type	ju-seatch\unise\unise\skiplist.h	/^    typedef _Tp                         value_type;$/;"	t	struct:unise::_SkipListConstIterator
~SkipList	ju-seatch\unise\unise\skiplist.h	/^    ~SkipList() {$/;"	f	class:unise::SkipList
StateMonitor	ju-seatch\unise\unise\state_monitor.h	/^class StateMonitor : public Thread {$/;"	c	namespace:unise
UNISE_STATE_MONITOR_H_	ju-seatch\unise\unise\state_monitor.h	4;"	d
_ktv_map	ju-seatch\unise\unise\state_monitor.h	/^    boost::scoped_ptr<key_value_map> _ktv_map;$/;"	m	class:unise::StateMonitor
_record_queue_map	ju-seatch\unise\unise\state_monitor.h	/^    boost::scoped_ptr<record_queue_map> _record_queue_map;$/;"	m	class:unise::StateMonitor
_state_message_queue	ju-seatch\unise\unise\state_monitor.h	/^    boost::scoped_ptr<state_message_queue> _state_message_queue;$/;"	m	class:unise::StateMonitor
_stomach	ju-seatch\unise\unise\state_monitor.h	/^    boost::scoped_ptr<std::vector<state_message_t> > _stomach;$/;"	m	class:unise::StateMonitor
_stop	ju-seatch\unise\unise\state_monitor.h	/^    bool _stop;$/;"	m	class:unise::StateMonitor
add_number_state_message	ju-seatch\unise\unise\state_monitor.h	/^    inline void add_number_state_message($/;"	f	class:unise::StateMonitor
add_text_state_message	ju-seatch\unise\unise\state_monitor.h	/^    inline void add_text_state_message($/;"	f	class:unise::StateMonitor
avg	ju-seatch\unise\unise\state_monitor.h	/^    double   avg;           \/\/\/< 10s内的平均值$/;"	m	struct:unise::tens_record_t
count	ju-seatch\unise\unise\state_monitor.h	/^    uint32_t count;         \/\/\/< 10s内的总数$/;"	m	struct:unise::tens_record_t
key	ju-seatch\unise\unise\state_monitor.h	/^    char key[50];          \/\/\/< 状态类型$/;"	m	struct:unise::state_message_t
key_value_map	ju-seatch\unise\unise\state_monitor.h	/^    typedef bsl::phashmap<std::string, std::string> key_value_map;$/;"	t	class:unise::StateMonitor
max	ju-seatch\unise\unise\state_monitor.h	/^    uint64_t max;           \/\/\/< 10s内的最大值$/;"	m	struct:unise::tens_record_t
min	ju-seatch\unise\unise\state_monitor.h	/^    uint64_t min;           \/\/\/< 10s内的最小值$/;"	m	struct:unise::tens_record_t
number_value	ju-seatch\unise\unise\state_monitor.h	/^    uint64_t number_value;    \/\/\/< 需要统计的数字$/;"	m	struct:unise::state_message_t
operator <	ju-seatch\unise\unise\state_monitor.h	/^    bool operator< (const state_message_t& smt) const {$/;"	f	struct:unise::state_message_t
record_queue_map	ju-seatch\unise\unise\state_monitor.h	/^    typedef bsl::phashmap<std::string, DequeQueue* > record_queue_map;$/;"	t	class:unise::StateMonitor
set_key	ju-seatch\unise\unise\state_monitor.h	/^    void set_key(const std::string& key_str) {$/;"	f	struct:unise::state_message_t
set_text	ju-seatch\unise\unise\state_monitor.h	/^    void set_text(const std::string& text_str) {$/;"	f	struct:unise::state_message_t
state_message_queue	ju-seatch\unise\unise\state_monitor.h	/^    typedef boost::lockfree::queue<state_message_t> state_message_queue;$/;"	t	class:unise::StateMonitor
state_message_t	ju-seatch\unise\unise\state_monitor.h	/^    state_message_t() :$/;"	f	struct:unise::state_message_t
state_message_t	ju-seatch\unise\unise\state_monitor.h	/^    state_message_t(const state_message_t & from) : $/;"	f	struct:unise::state_message_t
state_message_t	ju-seatch\unise\unise\state_monitor.h	/^    state_message_t(int32_t ts, const std::string& k, const std::string& t_v) :$/;"	f	struct:unise::state_message_t
state_message_t	ju-seatch\unise\unise\state_monitor.h	/^    state_message_t(int32_t ts, const std::string& k, uint64_t n) :$/;"	f	struct:unise::state_message_t
state_message_t	ju-seatch\unise\unise\state_monitor.h	/^struct state_message_t {$/;"	s	namespace:unise
stop	ju-seatch\unise\unise\state_monitor.h	/^    void stop() { _stop = true; }$/;"	f	class:unise::StateMonitor
tens_record_t	ju-seatch\unise\unise\state_monitor.h	/^struct tens_record_t {$/;"	s	namespace:unise
text_value	ju-seatch\unise\unise\state_monitor.h	/^    char text_value[50];   \/\/\/< 字符串状态描述$/;"	m	struct:unise::state_message_t
timestamp	ju-seatch\unise\unise\state_monitor.h	/^    int32_t timestamp;        \/\/\/< 具体时间戳$/;"	m	struct:unise::state_message_t
timestamp	ju-seatch\unise\unise\state_monitor.h	/^    int32_t timestamp;      \/\/\/< 往小端打平，如19s，记录为10s$/;"	m	struct:unise::tens_record_t
type	ju-seatch\unise\unise\state_monitor.h	/^    int8_t type;              \/\/\/< 类型，0：number； 1：text; -1: illegal$/;"	m	struct:unise::state_message_t
unise	ju-seatch\unise\unise\state_monitor.h	/^namespace unise {$/;"	n
Thread	ju-seatch\unise\unise\thread.h	/^    Thread(const std::string& name):$/;"	f	class:unise::Thread
Thread	ju-seatch\unise\unise\thread.h	/^class Thread$/;"	c	namespace:unise
UNISE_THREAD_H_	ju-seatch\unise\unise\thread.h	2;"	d
_name	ju-seatch\unise\unise\thread.h	/^    std::string _name;      \/\/\/< 线程名$/;"	m	class:unise::Thread
_run_thread	ju-seatch\unise\unise\thread.h	/^    static void* _run_thread(void *para) {$/;"	f	class:unise::Thread
_tid	ju-seatch\unise\unise\thread.h	/^    pthread_t   _tid;       \/\/\/< 线程ID$/;"	m	class:unise::Thread
cancel	ju-seatch\unise\unise\thread.h	/^    int cancel() {$/;"	f	class:unise::Thread
detach	ju-seatch\unise\unise\thread.h	/^    virtual int detach() {$/;"	f	class:unise::Thread
exit	ju-seatch\unise\unise\thread.h	/^    void exit(void *p) {$/;"	f	class:unise::Thread
get_name	ju-seatch\unise\unise\thread.h	/^    const std::string& get_name() {$/;"	f	class:unise::Thread
get_tid	ju-seatch\unise\unise\thread.h	/^    pthread_t get_tid() {$/;"	f	class:unise::Thread
join	ju-seatch\unise\unise\thread.h	/^    virtual int join() {$/;"	f	class:unise::Thread
kill	ju-seatch\unise\unise\thread.h	/^    int kill(int sig = SIGTERM) {$/;"	f	class:unise::Thread
start	ju-seatch\unise\unise\thread.h	/^    virtual int start() {$/;"	f	class:unise::Thread
unise	ju-seatch\unise\unise\thread.h	/^namespace unise$/;"	n
~Thread	ju-seatch\unise\unise\thread.h	/^    virtual ~Thread() {$/;"	f	class:unise::Thread
UNISE_UNISE_PLUGIN_H_	ju-seatch\unise\unise\unise_plugin.h	8;"	d
UnisePlugin	ju-seatch\unise\unise\unise_plugin.h	/^    UnisePlugin() {}$/;"	f	class:unise::UnisePlugin
UnisePlugin	ju-seatch\unise\unise\unise_plugin.h	/^class UnisePlugin {$/;"	c	namespace:unise
_annotation_manager	ju-seatch\unise\unise\unise_plugin.h	/^    const AnnotationManager * _annotation_manager;$/;"	m	class:unise::UnisePlugin
_dimension_doc_manager	ju-seatch\unise\unise\unise_plugin.h	/^    const DimensionDocManager * _dimension_doc_manager;$/;"	m	class:unise::UnisePlugin
_repository_manager	ju-seatch\unise\unise\unise_plugin.h	/^    const RepositoryManager * _repository_manager;$/;"	m	class:unise::UnisePlugin
comcfg	ju-seatch\unise\unise\unise_plugin.h	/^namespace comcfg {$/;"	n
end_for_search	ju-seatch\unise\unise\unise_plugin.h	/^    virtual void end_for_search(PluginResponse * plugin_response) {$/;"	f	class:unise::UnisePlugin
init	ju-seatch\unise\unise\unise_plugin.h	/^    virtual bool init(const comcfg::ConfigUnit& conf) {$/;"	f	class:unise::UnisePlugin
unise	ju-seatch\unise\unise\unise_plugin.h	/^namespace unise {$/;"	n
~UnisePlugin	ju-seatch\unise\unise\unise_plugin.h	/^    virtual ~UnisePlugin() {}$/;"	f	class:unise::UnisePlugin
GetMemInfo	ju-seatch\unise\unise\util.h	/^    GetMemInfo() : _proc_virt(0llu), _proc_res(0llu),  _sys_total(0llu), _sys_free(0llu), $/;"	f	class:unise::GetMemInfo
GetMemInfo	ju-seatch\unise\unise\util.h	/^class GetMemInfo {$/;"	c	namespace:unise
IntToString	ju-seatch\unise\unise\util.h	/^    static STR IntToString(INT value) {$/;"	f	struct:unise::IntToStringT
IntToStringT	ju-seatch\unise\unise\util.h	/^struct IntToStringT {$/;"	s	namespace:unise
StopWatch	ju-seatch\unise\unise\util.h	/^    StopWatch(uint32_t base = 1000) {$/;"	f	class:unise::StopWatch
StopWatch	ju-seatch\unise\unise\util.h	/^class StopWatch {$/;"	c	namespace:unise
StringAppendVT	ju-seatch\unise\unise\util.h	/^static void StringAppendVT(StringType* dst,$/;"	f	namespace:unise
StringToNumber	ju-seatch\unise\unise\util.h	/^bool StringToNumber(const typename StringToNumberTraits::string_type& input,$/;"	f	namespace:unise
TRIM_ALL	ju-seatch\unise\unise\util.h	/^    TRIM_ALL      = TRIM_LEADING | TRIM_TRAILING,$/;"	e	enum:unise::TrimPositions
TRIM_LEADING	ju-seatch\unise\unise\util.h	/^    TRIM_LEADING  = 1 << 0,$/;"	e	enum:unise::TrimPositions
TRIM_NONE	ju-seatch\unise\unise\util.h	/^    TRIM_NONE     = 0,$/;"	e	enum:unise::TrimPositions
TRIM_TRAILING	ju-seatch\unise\unise\util.h	/^    TRIM_TRAILING = 1 << 1,$/;"	e	enum:unise::TrimPositions
TestNeg	ju-seatch\unise\unise\util.h	/^        static bool TestNeg(INT2 value) {$/;"	f	struct:unise::IntToStringT::TestNegT
TestNegT	ju-seatch\unise\unise\util.h	/^    struct TestNegT { };$/;"	s	struct:unise::IntToStringT
TestNegT	ju-seatch\unise\unise\util.h	/^    struct TestNegT<INT2, false> {$/;"	s	struct:unise::IntToStringT
TestNegT	ju-seatch\unise\unise\util.h	/^    struct TestNegT<INT2, true> {$/;"	s	struct:unise::IntToStringT
ToUnsigned	ju-seatch\unise\unise\util.h	/^        static UINT2 ToUnsigned(INT2 value) {$/;"	f	struct:unise::IntToStringT::ToUnsignedT
ToUnsignedT	ju-seatch\unise\unise\util.h	/^    struct ToUnsignedT { };$/;"	s	struct:unise::IntToStringT
ToUnsignedT	ju-seatch\unise\unise\util.h	/^    struct ToUnsignedT<INT2, UINT2, false> {$/;"	s	struct:unise::IntToStringT
ToUnsignedT	ju-seatch\unise\unise\util.h	/^    struct ToUnsignedT<INT2, UINT2, true> {$/;"	s	struct:unise::IntToStringT
TrimPositions	ju-seatch\unise\unise\util.h	/^enum TrimPositions {$/;"	g	namespace:unise
TrimStringT	ju-seatch\unise\unise\util.h	/^TrimPositions TrimStringT(const STR& input,$/;"	f	namespace:unise
UNISE_UTIL_H_	ju-seatch\unise\unise\util.h	4;"	d
_base	ju-seatch\unise\unise\util.h	/^    double                  _base;          \/\/\/< 时间精度$/;"	m	class:unise::StopWatch
_meminfo_fd	ju-seatch\unise\unise\util.h	/^    int _meminfo_fd;$/;"	m	class:unise::GetMemInfo
_my_pid	ju-seatch\unise\unise\util.h	/^    int _my_pid;$/;"	m	class:unise::GetMemInfo
_page_size	ju-seatch\unise\unise\util.h	/^    unsigned _page_size;$/;"	m	class:unise::GetMemInfo
_proc_buf	ju-seatch\unise\unise\util.h	/^    char *_proc_buf;$/;"	m	class:unise::GetMemInfo
_proc_res	ju-seatch\unise\unise\util.h	/^    unsigned long long _proc_res;$/;"	m	class:unise::GetMemInfo
_proc_virt	ju-seatch\unise\unise\util.h	/^    unsigned long long _proc_virt;$/;"	m	class:unise::GetMemInfo
_split_time	ju-seatch\unise\unise\util.h	/^      std::vector<double>     _split_time;    \/\/\/< 每次计时距离开始时间的时长$/;"	m	class:unise::StopWatch
_start	ju-seatch\unise\unise\util.h	/^    struct timeval          _start;         \/\/\/< 计时器开始时间$/;"	m	class:unise::StopWatch	typeref:struct:unise::StopWatch::timeval
_statm_fd	ju-seatch\unise\unise\util.h	/^    int _statm_fd;$/;"	m	class:unise::GetMemInfo
_sys_buf	ju-seatch\unise\unise\util.h	/^    char *_sys_buf;$/;"	m	class:unise::GetMemInfo
_sys_free	ju-seatch\unise\unise\util.h	/^    unsigned long long _sys_free;$/;"	m	class:unise::GetMemInfo
_sys_total	ju-seatch\unise\unise\util.h	/^    unsigned long long _sys_total;$/;"	m	class:unise::GetMemInfo
get_proc_mem_info	ju-seatch\unise\unise\util.h	/^    void get_proc_mem_info() {$/;"	f	class:unise::GetMemInfo
get_split_lag	ju-seatch\unise\unise\util.h	/^    inline double get_split_lag(size_t i) {$/;"	f	class:unise::StopWatch
get_split_num	ju-seatch\unise\unise\util.h	/^    inline size_t get_split_num() {$/;"	f	class:unise::StopWatch
get_split_time	ju-seatch\unise\unise\util.h	/^    inline double get_split_time(size_t i) {$/;"	f	class:unise::StopWatch
get_sys_mem_info	ju-seatch\unise\unise\util.h	/^    void get_sys_mem_info() {$/;"	f	class:unise::GetMemInfo
load_protobuf_conf	ju-seatch\unise\unise\util.h	/^bool load_protobuf_conf(const std::string &file_name, T *obj) {$/;"	f	namespace:unise
read	ju-seatch\unise\unise\util.h	/^    inline double read() {$/;"	f	class:unise::StopWatch
reset	ju-seatch\unise\unise\util.h	/^    void reset() {$/;"	f	class:unise::StopWatch
split	ju-seatch\unise\unise\util.h	/^    double split() {$/;"	f	class:unise::StopWatch
unise	ju-seatch\unise\unise\util.h	/^namespace unise {$/;"	n
vsnprintfT	ju-seatch\unise\unise\util.h	/^inline int vsnprintfT(char* buffer,$/;"	f	namespace:unise
vsnprintfT	ju-seatch\unise\unise\util.h	/^inline int vsnprintfT(wchar_t* buffer,$/;"	f	namespace:unise
~GetMemInfo	ju-seatch\unise\unise\util.h	/^    virtual ~GetMemInfo() {$/;"	f	class:unise::GetMemInfo
init	ju-seatch\unise\util\asl_wordseg.cc	/^bool AslWordseg::init()$/;"	f	class:AslWordseg
DasLoader	ju-seatch\unise\util\das_loader.cc	/^DasLoader::DasLoader(const std::string &info_file_name,$/;"	f	class:unise::DasLoader
get_begin_info	ju-seatch\unise\util\das_loader.cc	/^bool DasLoader::get_begin_info()$/;"	f	class:unise::DasLoader
inc_file_name	ju-seatch\unise\util\das_loader.cc	/^const std::string DasLoader::inc_file_name(uint32_t id)$/;"	f	class:unise::DasLoader
is_id_file_exist	ju-seatch\unise\util\das_loader.cc	/^bool DasLoader::is_id_file_exist(uint32_t id)$/;"	f	class:unise::DasLoader
load_inc_files	ju-seatch\unise\util\das_loader.cc	/^bool DasLoader::load_inc_files()$/;"	f	class:unise::DasLoader
run	ju-seatch\unise\util\das_loader.cc	/^int DasLoader::run() {$/;"	f	class:unise::DasLoader
unise	ju-seatch\unise\util\das_loader.cc	/^namespace unise$/;"	n	file:
~DasLoader	ju-seatch\unise\util\das_loader.cc	/^DasLoader::~DasLoader()$/;"	f	class:unise::DasLoader
DAS_INC_LOADER_THREAD_NAME	ju-seatch\unise\util\das_loader.h	/^const std::string DAS_INC_LOADER_THREAD_NAME = "DAS_INC_LOADER_THREAD";$/;"	m	namespace:unise
DasCbClosure	ju-seatch\unise\util\das_loader.h	/^    DasCbClosure() {}$/;"	f	class:unise::DasCbClosure
DasCbClosure	ju-seatch\unise\util\das_loader.h	/^class DasCbClosure {$/;"	c	namespace:unise
DasCbFunctionClosure0	ju-seatch\unise\util\das_loader.h	/^    DasCbFunctionClosure0(FunctionType function, bool self_deleting) :$/;"	f	class:unise::internal::DasCbFunctionClosure0
DasCbFunctionClosure0	ju-seatch\unise\util\das_loader.h	/^class DasCbFunctionClosure0 : public DasCbClosure {$/;"	c	namespace:unise::internal
DasCbMethodClosure0	ju-seatch\unise\util\das_loader.h	/^    DasCbMethodClosure0(Class* object, MethodType method, bool self_deleting)$/;"	f	class:unise::internal::DasCbMethodClosure0
DasCbMethodClosure0	ju-seatch\unise\util\das_loader.h	/^class DasCbMethodClosure0 : public DasCbClosure {$/;"	c	namespace:unise::internal
DasLoader	ju-seatch\unise\util\das_loader.h	/^class DasLoader : public Thread {$/;"	c	namespace:unise
FunctionType	ju-seatch\unise\util\das_loader.h	/^    typedef void (*FunctionType)(const std::string &);$/;"	t	class:unise::internal::DasCbFunctionClosure0
INVALID_NUMBER	ju-seatch\unise\util\das_loader.h	/^const uint32_t INVALID_NUMBER = 0xffffffff;$/;"	m	namespace:unise
MAX_RECORD_LINE_LEN	ju-seatch\unise\util\das_loader.h	/^const uint32_t MAX_RECORD_LINE_LEN = 2048;$/;"	m	namespace:unise
MethodType	ju-seatch\unise\util\das_loader.h	/^    typedef void (Class::*MethodType)(const std::string &);$/;"	t	class:unise::internal::DasCbMethodClosure0
NewPermanentDasCallback	ju-seatch\unise\util\das_loader.h	/^inline DasCbClosure* NewPermanentDasCallback($/;"	f	namespace:unise
NewPermanentDasCallback	ju-seatch\unise\util\das_loader.h	/^inline DasCbClosure* NewPermanentDasCallback(void (*function)(const std::string &)) {$/;"	f	namespace:unise
Process	ju-seatch\unise\util\das_loader.h	/^    void Process(const std::string &line) {$/;"	f	class:unise::internal::DasCbFunctionClosure0
Process	ju-seatch\unise\util\das_loader.h	/^    void Process(const std::string &line) {$/;"	f	class:unise::internal::DasCbMethodClosure0
UTIL_DAS_LOADER_H_	ju-seatch\unise\util\das_loader.h	9;"	d
_DELIM	ju-seatch\unise\util\das_loader.h	/^    const char _DELIM;         \/**< das增量记录之间的分隔符       *\/$/;"	m	class:unise::DasLoader
_begin_file_id	ju-seatch\unise\util\das_loader.h	/^    uint32_t _begin_file_id;          \/**< 增量的起始加载文件的ID       *\/$/;"	m	class:unise::DasLoader
_begin_file_line	ju-seatch\unise\util\das_loader.h	/^    uint32_t _begin_file_line;        \/**< 文件的起始加载行数       *\/$/;"	m	class:unise::DasLoader
_callbacks	ju-seatch\unise\util\das_loader.h	/^    std::vector<boost::shared_ptr<DasCbClosure> > _callbacks;         \/**< 处理一行das增量的回调函数列表       *\/$/;"	m	class:unise::DasLoader
_cond	ju-seatch\unise\util\das_loader.h	/^    pthread_cond_t _cond;$/;"	m	class:unise::DasLoader
_cur_file_id	ju-seatch\unise\util\das_loader.h	/^    uint32_t _cur_file_id;       \/**< 当前正在读取的增量文件ID       *\/$/;"	m	class:unise::DasLoader
_cur_in_stream	ju-seatch\unise\util\das_loader.h	/^    std::ifstream _cur_in_stream;         \/**< 当前的文件输入流       *\/$/;"	m	class:unise::DasLoader
_cur_line_head_offset	ju-seatch\unise\util\das_loader.h	/^    ssize_t _cur_line_head_offset;       \/**< 当前的文件输入流上一个记录结尾处的偏移       *\/$/;"	m	class:unise::DasLoader
_file_monitor	ju-seatch\unise\util\das_loader.h	/^    FileMonitor *_file_monitor;       \/**< 文件监控类实例指针       *\/$/;"	m	class:unise::DasLoader
_inc_dir	ju-seatch\unise\util\das_loader.h	/^    const std::string _inc_dir;         \/**< 增量文件目录       *\/$/;"	m	class:unise::DasLoader
_inc_file_name_prefix	ju-seatch\unise\util\das_loader.h	/^    const std::string _inc_file_name_prefix;          \/**< 增量文件名字的前缀       *\/$/;"	m	class:unise::DasLoader
_info_file_name	ju-seatch\unise\util\das_loader.h	/^    const std::string _info_file_name;        \/**< 描述增量加载起始位置的文件的名字       *\/$/;"	m	class:unise::DasLoader
_inited	ju-seatch\unise\util\das_loader.h	/^    bool    _inited;        \/\/\/< 是否已经追上增量$/;"	m	class:unise::DasLoader
_mutex	ju-seatch\unise\util\das_loader.h	/^    pthread_mutex_t _mutex;$/;"	m	class:unise::DasLoader
_stopped	ju-seatch\unise\util\das_loader.h	/^    bool _stopped;       \/**< 是否退出标志       *\/$/;"	m	class:unise::DasLoader
_updated	ju-seatch\unise\util\das_loader.h	/^    int _updated;        \/**< 记录未响应的更新次数       *\/$/;"	m	class:unise::DasLoader
function_	ju-seatch\unise\util\das_loader.h	/^    FunctionType function_;$/;"	m	class:unise::internal::DasCbFunctionClosure0
inited	ju-seatch\unise\util\das_loader.h	/^    inline bool inited() const {$/;"	f	class:unise::DasLoader
internal	ju-seatch\unise\util\das_loader.h	/^namespace internal {$/;"	n	namespace:unise
is_stop	ju-seatch\unise\util\das_loader.h	/^    inline bool is_stop() const {$/;"	f	class:unise::DasLoader
method_	ju-seatch\unise\util\das_loader.h	/^    MethodType method_;$/;"	m	class:unise::internal::DasCbMethodClosure0
object_	ju-seatch\unise\util\das_loader.h	/^    Class* object_;$/;"	m	class:unise::internal::DasCbMethodClosure0
process_line	ju-seatch\unise\util\das_loader.h	/^    void process_line(const std::string &line) {\/*{{{*\/$/;"	f	class:unise::DasLoader
raise	ju-seatch\unise\util\das_loader.h	/^    void raise() {\/*{{{*\/$/;"	f	class:unise::DasLoader
self_deleting_	ju-seatch\unise\util\das_loader.h	/^    bool self_deleting_;$/;"	m	class:unise::internal::DasCbFunctionClosure0
self_deleting_	ju-seatch\unise\util\das_loader.h	/^    bool self_deleting_;$/;"	m	class:unise::internal::DasCbMethodClosure0
stop	ju-seatch\unise\util\das_loader.h	/^    void stop() {$/;"	f	class:unise::DasLoader
unise	ju-seatch\unise\util\das_loader.h	/^namespace unise {$/;"	n
wait	ju-seatch\unise\util\das_loader.h	/^    void wait() {\/*{{{*\/$/;"	f	class:unise::DasLoader
~DasCbClosure	ju-seatch\unise\util\das_loader.h	/^    virtual ~DasCbClosure() {}$/;"	f	class:unise::DasCbClosure
~DasCbFunctionClosure0	ju-seatch\unise\util\das_loader.h	/^    virtual ~DasCbFunctionClosure0() {}$/;"	f	class:unise::internal::DasCbFunctionClosure0
~DasCbMethodClosure0	ju-seatch\unise\util\das_loader.h	/^    virtual ~DasCbMethodClosure0() {}$/;"	f	class:unise::internal::DasCbMethodClosure0
DelayedJobs	ju-seatch\unise\util\delayed.cc	/^DelayedJobs::DelayedJobs(size_t n) : _cb_queue(n) {$/;"	f	class:unise::DelayedJobs
LazyTimedJobs	ju-seatch\unise\util\delayed.cc	/^LazyTimedJobs::LazyTimedJobs(long tick_in_ms, size_t n) :$/;"	f	class:unise::LazyTimedJobs
add	ju-seatch\unise\util\delayed.cc	/^bool DelayedJobs::add(Closure * closure) {$/;"	f	class:unise::DelayedJobs
tick	ju-seatch\unise\util\delayed.cc	/^size_t DelayedJobs::tick() {$/;"	f	class:unise::DelayedJobs
tick	ju-seatch\unise\util\delayed.cc	/^size_t LazyTimedJobs::tick() {$/;"	f	class:unise::LazyTimedJobs
tick_all	ju-seatch\unise\util\delayed.cc	/^size_t DelayedJobs::tick_all() {$/;"	f	class:unise::DelayedJobs
unise	ju-seatch\unise\util\delayed.cc	/^namespace unise {$/;"	n	file:
~DelayedJobs	ju-seatch\unise\util\delayed.cc	/^DelayedJobs::~DelayedJobs() {$/;"	f	class:unise::DelayedJobs
DEFINE_EVENT	ju-seatch\unise\util\event.h	45;"	d
Event	ju-seatch\unise\util\event.h	/^    typedef boost::signals2::signal<void ()>    Event;$/;"	t	struct:unise::EventEnv
EventEnv	ju-seatch\unise\util\event.h	/^struct EventEnv {$/;"	s	namespace:unise
HANDLE_EVENT	ju-seatch\unise\util\event.h	60;"	d
RAISE_EVENT	ju-seatch\unise\util\event.h	67;"	d
REGISTER_HANDLER	ju-seatch\unise\util\event.h	63;"	d
UTIL_EVENT_H_	ju-seatch\unise\util\event.h	37;"	d
unise	ju-seatch\unise\util\event.h	/^namespace unise$/;"	n
g_factory_map	ju-seatch\unise\util\factory.cc	/^BaseClassMap& g_factory_map()$/;"	f	namespace:unise
unise	ju-seatch\unise\util\factory.cc	/^namespace unise$/;"	n	file:
FileSystem	ju-seatch\unise\util\file.h	/^class FileSystem$/;"	c	namespace:unise
UTIL_FILE_H_	ju-seatch\unise\util\file.h	2;"	d
get_sub_paths	ju-seatch\unise\util\file.h	/^    static bool get_sub_paths(const std::string &path, std::vector<std::string> *subpaths) {$/;"	f	class:unise::FileSystem
is_dir	ju-seatch\unise\util\file.h	/^    static bool is_dir(const std::string &path) {$/;"	f	class:unise::FileSystem
is_file_exist	ju-seatch\unise\util\file.h	/^    static bool is_file_exist(const std::string &file_name) {$/;"	f	class:unise::FileSystem
unise	ju-seatch\unise\util\file.h	/^namespace unise$/;"	n
FileMonitor	ju-seatch\unise\util\file_monitor.cc	/^FileMonitor::FileMonitor()$/;"	f	class:unise::FileMonitor
_handle_event	ju-seatch\unise\util\file_monitor.cc	/^void FileMonitor::_handle_event(int wd, uint32_t mask)$/;"	f	class:unise::FileMonitor
_handle_fail	ju-seatch\unise\util\file_monitor.cc	/^void FileMonitor::_handle_fail()$/;"	f	class:unise::FileMonitor
register_fcb	ju-seatch\unise\util\file_monitor.cc	/^bool FileMonitor::register_fcb(const std::string& path, Closure* callback)$/;"	f	class:unise::FileMonitor
remove_fcb	ju-seatch\unise\util\file_monitor.cc	/^void FileMonitor::remove_fcb(const std::string &path)$/;"	f	class:unise::FileMonitor
run	ju-seatch\unise\util\file_monitor.cc	/^int FileMonitor::run()$/;"	f	class:unise::FileMonitor
unise	ju-seatch\unise\util\file_monitor.cc	/^namespace unise$/;"	n	file:
~FileMonitor	ju-seatch\unise\util\file_monitor.cc	/^FileMonitor::~FileMonitor()$/;"	f	class:unise::FileMonitor
FileMonitor	ju-seatch\unise\util\file_monitor.h	/^class FileMonitor : public Thread$/;"	c	namespace:unise
HANDLE_IN_EVENTS	ju-seatch\unise\util\file_monitor.h	/^    static const uint32_t HANDLE_IN_EVENTS = IN_CLOSE_WRITE;$/;"	m	class:unise::FileMonitor
READ_BUFLEN	ju-seatch\unise\util\file_monitor.h	/^    static const size_t READ_BUFLEN = 4096;$/;"	m	class:unise::FileMonitor
UTIL_FILE_MONITOR_H_	ju-seatch\unise\util\file_monitor.h	2;"	d
WATCH_IN_EVENTS	ju-seatch\unise\util\file_monitor.h	/^    static const uint32_t WATCH_IN_EVENTS = IN_CLOSE_WRITE | IN_DELETE | IN_CREATE$/;"	m	class:unise::FileMonitor
_fail_paths	ju-seatch\unise\util\file_monitor.h	/^    std::vector<std::string>    _fail_paths;    \/\/\/< inode失效的路径列表$/;"	m	class:unise::FileMonitor
_mutex	ju-seatch\unise\util\file_monitor.h	/^    boost::shared_mutex         _mutex;         \/\/\/< 更新锁$/;"	m	class:unise::FileMonitor
_on_exit	ju-seatch\unise\util\file_monitor.h	/^    void _on_exit() {$/;"	f	class:unise::FileMonitor
_path_map	ju-seatch\unise\util\file_monitor.h	/^    path_map_t                  _path_map;      \/\/\/< 从路径名到回调$/;"	m	class:unise::FileMonitor
_sig_exit	ju-seatch\unise\util\file_monitor.h	/^    bool                        _sig_exit;      \/\/\/< 让线程退出的信号$/;"	m	class:unise::FileMonitor
_timeout_ms	ju-seatch\unise\util\file_monitor.h	/^    int32_t                     _timeout_ms;    \/\/\/< 每次 select 的超时时间$/;"	m	class:unise::FileMonitor
_watch_fd	ju-seatch\unise\util\file_monitor.h	/^    int32_t                     _watch_fd;      \/\/\/< inotify 的 watch 句柄$/;"	m	class:unise::FileMonitor
_wd_map	ju-seatch\unise\util\file_monitor.h	/^    wd_map_t                    _wd_map;        \/\/\/< 从 wd 到路径名$/;"	m	class:unise::FileMonitor
callbacks	ju-seatch\unise\util\file_monitor.h	/^        std::vector<boost::shared_ptr<Closure> >    callbacks;  \/\/\/< 该路径上注册的回调列表$/;"	m	struct:unise::FileMonitor::fm_info_t
fm_info_t	ju-seatch\unise\util\file_monitor.h	/^    struct fm_info_t {$/;"	s	class:unise::FileMonitor
path_map_t	ju-seatch\unise\util\file_monitor.h	/^    typedef std::map<std::string, fm_info_t>    path_map_t;$/;"	t	class:unise::FileMonitor
stop	ju-seatch\unise\util\file_monitor.h	/^    void stop() { _sig_exit = true; }$/;"	f	class:unise::FileMonitor
unise	ju-seatch\unise\util\file_monitor.h	/^namespace unise$/;"	n
wd	ju-seatch\unise\util\file_monitor.h	/^        int                                         wd;         \/\/\/< watch 句柄$/;"	m	struct:unise::FileMonitor::fm_info_t
wd_map_t	ju-seatch\unise\util\file_monitor.h	/^    typedef std::map<int, std::string>          wd_map_t;$/;"	t	class:unise::FileMonitor
global_init	ju-seatch\unise\util\global_init.cc	/^void GlobalInit::global_init(int argc, char *argv[]) {$/;"	f	class:unise::GlobalInit
unise	ju-seatch\unise\util\global_init.cc	/^namespace unise {$/;"	n	file:
GlobalInit	ju-seatch\unise\util\global_init.h	/^    GlobalInit() {}$/;"	f	class:unise::GlobalInit
GlobalInit	ju-seatch\unise\util\global_init.h	/^class GlobalInit {$/;"	c	namespace:unise
UTIL_GLOBAL_INIT_H	ju-seatch\unise\util\global_init.h	2;"	d
unise	ju-seatch\unise\util\global_init.h	/^namespace unise {$/;"	n
~GlobalInit	ju-seatch\unise\util\global_init.h	/^    ~GlobalInit() {}$/;"	f	class:unise::GlobalInit
UTIL_HASH_TABLES_H	ju-seatch\unise\util\hash_tables.h	2;"	d
AddContent	ju-seatch\unise\util\http_server\http_server.cc	/^void Respond::AddContent(const string &info)$/;"	f	class:unise::Respond
AddHeader	ju-seatch\unise\util\http_server\http_server.cc	/^void Respond::AddHeader(const string &key, const string &value)$/;"	f	class:unise::Respond
FlushToString	ju-seatch\unise\util\http_server\http_server.cc	/^string Respond::FlushToString()$/;"	f	class:unise::Respond
GetBodyContent	ju-seatch\unise\util\http_server\http_server.cc	/^string Request::GetBodyContent() const$/;"	f	class:unise::Request
GetHeaderValue	ju-seatch\unise\util\http_server\http_server.cc	/^string Request::GetHeaderValue(const string& head_name) const$/;"	f	class:unise::Request
GetPostParamValue	ju-seatch\unise\util\http_server\http_server.cc	/^string Request::GetPostParamValue(const string& param_name) const$/;"	f	class:unise::Request
GetUrlParamValue	ju-seatch\unise\util\http_server\http_server.cc	/^string Request::GetUrlParamValue(const string& param_name) const$/;"	f	class:unise::Request
HandleReq	ju-seatch\unise\util\http_server\http_server.cc	/^bool HttpServer::HandleReq(int work_fd)$/;"	f	class:unise::HttpServer
HandleWraper	ju-seatch\unise\util\http_server\http_server.cc	/^bool HttpServer::HandleWraper(const Request &request, Respond *respond)$/;"	f	class:unise::HttpServer
HttpServer	ju-seatch\unise\util\http_server\http_server.cc	/^HttpServer::HttpServer($/;"	f	class:unise::HttpServer
Init	ju-seatch\unise\util\http_server\http_server.cc	/^void HttpServer::Init($/;"	f	class:unise::HttpServer
ParseKvlist	ju-seatch\unise\util\http_server\http_server.cc	/^void ParseKvlist($/;"	f	namespace:unise
ParseRequest	ju-seatch\unise\util\http_server\http_server.cc	/^bool HttpServer::ParseRequest($/;"	f	class:unise::HttpServer
RecvRequest	ju-seatch\unise\util\http_server\http_server.cc	/^bool HttpServer::RecvRequest(int sock)$/;"	f	class:unise::HttpServer
Respond	ju-seatch\unise\util\http_server\http_server.cc	/^Respond::Respond()$/;"	f	class:unise::Respond
RunWithEpoll	ju-seatch\unise\util\http_server\http_server.cc	/^void HttpServer::RunWithEpoll()$/;"	f	class:unise::HttpServer
SetStatus	ju-seatch\unise\util\http_server\http_server.cc	/^void Respond::SetStatus(const int32_t &status)$/;"	f	class:unise::Respond
TimingStart	ju-seatch\unise\util\http_server\http_server.cc	/^void HttpServer::TimingStart(int wait_sec)$/;"	f	class:unise::HttpServer
kMaxEpollSize	ju-seatch\unise\util\http_server\http_server.cc	/^const int kMaxEpollSize = 10000;$/;"	m	namespace:__anon1	file:
run	ju-seatch\unise\util\http_server\http_server.cc	/^int HttpServer::run()$/;"	f	class:unise::HttpServer
unise	ju-seatch\unise\util\http_server\http_server.cc	/^namespace unise$/;"	n	file:
url_decode	ju-seatch\unise\util\http_server\http_server.cc	/^bool Request::url_decode(const std::string& in, std::string& out)$/;"	f	class:unise::Request
~HttpServer	ju-seatch\unise\util\http_server\http_server.cc	/^HttpServer::~HttpServer()$/;"	f	class:unise::HttpServer
AddHandler	ju-seatch\unise\util\http_server\http_server.h	/^    void AddHandler($/;"	f	class:unise::HttpServer
HandleStatus	ju-seatch\unise\util\http_server\http_server.h	/^enum HandleStatus {$/;"	g	namespace:unise
HttpServer	ju-seatch\unise\util\http_server\http_server.h	/^class HttpServer : public unise::Thread$/;"	c	namespace:unise
Init	ju-seatch\unise\util\http_server\http_server.h	/^    virtual void Init() {}$/;"	f	class:unise::HttpServer
Request	ju-seatch\unise\util\http_server\http_server.h	/^class Request$/;"	c	namespace:unise
Respond	ju-seatch\unise\util\http_server\http_server.h	/^class Respond$/;"	c	namespace:unise
ServerPort	ju-seatch\unise\util\http_server\http_server.h	/^    uint16_t ServerPort() const { return port_; }$/;"	f	class:unise::HttpServer
SetDftHandler	ju-seatch\unise\util\http_server\http_server.h	/^    void SetDftHandler(Type* obj,$/;"	f	class:unise::HttpServer
SetRootPath	ju-seatch\unise\util\http_server\http_server.h	/^    void SetRootPath(std::string root_path) {$/;"	f	class:unise::HttpServer
Stop	ju-seatch\unise\util\http_server\http_server.h	/^    void Stop() {$/;"	f	class:unise::HttpServer
StrToCallback	ju-seatch\unise\util\http_server\http_server.h	/^    typedef __gnu_cxx::hash_map<std::string, unise::ResultCallback2<bool, const Request&, Respond*>*> StrToCallback;$/;"	t	class:unise::HttpServer
TryStop	ju-seatch\unise\util\http_server\http_server.h	/^    void TryStop() {$/;"	f	class:unise::HttpServer
Type	ju-seatch\unise\util\http_server\http_server.h	/^    enum Type {$/;"	g	class:unise::Request
UTIL_HTTP_SERVER_HTTP_SERVER_H_	ju-seatch\unise\util\http_server\http_server.h	2;"	d
body_content_	ju-seatch\unise\util\http_server\http_server.h	/^    std::string body_content_;$/;"	m	class:unise::Request
content_	ju-seatch\unise\util\http_server\http_server.h	/^    std::string content_;$/;"	m	class:unise::Respond
dft_handler_	ju-seatch\unise\util\http_server\http_server.h	/^    unise::ResultCallback2<bool, const Request &, Respond*>* dft_handler_;$/;"	m	class:unise::HttpServer
epoll_instance_	ju-seatch\unise\util\http_server\http_server.h	/^    int epoll_instance_;$/;"	m	class:unise::HttpServer
handlers_	ju-seatch\unise\util\http_server\http_server.h	/^    StrToCallback handlers_;$/;"	m	class:unise::HttpServer
header	ju-seatch\unise\util\http_server\http_server.h	/^    const std::map<std::string, std::string> &header() const { return header_; }$/;"	f	class:unise::Request
header_	ju-seatch\unise\util\http_server\http_server.h	/^    std::map<std::string, std::string> header_;$/;"	m	class:unise::Request
header_	ju-seatch\unise\util\http_server\http_server.h	/^    std::map<std::string, std::string> header_;$/;"	m	class:unise::Respond
interval_ms_	ju-seatch\unise\util\http_server\http_server.h	/^    uint32_t interval_ms_;$/;"	m	class:unise::HttpServer
kCloseSock	ju-seatch\unise\util\http_server\http_server.h	/^    kCloseSock,$/;"	e	enum:unise::HandleStatus
kHandleError	ju-seatch\unise\util\http_server\http_server.h	/^    kHandleError$/;"	e	enum:unise::HandleStatus
kHttpGet	ju-seatch\unise\util\http_server\http_server.h	/^        kHttpGet,$/;"	e	enum:unise::Request::Type
kHttpPost	ju-seatch\unise\util\http_server\http_server.h	/^        kHttpPost,$/;"	e	enum:unise::Request::Type
kKeepAlive	ju-seatch\unise\util\http_server\http_server.h	/^    kKeepAlive,$/;"	e	enum:unise::HandleStatus
kRecvBufLen	ju-seatch\unise\util\http_server\http_server.h	/^    static const uint32_t kRecvBufLen = 1024 * 1024 * 10;$/;"	m	class:unise::HttpServer
kRecvTimeout	ju-seatch\unise\util\http_server\http_server.h	/^    static const uint32_t kRecvTimeout = 1000 * 10;$/;"	m	class:unise::HttpServer
port_	ju-seatch\unise\util\http_server\http_server.h	/^    uint32_t port_;$/;"	m	class:unise::HttpServer
post_param_vec	ju-seatch\unise\util\http_server\http_server.h	/^    post_param_vec() const {$/;"	f	class:unise::Request
post_param_vec_	ju-seatch\unise\util\http_server\http_server.h	/^    std::vector<std::pair<std::string, std::string> > post_param_vec_;$/;"	m	class:unise::Request
post_params	ju-seatch\unise\util\http_server\http_server.h	/^    const std::map<std::string, std::string> &post_params() const {$/;"	f	class:unise::Request
post_params_	ju-seatch\unise\util\http_server\http_server.h	/^    std::map<std::string, std::string> post_params_;$/;"	m	class:unise::Request
recv_buf_	ju-seatch\unise\util\http_server\http_server.h	/^    char *recv_buf_;$/;"	m	class:unise::HttpServer
root_path_	ju-seatch\unise\util\http_server\http_server.h	/^    std::string root_path_;$/;"	m	class:unise::HttpServer
status_	ju-seatch\unise\util\http_server\http_server.h	/^    int32_t status_;$/;"	m	class:unise::Respond
stop_	ju-seatch\unise\util\http_server\http_server.h	/^    bool stop_;$/;"	m	class:unise::HttpServer
type	ju-seatch\unise\util\http_server\http_server.h	/^    Type type() const { return type_; }$/;"	f	class:unise::Request
type_	ju-seatch\unise\util\http_server\http_server.h	/^    Type type_;$/;"	m	class:unise::Request
unise	ju-seatch\unise\util\http_server\http_server.h	/^namespace unise$/;"	n
url	ju-seatch\unise\util\http_server\http_server.h	/^    std::string url() const { return url_; }$/;"	f	class:unise::Request
url_	ju-seatch\unise\util\http_server\http_server.h	/^    std::string url_;$/;"	m	class:unise::Request
url_param_vec	ju-seatch\unise\util\http_server\http_server.h	/^    url_param_vec() const {$/;"	f	class:unise::Request
url_param_vec_	ju-seatch\unise\util\http_server\http_server.h	/^    std::vector<std::pair<std::string, std::string> > url_param_vec_;$/;"	m	class:unise::Request
url_params	ju-seatch\unise\util\http_server\http_server.h	/^    const std::map<std::string, std::string> &url_params() const {$/;"	f	class:unise::Request
url_params_	ju-seatch\unise\util\http_server\http_server.h	/^    std::map<std::string, std::string> url_params_;$/;"	m	class:unise::Request
user_passes_	ju-seatch\unise\util\http_server\http_server.h	/^    std::vector<std::pair<std::string, std::string> > user_passes_;$/;"	m	class:unise::HttpServer
wait_sec_	ju-seatch\unise\util\http_server\http_server.h	/^    int wait_sec_;$/;"	m	class:unise::HttpServer
SYS_inotify_add_watch	ju-seatch\unise\util\inotify.cc	23;"	d	file:
SYS_inotify_init	ju-seatch\unise\util\inotify.cc	21;"	d	file:
SYS_inotify_init1	ju-seatch\unise\util\inotify.cc	22;"	d	file:
SYS_inotify_rm_watch	ju-seatch\unise\util\inotify.cc	24;"	d	file:
__NR_inotify_add_watch	ju-seatch\unise\util\inotify.cc	14;"	d	file:
__NR_inotify_init	ju-seatch\unise\util\inotify.cc	13;"	d	file:
__NR_inotify_init1	ju-seatch\unise\util\inotify.cc	16;"	d	file:
__NR_inotify_rm_watch	ju-seatch\unise\util\inotify.cc	15;"	d	file:
IN_ACCESS	ju-seatch\unise\util\inotify.h	50;"	d
IN_ALL_EVENTS	ju-seatch\unise\util\inotify.h	84;"	d
IN_ATTRIB	ju-seatch\unise\util\inotify.h	52;"	d
IN_CLOEXEC	ju-seatch\unise\util\inotify.h	/^    IN_CLOEXEC = 02000000,$/;"	e	enum:__anon2
IN_CLOEXEC	ju-seatch\unise\util\inotify.h	33;"	d
IN_CLOSE	ju-seatch\unise\util\inotify.h	55;"	d
IN_CLOSE	ju-seatch\unise\util\inotify.h	71;"	d
IN_CLOSE_NOWRITE	ju-seatch\unise\util\inotify.h	54;"	d
IN_CLOSE_WRITE	ju-seatch\unise\util\inotify.h	53;"	d
IN_CREATE	ju-seatch\unise\util\inotify.h	60;"	d
IN_DELETE	ju-seatch\unise\util\inotify.h	61;"	d
IN_DELETE_SELF	ju-seatch\unise\util\inotify.h	62;"	d
IN_DONT_FOLLOW	ju-seatch\unise\util\inotify.h	77;"	d
IN_IGNORED	ju-seatch\unise\util\inotify.h	68;"	d
IN_ISDIR	ju-seatch\unise\util\inotify.h	80;"	d
IN_MASK_ADD	ju-seatch\unise\util\inotify.h	78;"	d
IN_MODIFY	ju-seatch\unise\util\inotify.h	51;"	d
IN_MOVE	ju-seatch\unise\util\inotify.h	59;"	d
IN_MOVE	ju-seatch\unise\util\inotify.h	72;"	d
IN_MOVED_FROM	ju-seatch\unise\util\inotify.h	57;"	d
IN_MOVED_TO	ju-seatch\unise\util\inotify.h	58;"	d
IN_MOVE_SELF	ju-seatch\unise\util\inotify.h	63;"	d
IN_NONBLOCK	ju-seatch\unise\util\inotify.h	/^    IN_NONBLOCK = 04000$/;"	e	enum:__anon2
IN_NONBLOCK	ju-seatch\unise\util\inotify.h	35;"	d
IN_ONESHOT	ju-seatch\unise\util\inotify.h	81;"	d
IN_ONLYDIR	ju-seatch\unise\util\inotify.h	75;"	d
IN_OPEN	ju-seatch\unise\util\inotify.h	56;"	d
IN_Q_OVERFLOW	ju-seatch\unise\util\inotify.h	67;"	d
IN_UNMOUNT	ju-seatch\unise\util\inotify.h	66;"	d
_SYS_INOTIFY_H	ju-seatch\unise\util\inotify.h	25;"	d
__flexarr	ju-seatch\unise\util\inotify.h	/^    char name __flexarr;	\/* Name.  *\/$/;"	m	struct:inotify_event
cookie	ju-seatch\unise\util\inotify.h	/^    uint32_t cookie;	\/* Cookie to synchronize two events.  *\/$/;"	m	struct:inotify_event
inotify_event	ju-seatch\unise\util\inotify.h	/^struct inotify_event {$/;"	s
len	ju-seatch\unise\util\inotify.h	/^    uint32_t len;		\/* Length (including NULs) of name.  *\/$/;"	m	struct:inotify_event
mask	ju-seatch\unise\util\inotify.h	/^    uint32_t mask;	\/* Watch mask.  *\/$/;"	m	struct:inotify_event
wd	ju-seatch\unise\util\inotify.h	/^    int wd;		\/* Watch descriptor.  *\/$/;"	m	struct:inotify_event
AllocNewBlock	ju-seatch\unise\util\masf_mempool.cc	/^void SolidMempool::AllocNewBlock()$/;"	f	class:unise::SolidMempool
BalancePool	ju-seatch\unise\util\masf_mempool.cc	/^void SolidMempool::BalancePool()$/;"	f	class:unise::SolidMempool
Destroy	ju-seatch\unise\util\masf_mempool.cc	/^void SolidMempool::Destroy()$/;"	f	class:unise::SolidMempool
Malloc	ju-seatch\unise\util\masf_mempool.cc	/^void *SolidMempool::Malloc()$/;"	f	class:unise::SolidMempool
Recycle	ju-seatch\unise\util\masf_mempool.cc	/^void SolidMempool::Recycle()$/;"	f	class:unise::SolidMempool
SolidMempool	ju-seatch\unise\util\masf_mempool.cc	/^SolidMempool::SolidMempool($/;"	f	class:unise::SolidMempool
unise	ju-seatch\unise\util\masf_mempool.cc	/^namespace unise$/;"	n	file:
~SolidMempool	ju-seatch\unise\util\masf_mempool.cc	/^SolidMempool::~SolidMempool()$/;"	f	class:unise::SolidMempool
Delete	ju-seatch\unise\util\masf_mempool.h	/^    void Delete(Type *obj) {$/;"	f	class:unise::MasfObjPool
GetTotalSize	ju-seatch\unise\util\masf_mempool.h	/^    size_t GetTotalSize() {$/;"	f	class:unise::SolidMempool
GetUsedSize	ju-seatch\unise\util\masf_mempool.h	/^    size_t GetUsedSize() {$/;"	f	class:unise::SolidMempool
MasfObjPool	ju-seatch\unise\util\masf_mempool.h	/^    MasfObjPool($/;"	f	class:unise::MasfObjPool
MasfObjPool	ju-seatch\unise\util\masf_mempool.h	/^class MasfObjPool : public SolidMempool$/;"	c	namespace:unise
New	ju-seatch\unise\util\masf_mempool.h	/^    Type *New() {$/;"	f	class:unise::MasfObjPool
New	ju-seatch\unise\util\masf_mempool.h	/^    Type *New(Arg1 arg1) {$/;"	f	class:unise::MasfObjPool
New	ju-seatch\unise\util\masf_mempool.h	/^    Type *New(Arg1 arg1, Arg2 arg2) {$/;"	f	class:unise::MasfObjPool
New	ju-seatch\unise\util\masf_mempool.h	/^    Type *New(Arg1 arg1, Arg2 arg2, Arg3 arg3) {$/;"	f	class:unise::MasfObjPool
New	ju-seatch\unise\util\masf_mempool.h	/^    Type *New(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4) {$/;"	f	class:unise::MasfObjPool
New	ju-seatch\unise\util\masf_mempool.h	/^    Type *New(Arg1 arg1, Arg2 arg2, Arg3 arg3, Arg4 arg4, Arg5 arg5) {$/;"	f	class:unise::MasfObjPool
Recycle	ju-seatch\unise\util\masf_mempool.h	/^    virtual void Recycle() {$/;"	f	class:unise::MasfObjPool
SolidMempool	ju-seatch\unise\util\masf_mempool.h	/^class SolidMempool$/;"	c	namespace:unise
UTIL_MASF_MEMPOOL_H_	ju-seatch\unise\util\masf_mempool.h	2;"	d
balance_period_	ju-seatch\unise\util\masf_mempool.h	/^    int balance_period_;$/;"	m	class:unise::SolidMempool
block_idx_	ju-seatch\unise\util\masf_mempool.h	/^    size_t block_idx_;$/;"	m	class:unise::SolidMempool
blocks_	ju-seatch\unise\util\masf_mempool.h	/^    std::vector<char *> blocks_;$/;"	m	class:unise::SolidMempool
debug_mem_count_	ju-seatch\unise\util\masf_mempool.h	/^    int debug_mem_count_;$/;"	m	class:unise::MasfObjPool
inv_balance_factor_	ju-seatch\unise\util\masf_mempool.h	/^    float inv_balance_factor_;$/;"	m	class:unise::SolidMempool
item_idx_	ju-seatch\unise\util\masf_mempool.h	/^    size_t item_idx_;$/;"	m	class:unise::SolidMempool
item_per_block_	ju-seatch\unise\util\masf_mempool.h	/^    size_t item_per_block_;$/;"	m	class:unise::SolidMempool
item_size_	ju-seatch\unise\util\masf_mempool.h	/^    size_t item_size_;$/;"	m	class:unise::SolidMempool
kDftBalanceFactor	ju-seatch\unise\util\masf_mempool.h	/^const float kDftBalanceFactor = 0.5;$/;"	m	namespace:unise
kDftBalancePeriod	ju-seatch\unise\util\masf_mempool.h	/^const int kDftBalancePeriod = 100;$/;"	m	namespace:unise
kDftItemPerBlock	ju-seatch\unise\util\masf_mempool.h	/^const size_t kDftItemPerBlock = 64U;$/;"	m	namespace:unise
max_used_per_period_	ju-seatch\unise\util\masf_mempool.h	/^    uint64_t max_used_per_period_;$/;"	m	class:unise::SolidMempool
next_balance_time_	ju-seatch\unise\util\masf_mempool.h	/^    uint32_t next_balance_time_;$/;"	m	class:unise::SolidMempool
unise	ju-seatch\unise\util\masf_mempool.h	/^namespace unise$/;"	n
~MasfObjPool	ju-seatch\unise\util\masf_mempool.h	/^    virtual ~MasfObjPool() {}$/;"	f	class:unise::MasfObjPool
Queue	ju-seatch\unise\util\queue.h	/^    Queue(): _status(kOpen) {$/;"	f	class:unise::Queue
Queue	ju-seatch\unise\util\queue.h	/^class Queue$/;"	c	namespace:unise
Status	ju-seatch\unise\util\queue.h	/^    enum Status {$/;"	g	class:unise::Queue
UTIL_QUEUE_H_	ju-seatch\unise\util\queue.h	2;"	d
_cond	ju-seatch\unise\util\queue.h	/^    boost::condition_variable   _cond;      \/\/\/< Condition variable$/;"	m	class:unise::Queue
_mutex	ju-seatch\unise\util\queue.h	/^    mutable boost::mutex        _mutex;     \/\/\/< Lock$/;"	m	class:unise::Queue
_queue	ju-seatch\unise\util\queue.h	/^    std::queue<T>               _queue;     \/\/\/< Container$/;"	m	class:unise::Queue
_status	ju-seatch\unise\util\queue.h	/^    Status                      _status;    \/\/\/< Queus status$/;"	m	class:unise::Queue
close	ju-seatch\unise\util\queue.h	/^    void close(bool immediately = false) {$/;"	f	class:unise::Queue
empty	ju-seatch\unise\util\queue.h	/^    bool empty() const {$/;"	f	class:unise::Queue
kClosed	ju-seatch\unise\util\queue.h	/^        kClosed,    \/\/\/< The queue is closed$/;"	e	enum:unise::Queue::Status
kClosing	ju-seatch\unise\util\queue.h	/^        kClosing,   \/\/\/< The queue is closing$/;"	e	enum:unise::Queue::Status
kOpen	ju-seatch\unise\util\queue.h	/^        kOpen,      \/\/\/< The queue is opened$/;"	e	enum:unise::Queue::Status
open	ju-seatch\unise\util\queue.h	/^    void open() {$/;"	f	class:unise::Queue
pop	ju-seatch\unise\util\queue.h	/^    bool pop(T& t) {$/;"	f	class:unise::Queue
push	ju-seatch\unise\util\queue.h	/^    bool push(const T& t) {$/;"	f	class:unise::Queue
size	ju-seatch\unise\util\queue.h	/^    size_t size() const {$/;"	f	class:unise::Queue
try_pop	ju-seatch\unise\util\queue.h	/^    bool try_pop(T& t) {$/;"	f	class:unise::Queue
unise	ju-seatch\unise\util\queue.h	/^namespace unise$/;"	n
value_type	ju-seatch\unise\util\queue.h	/^    typedef T   value_type;$/;"	t	class:unise::Queue
StateMonitor	ju-seatch\unise\util\state_monitor.cc	/^StateMonitor::StateMonitor() :$/;"	f	class:unise::StateMonitor
add_state_message	ju-seatch\unise\util\state_monitor.cc	/^void StateMonitor::add_state_message(const state_message_t& smt) {$/;"	f	class:unise::StateMonitor
get_number_state_message	ju-seatch\unise\util\state_monitor.cc	/^size_t StateMonitor::get_number_state_message($/;"	f	class:unise::StateMonitor
get_text_state_message	ju-seatch\unise\util\state_monitor.cc	/^std::string StateMonitor::get_text_state_message(const std::string& key) {$/;"	f	class:unise::StateMonitor
process_number_message	ju-seatch\unise\util\state_monitor.cc	/^void StateMonitor::process_number_message(const state_message_t& smt) {$/;"	f	class:unise::StateMonitor
process_text_message	ju-seatch\unise\util\state_monitor.cc	/^void StateMonitor::process_text_message(const state_message_t& smt) {$/;"	f	class:unise::StateMonitor
run	ju-seatch\unise\util\state_monitor.cc	/^int StateMonitor::run() {$/;"	f	class:unise::StateMonitor
unise	ju-seatch\unise\util\state_monitor.cc	/^namespace unise {$/;"	n	file:
~StateMonitor	ju-seatch\unise\util\state_monitor.cc	/^StateMonitor::~StateMonitor() {$/;"	f	class:unise::StateMonitor
DequeQueue	ju-seatch\unise\util\state_monitor.h	/^    DequeQueue(size_t max_size) :$/;"	f	class:unise::DequeQueue
DequeQueue	ju-seatch\unise\util\state_monitor.h	/^class DequeQueue {$/;"	c	namespace:unise
UTIL_STATE_MONITOR_H	ju-seatch\unise\util\state_monitor.h	4;"	d
_list	ju-seatch\unise\util\state_monitor.h	/^    std::list<tens_record_t> _list;$/;"	m	class:unise::DequeQueue
_max_size	ju-seatch\unise\util\state_monitor.h	/^    size_t _max_size;$/;"	m	class:unise::DequeQueue
_mu	ju-seatch\unise\util\state_monitor.h	/^    mutable boost::shared_mutex _mu;$/;"	m	class:unise::DequeQueue
get_latest	ju-seatch\unise\util\state_monitor.h	/^    size_t get_latest(size_t num, std::vector<tens_record_t>* out) {$/;"	f	class:unise::DequeQueue
insert	ju-seatch\unise\util\state_monitor.h	/^    void insert(const tens_record_t& t) {$/;"	f	class:unise::DequeQueue
unise	ju-seatch\unise\util\state_monitor.h	/^namespace unise {$/;"	n
BoolToString	ju-seatch\unise\util\util.cc	/^std::string BoolToString(bool value)$/;"	f	namespace:unise
HexStringToInt	ju-seatch\unise\util\util.cc	/^bool HexStringToInt(const std::string& input, int* output)$/;"	f	namespace:unise
HexStringToInt64	ju-seatch\unise\util\util.cc	/^bool HexStringToInt64(const std::string& input, int64_t* output)$/;"	f	namespace:unise
HexStringToInt64Traits	ju-seatch\unise\util\util.cc	/^class HexStringToInt64Traits$/;"	c	namespace:unise	file:
HexStringToIntTraits	ju-seatch\unise\util\util.cc	/^class HexStringToIntTraits$/;"	c	namespace:unise	file:
Int64ToString	ju-seatch\unise\util\util.cc	/^std::string Int64ToString(int64_t value)$/;"	f	namespace:unise
Int64ToWString	ju-seatch\unise\util\util.cc	/^std::wstring Int64ToWString(int64_t value)$/;"	f	namespace:unise
IntToString	ju-seatch\unise\util\util.cc	/^bool IntToString(int64_t number, string * str)$/;"	f	namespace:unise
IntToString	ju-seatch\unise\util\util.cc	/^std::string IntToString(int value)$/;"	f	namespace:unise
IntToWString	ju-seatch\unise\util\util.cc	/^std::wstring IntToWString(int value)$/;"	f	namespace:unise
SizeStringToUint64	ju-seatch\unise\util\util.cc	/^bool SizeStringToUint64(const std::string& input_string, uint64_t* output)$/;"	f	namespace:unise
StringAppendF	ju-seatch\unise\util\util.cc	/^void StringAppendF(std::string* dst, const char* format, ...)$/;"	f	namespace:unise
StringAppendF	ju-seatch\unise\util\util.cc	/^void StringAppendF(std::wstring* dst, const wchar_t* format, ...)$/;"	f	namespace:unise
StringAppendV	ju-seatch\unise\util\util.cc	/^void StringAppendV(std::string* dst, const char* format, va_list ap)$/;"	f	namespace:unise
StringAppendV	ju-seatch\unise\util\util.cc	/^void StringAppendV(std::wstring* dst, const wchar_t* format, va_list ap)$/;"	f	namespace:unise
StringPrintf	ju-seatch\unise\util\util.cc	/^const std::string StringPrintf(const char* format, ...)$/;"	f	namespace:unise
StringPrintf	ju-seatch\unise\util\util.cc	/^const std::wstring StringPrintf(const wchar_t* format, ...)$/;"	f	namespace:unise
StringToBool	ju-seatch\unise\util\util.cc	/^bool StringToBool(const std::string& input, bool* output)$/;"	f	namespace:unise
StringToInt	ju-seatch\unise\util\util.cc	/^bool StringToInt(const std::string& input, int* output)$/;"	f	namespace:unise
StringToInt64	ju-seatch\unise\util\util.cc	/^bool StringToInt64(const std::string& input, int64_t* output)$/;"	f	namespace:unise
StringToInt64Traits	ju-seatch\unise\util\util.cc	/^class StringToInt64Traits$/;"	c	namespace:unise	file:
StringToIntTraits	ju-seatch\unise\util\util.cc	/^class StringToIntTraits$/;"	c	namespace:unise	file:
StringToUint	ju-seatch\unise\util\util.cc	/^bool StringToUint(const std::string& input, uint32_t* output)$/;"	f	namespace:unise
StringToUint64	ju-seatch\unise\util\util.cc	/^bool StringToUint64(const std::string& input, uint64_t* output)$/;"	f	namespace:unise
StringToUint64Traits	ju-seatch\unise\util\util.cc	/^class StringToUint64Traits$/;"	c	namespace:unise	file:
StringToUintTraits	ju-seatch\unise\util\util.cc	/^class StringToUintTraits$/;"	c	namespace:unise	file:
TrimString	ju-seatch\unise\util\util.cc	/^bool TrimString(const std::string& input,$/;"	f	namespace:unise
TrimString	ju-seatch\unise\util\util.cc	/^bool TrimString(const std::wstring& input,$/;"	f	namespace:unise
Uint64ToString	ju-seatch\unise\util\util.cc	/^std::string Uint64ToString(uint64_t value)$/;"	f	namespace:unise
Uint64ToWString	ju-seatch\unise\util\util.cc	/^std::wstring Uint64ToWString(uint64_t value)$/;"	f	namespace:unise
UintToString	ju-seatch\unise\util\util.cc	/^std::string UintToString(unsigned int value)$/;"	f	namespace:unise
UintToWString	ju-seatch\unise\util\util.cc	/^std::wstring UintToWString(unsigned int value)$/;"	f	namespace:unise
base64_decode	ju-seatch\unise\util\util.cc	/^int base64_decode(uint8_t * in, int len, uint8_t * out, int size) {$/;"	f	namespace:unise
base64_encode	ju-seatch\unise\util\util.cc	/^int base64_encode(const uint8_t * in, int len, uint8_t * out, int size) {$/;"	f	namespace:unise
convert_func	ju-seatch\unise\util\util.cc	/^    static inline value_type convert_func(const string_type::value_type* str,$/;"	f	class:unise::HexStringToInt64Traits
convert_func	ju-seatch\unise\util\util.cc	/^    static inline value_type convert_func(const string_type::value_type* str,$/;"	f	class:unise::HexStringToIntTraits
convert_func	ju-seatch\unise\util\util.cc	/^    static inline value_type convert_func(const string_type::value_type* str,$/;"	f	class:unise::StringToInt64Traits
convert_func	ju-seatch\unise\util\util.cc	/^    static inline value_type convert_func(const string_type::value_type* str,$/;"	f	class:unise::StringToIntTraits
convert_func	ju-seatch\unise\util\util.cc	/^    static inline value_type convert_func(const string_type::value_type* str,$/;"	f	class:unise::StringToUint64Traits
convert_func	ju-seatch\unise\util\util.cc	/^    static inline value_type convert_func(const string_type::value_type* str,$/;"	f	class:unise::StringToUintTraits
find_annotation_by_id	ju-seatch\unise\util\util.cc	/^const Annotation * find_annotation_by_id(uint32_t id, const DimensionDoc& doc) {$/;"	f	namespace:unise
generate_annotations_from_field	ju-seatch\unise\util\util.cc	/^bool generate_annotations_from_field(const std::string& field,$/;"	f	namespace:unise
generate_annotations_from_field	ju-seatch\unise\util\util.cc	/^bool generate_annotations_from_field(const std::string& value,$/;"	f	namespace:unise
get_bool_experiment_value	ju-seatch\unise\util\util.cc	/^bool get_bool_experiment_value(const GeneralSearchRequest & request,$/;"	f	namespace:unise
get_date	ju-seatch\unise\util\util.cc	/^std::string get_date(int32_t timestamp) {$/;"	f	namespace:unise
get_event_id	ju-seatch\unise\util\util.cc	/^uint64_t get_event_id(const std::string &line) {\/*{{{*\/$/;"	f	namespace:unise
get_file_path	ju-seatch\unise\util\util.cc	/^std::string get_file_path(const std::string& relative_to_thirdparty)$/;"	f	namespace:unise
get_host_loc_from_baidu_domain	ju-seatch\unise\util\util.cc	/^bool get_host_loc_from_baidu_domain(const std::string &hostname, $/;"	f	namespace:unise
get_host_name	ju-seatch\unise\util\util.cc	/^bool get_host_name(std::string &hostname)$/;"	f	namespace:unise
get_int_experiment_value	ju-seatch\unise\util\util.cc	/^bool get_int_experiment_value(const GeneralSearchRequest & request,$/;"	f	namespace:unise
get_json_values_by_key	ju-seatch\unise\util\util.cc	/^bool get_json_values_by_key(const Json::Value& root_value,$/;"	f	namespace:unise
get_string_experiment_value	ju-seatch\unise\util\util.cc	/^bool get_string_experiment_value(const GeneralSearchRequest & request,$/;"	f	namespace:unise
get_timestamp	ju-seatch\unise\util\util.cc	/^int32_t get_timestamp() {$/;"	f	namespace:unise
get_token_id_from_query_node_value	ju-seatch\unise\util\util.cc	/^TokenId get_token_id_from_query_node_value(const QueryNodeValue& value)$/;"	f	namespace:unise
kBase	ju-seatch\unise\util\util.cc	/^    static const int kBase = 10;$/;"	m	class:unise::StringToInt64Traits	file:
kBase	ju-seatch\unise\util\util.cc	/^    static const int kBase = 10;$/;"	m	class:unise::StringToIntTraits	file:
kBase	ju-seatch\unise\util\util.cc	/^    static const int kBase = 10;$/;"	m	class:unise::StringToUint64Traits	file:
kBase	ju-seatch\unise\util\util.cc	/^    static const int kBase = 10;$/;"	m	class:unise::StringToUintTraits	file:
kBase	ju-seatch\unise\util\util.cc	/^    static const int kBase = 16;$/;"	m	class:unise::HexStringToInt64Traits	file:
kBase	ju-seatch\unise\util\util.cc	/^    static const int kBase = 16;$/;"	m	class:unise::HexStringToIntTraits	file:
process_escape_characters	ju-seatch\unise\util\util.cc	/^string process_escape_characters(const string& str) {$/;"	f	namespace:unise
string_split	ju-seatch\unise\util\util.cc	/^void string_split(const string & str, const string & sep, vector<string> * strs) {$/;"	f	namespace:unise
string_split	ju-seatch\unise\util\util.cc	/^void string_split(const string & str,$/;"	f	namespace:unise
string_trim	ju-seatch\unise\util\util.cc	/^void string_trim(string * str, const string & garbage) {$/;"	f	namespace:unise
string_type	ju-seatch\unise\util\util.cc	/^    typedef std::string string_type;$/;"	t	class:unise::HexStringToInt64Traits	file:
string_type	ju-seatch\unise\util\util.cc	/^    typedef std::string string_type;$/;"	t	class:unise::HexStringToIntTraits	file:
string_type	ju-seatch\unise\util\util.cc	/^    typedef std::string string_type;$/;"	t	class:unise::StringToInt64Traits	file:
string_type	ju-seatch\unise\util\util.cc	/^    typedef std::string string_type;$/;"	t	class:unise::StringToIntTraits	file:
string_type	ju-seatch\unise\util\util.cc	/^    typedef std::string string_type;$/;"	t	class:unise::StringToUint64Traits	file:
string_type	ju-seatch\unise\util\util.cc	/^    typedef std::string string_type;$/;"	t	class:unise::StringToUintTraits	file:
unise	ju-seatch\unise\util\util.cc	/^namespace unise {$/;"	n	file:
valid_func	ju-seatch\unise\util\util.cc	/^    static inline bool valid_func(const string_type& str) {$/;"	f	class:unise::HexStringToInt64Traits
valid_func	ju-seatch\unise\util\util.cc	/^    static inline bool valid_func(const string_type& str) {$/;"	f	class:unise::HexStringToIntTraits
valid_func	ju-seatch\unise\util\util.cc	/^    static inline bool valid_func(const string_type& str) {$/;"	f	class:unise::StringToInt64Traits
valid_func	ju-seatch\unise\util\util.cc	/^    static inline bool valid_func(const string_type& str) {$/;"	f	class:unise::StringToIntTraits
valid_func	ju-seatch\unise\util\util.cc	/^    static inline bool valid_func(const string_type& str) {$/;"	f	class:unise::StringToUint64Traits
valid_func	ju-seatch\unise\util\util.cc	/^    static inline bool valid_func(const string_type& str) {$/;"	f	class:unise::StringToUintTraits
value_type	ju-seatch\unise\util\util.cc	/^    typedef int value_type;$/;"	t	class:unise::HexStringToIntTraits	file:
value_type	ju-seatch\unise\util\util.cc	/^    typedef int value_type;$/;"	t	class:unise::StringToIntTraits	file:
value_type	ju-seatch\unise\util\util.cc	/^    typedef int64_t value_type;$/;"	t	class:unise::HexStringToInt64Traits	file:
value_type	ju-seatch\unise\util\util.cc	/^    typedef int64_t value_type;$/;"	t	class:unise::StringToInt64Traits	file:
value_type	ju-seatch\unise\util\util.cc	/^    typedef uint32_t value_type;$/;"	t	class:unise::StringToUintTraits	file:
value_type	ju-seatch\unise\util\util.cc	/^    typedef uint64_t value_type;$/;"	t	class:unise::StringToUint64Traits	file:
UTIL_UTIL_H_	ju-seatch\unise\util\util.h	4;"	d
main	proto\read.cpp	/^int main(){$/;"	f
ByteSize	proto\world.pb.cc	/^int hello_w::ByteSize() const {$/;"	f	class:world::hello_w
ByteSize	proto\world.pb.cc	/^int hello_w_ctype::ByteSize() const {$/;"	f	class:world::hello_w_ctype
Clear	proto\world.pb.cc	/^void hello_w::Clear() {$/;"	f	class:world::hello_w
Clear	proto\world.pb.cc	/^void hello_w_ctype::Clear() {$/;"	f	class:world::hello_w_ctype
CopyFrom	proto\world.pb.cc	/^void hello_w::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:world::hello_w
CopyFrom	proto\world.pb.cc	/^void hello_w::CopyFrom(const hello_w& from) {$/;"	f	class:world::hello_w
CopyFrom	proto\world.pb.cc	/^void hello_w_ctype::CopyFrom(const ::google::protobuf::Message& from) {$/;"	f	class:world::hello_w_ctype
CopyFrom	proto\world.pb.cc	/^void hello_w_ctype::CopyFrom(const hello_w_ctype& from) {$/;"	f	class:world::hello_w_ctype
DO_	proto\world.pb.cc	199;"	d	file:
DO_	proto\world.pb.cc	248;"	d	file:
DO_	proto\world.pb.cc	477;"	d	file:
DO_	proto\world.pb.cc	574;"	d	file:
GetMetadata	proto\world.pb.cc	/^::google::protobuf::Metadata hello_w::GetMetadata() const {$/;"	f	class:world::hello_w
GetMetadata	proto\world.pb.cc	/^::google::protobuf::Metadata hello_w_ctype::GetMetadata() const {$/;"	f	class:world::hello_w_ctype
INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION	proto\world.pb.cc	3;"	d	file:
InitAsDefaultInstance	proto\world.pb.cc	/^void hello_w::InitAsDefaultInstance() {$/;"	f	class:world::hello_w
InitAsDefaultInstance	proto\world.pb.cc	/^void hello_w_ctype::InitAsDefaultInstance() {$/;"	f	class:world::hello_w_ctype
IsInitialized	proto\world.pb.cc	/^bool hello_w::IsInitialized() const {$/;"	f	class:world::hello_w
IsInitialized	proto\world.pb.cc	/^bool hello_w_ctype::IsInitialized() const {$/;"	f	class:world::hello_w_ctype
MergeFrom	proto\world.pb.cc	/^void hello_w::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:world::hello_w
MergeFrom	proto\world.pb.cc	/^void hello_w::MergeFrom(const hello_w& from) {$/;"	f	class:world::hello_w
MergeFrom	proto\world.pb.cc	/^void hello_w_ctype::MergeFrom(const ::google::protobuf::Message& from) {$/;"	f	class:world::hello_w_ctype
MergeFrom	proto\world.pb.cc	/^void hello_w_ctype::MergeFrom(const hello_w_ctype& from) {$/;"	f	class:world::hello_w_ctype
MergePartialFromCodedStream	proto\world.pb.cc	/^bool hello_w::MergePartialFromCodedStream($/;"	f	class:world::hello_w
MergePartialFromCodedStream	proto\world.pb.cc	/^bool hello_w_ctype::MergePartialFromCodedStream($/;"	f	class:world::hello_w_ctype
New	proto\world.pb.cc	/^hello_w* hello_w::New() const {$/;"	f	class:world::hello_w
New	proto\world.pb.cc	/^hello_w_ctype* hello_w_ctype::New() const {$/;"	f	class:world::hello_w_ctype
SerializeWithCachedSizes	proto\world.pb.cc	/^void hello_w::SerializeWithCachedSizes($/;"	f	class:world::hello_w
SerializeWithCachedSizes	proto\world.pb.cc	/^void hello_w_ctype::SerializeWithCachedSizes($/;"	f	class:world::hello_w_ctype
SerializeWithCachedSizesToArray	proto\world.pb.cc	/^::google::protobuf::uint8* hello_w::SerializeWithCachedSizesToArray($/;"	f	class:world::hello_w
SerializeWithCachedSizesToArray	proto\world.pb.cc	/^::google::protobuf::uint8* hello_w_ctype::SerializeWithCachedSizesToArray($/;"	f	class:world::hello_w_ctype
SetCachedSize	proto\world.pb.cc	/^void hello_w::SetCachedSize(int size) const {$/;"	f	class:world::hello_w
SetCachedSize	proto\world.pb.cc	/^void hello_w_ctype::SetCachedSize(int size) const {$/;"	f	class:world::hello_w_ctype
SharedCtor	proto\world.pb.cc	/^void hello_w::SharedCtor() {$/;"	f	class:world::hello_w
SharedCtor	proto\world.pb.cc	/^void hello_w_ctype::SharedCtor() {$/;"	f	class:world::hello_w_ctype
SharedDtor	proto\world.pb.cc	/^void hello_w::SharedDtor() {$/;"	f	class:world::hello_w
SharedDtor	proto\world.pb.cc	/^void hello_w_ctype::SharedDtor() {$/;"	f	class:world::hello_w_ctype
StaticDescriptorInitializer_world_2eproto	proto\world.pb.cc	/^  StaticDescriptorInitializer_world_2eproto() {$/;"	f	struct:world::StaticDescriptorInitializer_world_2eproto
StaticDescriptorInitializer_world_2eproto	proto\world.pb.cc	/^struct StaticDescriptorInitializer_world_2eproto {$/;"	s	namespace:world	file:
Swap	proto\world.pb.cc	/^void hello_w::Swap(hello_w* other) {$/;"	f	class:world::hello_w
Swap	proto\world.pb.cc	/^void hello_w_ctype::Swap(hello_w_ctype* other) {$/;"	f	class:world::hello_w_ctype
_default_desc_	proto\world.pb.cc	/^const ::std::string hello_w_ctype::_default_desc_;$/;"	m	class:world::hello_w_ctype	file:
_default_str_	proto\world.pb.cc	/^const ::std::string hello_w::_default_str_;$/;"	m	class:world::hello_w	file:
default_instance	proto\world.pb.cc	/^const hello_w& hello_w::default_instance() {$/;"	f	class:world::hello_w
default_instance	proto\world.pb.cc	/^const hello_w_ctype& hello_w_ctype::default_instance() {$/;"	f	class:world::hello_w_ctype
default_instance_	proto\world.pb.cc	/^hello_w* hello_w::default_instance_ = NULL;$/;"	m	class:world::hello_w	file:
default_instance_	proto\world.pb.cc	/^hello_w_ctype* hello_w_ctype::default_instance_ = NULL;$/;"	m	class:world::hello_w_ctype	file:
descriptor	proto\world.pb.cc	/^const ::google::protobuf::Descriptor* hello_w::descriptor() {$/;"	f	class:world::hello_w
descriptor	proto\world.pb.cc	/^const ::google::protobuf::Descriptor* hello_w_ctype::descriptor() {$/;"	f	class:world::hello_w_ctype
hello_w	proto\world.pb.cc	/^hello_w::hello_w()$/;"	f	class:world::hello_w
hello_w	proto\world.pb.cc	/^hello_w::hello_w(const hello_w& from)$/;"	f	class:world::hello_w
hello_w_ctype	proto\world.pb.cc	/^hello_w_ctype::hello_w_ctype()$/;"	f	class:world::hello_w_ctype
hello_w_ctype	proto\world.pb.cc	/^hello_w_ctype::hello_w_ctype(const hello_w_ctype& from)$/;"	f	class:world::hello_w_ctype
hello_w_ctype_descriptor_	proto\world.pb.cc	/^const ::google::protobuf::Descriptor* hello_w_ctype_descriptor_ = NULL;$/;"	m	namespace:world::__anon3	file:
hello_w_ctype_reflection_	proto\world.pb.cc	/^  hello_w_ctype_reflection_ = NULL;$/;"	m	namespace:world::__anon3	file:
hello_w_descriptor_	proto\world.pb.cc	/^const ::google::protobuf::Descriptor* hello_w_descriptor_ = NULL;$/;"	m	namespace:world::__anon3	file:
hello_w_reflection_	proto\world.pb.cc	/^  hello_w_reflection_ = NULL;$/;"	m	namespace:world::__anon3	file:
kDescFieldNumber	proto\world.pb.cc	/^const int hello_w_ctype::kDescFieldNumber;$/;"	m	class:world::hello_w_ctype	file:
kIdFieldNumber	proto\world.pb.cc	/^const int hello_w::kIdFieldNumber;$/;"	m	class:world::hello_w	file:
kIdFieldNumber	proto\world.pb.cc	/^const int hello_w_ctype::kIdFieldNumber;$/;"	m	class:world::hello_w_ctype	file:
kOcFieldNumber	proto\world.pb.cc	/^const int hello_w::kOcFieldNumber;$/;"	m	class:world::hello_w	file:
kOptFieldNumber	proto\world.pb.cc	/^const int hello_w::kOptFieldNumber;$/;"	m	class:world::hello_w	file:
kSomeFieldNumber	proto\world.pb.cc	/^const int hello_w::kSomeFieldNumber;$/;"	m	class:world::hello_w	file:
kStrFieldNumber	proto\world.pb.cc	/^const int hello_w::kStrFieldNumber;$/;"	m	class:world::hello_w	file:
protobuf_AddDesc_world_2eproto	proto\world.pb.cc	/^void protobuf_AddDesc_world_2eproto() {$/;"	f	namespace:world
protobuf_AssignDesc_world_2eproto	proto\world.pb.cc	/^void protobuf_AssignDesc_world_2eproto() {$/;"	f	namespace:world
protobuf_AssignDescriptorsOnce	proto\world.pb.cc	/^inline void protobuf_AssignDescriptorsOnce() {$/;"	f	namespace:world::__anon4
protobuf_RegisterTypes	proto\world.pb.cc	/^void protobuf_RegisterTypes(const ::std::string&) {$/;"	f	namespace:world::__anon4
protobuf_ShutdownFile_world_2eproto	proto\world.pb.cc	/^void protobuf_ShutdownFile_world_2eproto() {$/;"	f	namespace:world
static_descriptor_initializer_world_2eproto_	proto\world.pb.cc	/^} static_descriptor_initializer_world_2eproto_;$/;"	m	namespace:world	typeref:struct:world::StaticDescriptorInitializer_world_2eproto	file:
world	proto\world.pb.cc	/^namespace world {$/;"	n	file:
~hello_w	proto\world.pb.cc	/^hello_w::~hello_w() {$/;"	f	class:world::hello_w
~hello_w_ctype	proto\world.pb.cc	/^hello_w_ctype::~hello_w_ctype() {$/;"	f	class:world::hello_w_ctype
GetCachedSize	proto\world.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:world::hello_w
GetCachedSize	proto\world.pb.h	/^  int GetCachedSize() const { return _cached_size_; }$/;"	f	class:world::hello_w_ctype
PROTOBUF_world_2eproto__INCLUDED	proto\world.pb.h	5;"	d
_cached_size_	proto\world.pb.h	/^  mutable int _cached_size_;$/;"	m	class:world::hello_w
_cached_size_	proto\world.pb.h	/^  mutable int _cached_size_;$/;"	m	class:world::hello_w_ctype
_clear_bit	proto\world.pb.h	/^  inline void _clear_bit(int index) {$/;"	f	class:world::hello_w
_clear_bit	proto\world.pb.h	/^  inline void _clear_bit(int index) {$/;"	f	class:world::hello_w_ctype
_default_desc_	proto\world.pb.h	/^  static const ::std::string _default_desc_;$/;"	m	class:world::hello_w_ctype
_default_str_	proto\world.pb.h	/^  static const ::std::string _default_str_;$/;"	m	class:world::hello_w
_has_bit	proto\world.pb.h	/^  inline bool _has_bit(int index) const {$/;"	f	class:world::hello_w
_has_bit	proto\world.pb.h	/^  inline bool _has_bit(int index) const {$/;"	f	class:world::hello_w_ctype
_has_bits_	proto\world.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(2 + 31) \/ 32];$/;"	m	class:world::hello_w_ctype
_has_bits_	proto\world.pb.h	/^  ::google::protobuf::uint32 _has_bits_[(5 + 31) \/ 32];$/;"	m	class:world::hello_w
_set_bit	proto\world.pb.h	/^  inline void _set_bit(int index) {$/;"	f	class:world::hello_w
_set_bit	proto\world.pb.h	/^  inline void _set_bit(int index) {$/;"	f	class:world::hello_w_ctype
_unknown_fields_	proto\world.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:world::hello_w
_unknown_fields_	proto\world.pb.h	/^  ::google::protobuf::UnknownFieldSet _unknown_fields_;$/;"	m	class:world::hello_w_ctype
add_some	proto\world.pb.h	/^inline ::std::string* hello_w::add_some() {$/;"	f	class:world::hello_w
add_some	proto\world.pb.h	/^inline void hello_w::add_some(const ::std::string& value) {$/;"	f	class:world::hello_w
add_some	proto\world.pb.h	/^inline void hello_w::add_some(const char* value) {$/;"	f	class:world::hello_w
add_some	proto\world.pb.h	/^inline void hello_w::add_some(const char* value, size_t size) {$/;"	f	class:world::hello_w
clear_desc	proto\world.pb.h	/^inline void hello_w_ctype::clear_desc() {$/;"	f	class:world::hello_w_ctype
clear_id	proto\world.pb.h	/^inline void hello_w::clear_id() {$/;"	f	class:world::hello_w
clear_id	proto\world.pb.h	/^inline void hello_w_ctype::clear_id() {$/;"	f	class:world::hello_w_ctype
clear_oc	proto\world.pb.h	/^inline void hello_w::clear_oc() {$/;"	f	class:world::hello_w
clear_opt	proto\world.pb.h	/^inline void hello_w::clear_opt() {$/;"	f	class:world::hello_w
clear_some	proto\world.pb.h	/^inline void hello_w::clear_some() {$/;"	f	class:world::hello_w
clear_str	proto\world.pb.h	/^inline void hello_w::clear_str() {$/;"	f	class:world::hello_w
ctype	proto\world.pb.h	/^  typedef hello_w_ctype ctype;$/;"	t	class:world::hello_w
default_instance_	proto\world.pb.h	/^  static hello_w* default_instance_;$/;"	m	class:world::hello_w
default_instance_	proto\world.pb.h	/^  static hello_w_ctype* default_instance_;$/;"	m	class:world::hello_w_ctype
desc	proto\world.pb.h	/^inline const ::std::string& hello_w_ctype::desc() const {$/;"	f	class:world::hello_w_ctype
desc_	proto\world.pb.h	/^  ::std::string* desc_;$/;"	m	class:world::hello_w_ctype
google	proto\world.pb.h	/^namespace google {$/;"	n
has_desc	proto\world.pb.h	/^inline bool hello_w_ctype::has_desc() const {$/;"	f	class:world::hello_w_ctype
has_id	proto\world.pb.h	/^inline bool hello_w::has_id() const {$/;"	f	class:world::hello_w
has_id	proto\world.pb.h	/^inline bool hello_w_ctype::has_id() const {$/;"	f	class:world::hello_w_ctype
has_oc	proto\world.pb.h	/^inline bool hello_w::has_oc() const {$/;"	f	class:world::hello_w
has_opt	proto\world.pb.h	/^inline bool hello_w::has_opt() const {$/;"	f	class:world::hello_w
has_str	proto\world.pb.h	/^inline bool hello_w::has_str() const {$/;"	f	class:world::hello_w
hello_w	proto\world.pb.h	/^class hello_w : public ::google::protobuf::Message {$/;"	c	namespace:world
hello_w_ctype	proto\world.pb.h	/^class hello_w_ctype : public ::google::protobuf::Message {$/;"	c	namespace:world
id	proto\world.pb.h	/^inline ::google::protobuf::int32 hello_w::id() const {$/;"	f	class:world::hello_w
id	proto\world.pb.h	/^inline ::google::protobuf::int32 hello_w_ctype::id() const {$/;"	f	class:world::hello_w_ctype
id_	proto\world.pb.h	/^  ::google::protobuf::int32 id_;$/;"	m	class:world::hello_w
id_	proto\world.pb.h	/^  ::google::protobuf::int32 id_;$/;"	m	class:world::hello_w_ctype
kDescFieldNumber	proto\world.pb.h	/^  static const int kDescFieldNumber = 2;$/;"	m	class:world::hello_w_ctype
kIdFieldNumber	proto\world.pb.h	/^  static const int kIdFieldNumber = 1;$/;"	m	class:world::hello_w
kIdFieldNumber	proto\world.pb.h	/^  static const int kIdFieldNumber = 1;$/;"	m	class:world::hello_w_ctype
kOcFieldNumber	proto\world.pb.h	/^  static const int kOcFieldNumber = 4;$/;"	m	class:world::hello_w
kOptFieldNumber	proto\world.pb.h	/^  static const int kOptFieldNumber = 3;$/;"	m	class:world::hello_w
kSomeFieldNumber	proto\world.pb.h	/^  static const int kSomeFieldNumber = 5;$/;"	m	class:world::hello_w
kStrFieldNumber	proto\world.pb.h	/^  static const int kStrFieldNumber = 2;$/;"	m	class:world::hello_w
mutable_desc	proto\world.pb.h	/^inline ::std::string* hello_w_ctype::mutable_desc() {$/;"	f	class:world::hello_w_ctype
mutable_oc	proto\world.pb.h	/^inline ::world::hello_w_ctype* hello_w::mutable_oc() {$/;"	f	class:world::hello_w
mutable_some	proto\world.pb.h	/^hello_w::mutable_some() {$/;"	f	class:world::hello_w
mutable_some	proto\world.pb.h	/^inline ::std::string* hello_w::mutable_some(int index) {$/;"	f	class:world::hello_w
mutable_str	proto\world.pb.h	/^inline ::std::string* hello_w::mutable_str() {$/;"	f	class:world::hello_w
mutable_unknown_fields	proto\world.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:world::hello_w
mutable_unknown_fields	proto\world.pb.h	/^  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {$/;"	f	class:world::hello_w_ctype
oc	proto\world.pb.h	/^inline const ::world::hello_w_ctype& hello_w::oc() const {$/;"	f	class:world::hello_w
oc_	proto\world.pb.h	/^  ::world::hello_w_ctype* oc_;$/;"	m	class:world::hello_w
operator =	proto\world.pb.h	/^  inline hello_w& operator=(const hello_w& from) {$/;"	f	class:world::hello_w
operator =	proto\world.pb.h	/^  inline hello_w_ctype& operator=(const hello_w_ctype& from) {$/;"	f	class:world::hello_w_ctype
opt	proto\world.pb.h	/^inline ::google::protobuf::int32 hello_w::opt() const {$/;"	f	class:world::hello_w
opt_	proto\world.pb.h	/^  ::google::protobuf::int32 opt_;$/;"	m	class:world::hello_w
protobuf	proto\world.pb.h	/^namespace protobuf {$/;"	n	namespace:google
set_desc	proto\world.pb.h	/^inline void hello_w_ctype::set_desc(const ::std::string& value) {$/;"	f	class:world::hello_w_ctype
set_desc	proto\world.pb.h	/^inline void hello_w_ctype::set_desc(const char* value) {$/;"	f	class:world::hello_w_ctype
set_desc	proto\world.pb.h	/^inline void hello_w_ctype::set_desc(const char* value, size_t size) {$/;"	f	class:world::hello_w_ctype
set_id	proto\world.pb.h	/^inline void hello_w::set_id(::google::protobuf::int32 value) {$/;"	f	class:world::hello_w
set_id	proto\world.pb.h	/^inline void hello_w_ctype::set_id(::google::protobuf::int32 value) {$/;"	f	class:world::hello_w_ctype
set_opt	proto\world.pb.h	/^inline void hello_w::set_opt(::google::protobuf::int32 value) {$/;"	f	class:world::hello_w
set_some	proto\world.pb.h	/^inline void hello_w::set_some(int index, const ::std::string& value) {$/;"	f	class:world::hello_w
set_some	proto\world.pb.h	/^inline void hello_w::set_some(int index, const char* value) {$/;"	f	class:world::hello_w
set_some	proto\world.pb.h	/^inline void hello_w::set_some(int index, const char* value, size_t size) {$/;"	f	class:world::hello_w
set_str	proto\world.pb.h	/^inline void hello_w::set_str(const ::std::string& value) {$/;"	f	class:world::hello_w
set_str	proto\world.pb.h	/^inline void hello_w::set_str(const char* value) {$/;"	f	class:world::hello_w
set_str	proto\world.pb.h	/^inline void hello_w::set_str(const char* value, size_t size) {$/;"	f	class:world::hello_w
some	proto\world.pb.h	/^hello_w::some() const {$/;"	f	class:world::hello_w
some	proto\world.pb.h	/^inline const ::std::string& hello_w::some(int index) const {$/;"	f	class:world::hello_w
some_	proto\world.pb.h	/^  ::google::protobuf::RepeatedPtrField< ::std::string> some_;$/;"	m	class:world::hello_w
some_size	proto\world.pb.h	/^inline int hello_w::some_size() const {$/;"	f	class:world::hello_w
str	proto\world.pb.h	/^inline const ::std::string& hello_w::str() const {$/;"	f	class:world::hello_w
str_	proto\world.pb.h	/^  ::std::string* str_;$/;"	m	class:world::hello_w
unknown_fields	proto\world.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:world::hello_w
unknown_fields	proto\world.pb.h	/^  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {$/;"	f	class:world::hello_w_ctype
world	proto\world.pb.h	/^namespace world {$/;"	n
main	proto\write.cpp	/^int main(){$/;"	f
absInt	source\c11\10\absInt.cc	/^unsigned absInt(int i) { return i < 0 ? -i : i; }$/;"	f
main	source\c11\10\absInt.cc	/^int main() {$/;"	f
print	source\c11\10\absInt.cc	/^void print(int i) { cout << i << " "; }$/;"	f
main	source\c11\10\accum.cc	/^int main()$/;"	f
main	source\c11\10\accum4.cc	/^int main()$/;"	f
main	source\c11\10\avg_price.cc	/^int main() $/;"	f
main	source\c11\10\bind2.cc	/^int main()$/;"	f
print	source\c11\10\bind2.cc	/^ostream &print(ostream &os, const string &s, char c)$/;"	f
LT	source\c11\10\elimDups.cc	/^bool LT(const string &s1, const string &s2)$/;"	f
isShorter	source\c11\10\elimDups.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	source\c11\10\elimDups.cc	/^int main()$/;"	f
print	source\c11\10\elimDups.cc	/^void print(const vector<string> &words)$/;"	f
printStr	source\c11\10\elimDups.cc	/^void printStr(const string &s) {$/;"	f
main	source\c11\10\equal.cc	/^int main()$/;"	f
main	source\c11\10\equiv-istream-iter.cc	/^int main() {$/;"	f
main	source\c11\10\inserters.cc	/^int main() $/;"	f
print	source\c11\10\inserters.cc	/^void print(const string &label, const list<int> &lst)$/;"	f
main	source\c11\10\iostream_iter.cc	/^int main()$/;"	f
fcn1	source\c11\10\lambda.cc	/^void fcn1()$/;"	f
fcn2	source\c11\10\lambda.cc	/^void fcn2()$/;"	f
fcn3	source\c11\10\lambda.cc	/^void fcn3()$/;"	f
fcn4	source\c11\10\lambda.cc	/^void fcn4()$/;"	f
fcn5	source\c11\10\lambda.cc	/^void fcn5()$/;"	f
main	source\c11\10\lambda.cc	/^int main()$/;"	f
GT	source\c11\10\newcount-size.cc	/^bool GT(const string &s, string::size_type m) $/;"	f
Shorter	source\c11\10\newcount-size.cc	/^	Shorter(size_t i): sz(i) { }$/;"	f	class:Shorter
Shorter	source\c11\10\newcount-size.cc	/^class Shorter {$/;"	c	file:
biggies	source\c11\10\newcount-size.cc	/^biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
check_size	source\c11\10\newcount-size.cc	/^bool check_size(const string &s, string::size_type sz)$/;"	f
elimDups	source\c11\10\newcount-size.cc	/^void elimDups(vector<string> &words)$/;"	f
isShorter	source\c11\10\newcount-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	source\c11\10\newcount-size.cc	/^int main()$/;"	f
operator ()	source\c11\10\newcount-size.cc	/^	bool operator()(const string &s1) $/;"	f	class:Shorter
print	source\c11\10\newcount-size.cc	/^void print(const string &s)$/;"	f
sz	source\c11\10\newcount-size.cc	/^	size_t sz;$/;"	m	class:Shorter	file:
main	source\c11\10\ostreamIter2.cc	/^int main() {$/;"	f
main	source\c11\10\rcomma.cc	/^int main()$/;"	f
main	source\c11\10\rev-iters.cc	/^int main()$/;"	f
main	source\c11\10\reverse-iter.cc	/^int main()$/;"	f
main	source\c11\10\reverse.cc	/^int main()$/;"	f
odd	source\c11\10\reverse.cc	/^bool odd(int i) { return i % 2; }$/;"	f
print	source\c11\10\reverse.cc	/^void print(int i)$/;"	f
main	source\c11\10\sortSI.cc	/^int main() $/;"	f
main	source\c11\10\use-istream-iter.cc	/^int main() {$/;"	f
main	source\c11\10\use_find.cc	/^int main()$/;"	f
main	source\c11\11\erasemap.cc	/^int main() $/;"	f
SDComp	source\c11\11\map1.cc	/^typedef bool(*SDComp)(const Sales_data&, const Sales_data&);$/;"	t	file:
main	source\c11\11\map1.cc	/^int main() $/;"	f
main	source\c11\11\multimap.cc	/^int main()$/;"	f
Author	source\c11\11\pair.cc	/^typedef pair<string, string> Author;$/;"	t	file:
austen	source\c11\11\pair.cc	/^Author austen = make_pair("Jane", "Austen"); \/\/ use make_pair$/;"	v
isShorter	source\c11\11\pair.cc	/^bool isShorter(const string &a, const string &b) $/;"	f
line	source\c11\11\pair.cc	/^pair<string, vector<int> > line;  \/\/ holds string and vector<int>$/;"	v
main	source\c11\11\pair.cc	/^int main()$/;"	f
preliminaries	source\c11\11\pair.cc	/^void preliminaries(vector<string> &v)$/;"	f
process2	source\c11\11\pair.cc	/^process2(vector<string> &v)$/;"	f
process3	source\c11\11\pair.cc	/^process3(vector<string> &v)$/;"	f
word_count	source\c11\11\pair.cc	/^pair<string, size_t> word_count; \/\/ holds a string and an size_t $/;"	v
main	source\c11\11\restricted_count.cc	/^int main() $/;"	f
main	source\c11\11\setOps.cc	/^int main() $/;"	f
Foo	source\c11\11\unorderedWordCount.cc	/^struct Foo { string s; };$/;"	s	file:
FooHash	source\c11\11\unorderedWordCount.cc	/^size_t FooHash(const Foo& f) { return hash<string>()(f.s); }$/;"	f
SD_multiset	source\c11\11\unorderedWordCount.cc	/^         bool(*)(const Sales_data&, const Sales_data&)> SD_multiset;$/;"	t	file:
eqOp	source\c11\11\unorderedWordCount.cc	/^bool eqOp(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hasher	source\c11\11\unorderedWordCount.cc	/^size_t hasher(const Sales_data &sd) $/;"	f
main	source\c11\11\unorderedWordCount.cc	/^int main() $/;"	f
operator ==	source\c11\11\unorderedWordCount.cc	/^bool operator==(const Foo& l, const Foo&r) { return l.s == r.s; }$/;"	f
s	source\c11\11\unorderedWordCount.cc	/^struct Foo { string s; };$/;"	m	struct:Foo	file:
main	source\c11\11\wcEx.cc	/^int main() $/;"	f
main	source\c11\11\word_count.cc	/^int main() $/;"	f
buildMap	source\c11\11\word_transform.cc	/^map<string, string> buildMap(ifstream &map_file)$/;"	f
main	source\c11\11\word_transform.cc	/^int main(int argc, char **argv)$/;"	f
transform	source\c11\11\word_transform.cc	/^transform(const string &s, const map<string, string> &m)$/;"	f
word_transform	source\c11\11\word_transform.cc	/^void word_transform(ifstream &map_file, ifstream &input)$/;"	f
FOO_H	source\c11\12\Foo.h	31;"	d
Foo	source\c11\12\Foo.h	/^	Foo(T t): val(t) { }$/;"	f	struct:Foo
Foo	source\c11\12\Foo.h	/^struct Foo {  \/\/ members are public by default$/;"	s
T	source\c11\12\Foo.h	/^typedef int T;$/;"	t
print	source\c11\12\Foo.h	/^print(std::ostream &os, const Foo &f) $/;"	f
val	source\c11\12\Foo.h	/^	T val;$/;"	m	struct:Foo
QUERYRESULT_H	source\c11\12\QueryResult.h	31;"	d
QueryResult	source\c11\12\QueryResult.h	/^	QueryResult(std::string s, $/;"	f	class:QueryResult
QueryResult	source\c11\12\QueryResult.h	/^class QueryResult {$/;"	c
begin	source\c11\12\QueryResult.h	/^	line_it begin() const { return lines->begin(); }$/;"	f	class:QueryResult
end	source\c11\12\QueryResult.h	/^	line_it end() const   { return lines->end(); }$/;"	f	class:QueryResult
file	source\c11\12\QueryResult.h	/^	std::tr1::shared_ptr<std::vector<std::string> > file;  \/\/input file$/;"	m	class:QueryResult
get_file	source\c11\12\QueryResult.h	/^	std::tr1::shared_ptr<std::vector<std::string> > get_file() { return file; }$/;"	f	class:QueryResult
line_it	source\c11\12\QueryResult.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:QueryResult
line_no	source\c11\12\QueryResult.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:QueryResult
lines	source\c11\12\QueryResult.h	/^	std::tr1::shared_ptr<std::set<line_no> > lines; \/\/ lines it's on$/;"	m	class:QueryResult
size	source\c11\12\QueryResult.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:QueryResult
sought	source\c11\12\QueryResult.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:QueryResult
STRBLOB_H	source\c11\12\StrBlob.h	31;"	d
StrBlob	source\c11\12\StrBlob.h	/^    StrBlob() : data(new std::vector<std::string>()) { }$/;"	f	class:StrBlob
StrBlob	source\c11\12\StrBlob.h	/^StrBlob::StrBlob(const std::string *beg, const std::string *end): $/;"	f	class:StrBlob
StrBlob	source\c11\12\StrBlob.h	/^class StrBlob {$/;"	c
StrBlobPtr	source\c11\12\StrBlob.h	/^    StrBlobPtr(): curr(0) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	source\c11\12\StrBlob.h	/^    StrBlobPtr(StrBlob &a, size_t sz = 0): wptr(a.data), curr(sz) { }$/;"	f	class:StrBlobPtr
StrBlobPtr	source\c11\12\StrBlob.h	/^class StrBlobPtr {$/;"	c
begin	source\c11\12\StrBlob.h	/^StrBlob::begin() $/;"	f	class:StrBlob
check	source\c11\12\StrBlob.h	/^StrBlobPtr::check(std::size_t i, const std::string &msg) const$/;"	f	class:StrBlobPtr
curr	source\c11\12\StrBlob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:StrBlobPtr
data	source\c11\12\StrBlob.h	/^    std::tr1::shared_ptr<std::vector<std::string> > data; $/;"	m	class:StrBlob
decr	source\c11\12\StrBlob.h	/^StrBlobPtr& StrBlobPtr::decr()$/;"	f	class:StrBlobPtr
deref	source\c11\12\StrBlob.h	/^std::string& StrBlobPtr::deref() const$/;"	f	class:StrBlobPtr
empty	source\c11\12\StrBlob.h	/^    bool empty() const { return data->empty(); }$/;"	f	class:StrBlob
end	source\c11\12\StrBlob.h	/^StrBlob::end() $/;"	f	class:StrBlob
eq	source\c11\12\StrBlob.h	/^bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
incr	source\c11\12\StrBlob.h	/^StrBlobPtr& StrBlobPtr::incr()$/;"	f	class:StrBlobPtr
neq	source\c11\12\StrBlob.h	/^bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)$/;"	f
push_back	source\c11\12\StrBlob.h	/^    void push_back(const std::string &t) { data->push_back(t); }$/;"	f	class:StrBlob
size	source\c11\12\StrBlob.h	/^    size_type size() const { return data->size(); }$/;"	f	class:StrBlob
size_type	source\c11\12\StrBlob.h	/^    typedef std::vector<std::string>::size_type size_type;$/;"	t	class:StrBlob
wptr	source\c11\12\StrBlob.h	/^    std::tr1::weak_ptr<std::vector<std::string> > wptr;  $/;"	m	class:StrBlobPtr
TextQuery	source\c11\12\TextQuery.cc	/^TextQuery::TextQuery(ifstream &is): file(new vector<string>)$/;"	f	class:TextQuery
cleanup_str	source\c11\12\TextQuery.cc	/^string TextQuery::cleanup_str(const string &word)$/;"	f	class:TextQuery
display_map	source\c11\12\TextQuery.cc	/^void TextQuery::display_map()$/;"	f	class:TextQuery
lineIter	source\c11\12\TextQuery.cc	/^typedef set<TextQuery::line_no>::const_iterator lineIter;$/;"	t	file:
lineType	source\c11\12\TextQuery.cc	/^typedef shared_ptr<set<TextQuery::line_no> > lineType;$/;"	t	file:
print	source\c11\12\TextQuery.cc	/^ostream &print(ostream & os, const QueryResult &qr)$/;"	f
query	source\c11\12\TextQuery.cc	/^TextQuery::query(const string &sought) const$/;"	f	class:TextQuery
wmIter	source\c11\12\TextQuery.cc	/^typedef wmType::const_iterator wmIter;$/;"	t	file:
wmType	source\c11\12\TextQuery.cc	/^typedef map<string, shared_ptr<set<TextQuery::line_no> > > wmType;$/;"	t	file:
TEXTQUERY_H	source\c11\12\TextQuery.h	31;"	d
TextQuery	source\c11\12\TextQuery.h	/^class TextQuery {$/;"	c
file	source\c11\12\TextQuery.h	/^    std::tr1::shared_ptr<std::vector<std::string> > file; \/\/ input file$/;"	m	class:TextQuery
line_no	source\c11\12\TextQuery.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
wm	source\c11\12\TextQuery.h	/^	         std::tr1::shared_ptr<std::set<line_no> > > wm;  $/;"	m	class:TextQuery
deleter	source\c11\12\UP.cc	/^void deleter(int *p) { delete[] p; }$/;"	f
main	source\c11\12\UP.cc	/^int main()$/;"	f
factory	source\c11\12\allocPtr.cc	/^Foo* factory(T arg)$/;"	f
main	source\c11\12\allocPtr.cc	/^int main()$/;"	f
use_factory	source\c11\12\allocPtr.cc	/^Foo* use_factory(T arg)$/;"	f
factory	source\c11\12\allocSP.cc	/^shared_ptr<Foo> factory(T arg)$/;"	f
main	source\c11\12\allocSP.cc	/^int main()$/;"	f
use_factory	source\c11\12\allocSP.cc	/^shared_ptr<Foo> use_factory(T arg)$/;"	f
get_size	source\c11\12\oknew.cc	/^size_t get_size() { return 42; }$/;"	f
main	source\c11\12\oknew.cc	/^int main() $/;"	f
main	source\c11\12\querymain.cc	/^int main(int argc, char **argv)$/;"	f
runQueries	source\c11\12\querymain.cc	/^void runQueries(ifstream &infile)$/;"	f
main	source\c11\12\release.cc	/^int main()$/;"	f
main	source\c11\12\unique.cc	/^int main() {$/;"	f
main	source\c11\12\useBlob.cc	/^int main()$/;"	f
main	source\c11\12\usealloc.cc	/^int main() $/;"	f
main	source\c11\12\usealloc2.cc	/^int main()$/;"	f
main	source\c11\12\weak.cc	/^int main()$/;"	f
Folder	source\c11\13\Folder.cc	/^Folder::Folder(const Folder &f) : msgs(f.msgs)$/;"	f	class:Folder
Message	source\c11\13\Folder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
add_to_Folders	source\c11\13\Folder.cc	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Messages	source\c11\13\Folder.cc	/^void Folder::add_to_Messages(const Folder &f)$/;"	f	class:Folder
debug_print	source\c11\13\Folder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	source\c11\13\Folder.cc	/^void Message::debug_print()$/;"	f	class:Message
operator =	source\c11\13\Folder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	source\c11\13\Folder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
remove	source\c11\13\Folder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	source\c11\13\Folder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	source\c11\13\Folder.cc	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Msgs	source\c11\13\Folder.cc	/^void Folder::remove_from_Msgs()$/;"	f	class:Folder
save	source\c11\13\Folder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	source\c11\13\Folder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	source\c11\13\Folder.cc	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	source\c11\13\Folder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Message	source\c11\13\Folder.cc	/^Message::~Message()$/;"	f	class:Message
FOLDER_H	source\c11\13\Folder.h	31;"	d
Folder	source\c11\13\Folder.h	/^    Folder() { }        \/\/ defaults ok$/;"	f	class:Folder
Folder	source\c11\13\Folder.h	/^class Folder {$/;"	c
Message	source\c11\13\Folder.h	/^    explicit Message(const std::string &str = ""): $/;"	f	class:Message
Message	source\c11\13\Folder.h	/^class Message {$/;"	c
addFldr	source\c11\13\Folder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	source\c11\13\Folder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	source\c11\13\Folder.h	/^    std::string contents;      \/\/ actual message text$/;"	m	class:Message
folders	source\c11\13\Folder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
msgs	source\c11\13\Folder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
remFldr	source\c11\13\Folder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	source\c11\13\Folder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
main	source\c11\13\FolderMain.cc	/^int main()$/;"	f
HasPtr	source\c11\13\HasPtrUseCount.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	source\c11\13\HasPtrUseCount.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	source\c11\13\HasPtrUseCount.cc	/^class HasPtr {$/;"	c	file:
f	source\c11\13\HasPtrUseCount.cc	/^HasPtr f(HasPtr hp) \/\/ HasPtr passed by value, so it is copied$/;"	f
i	source\c11\13\HasPtrUseCount.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	source\c11\13\HasPtrUseCount.cc	/^int main()$/;"	f
operator =	source\c11\13\HasPtrUseCount.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs) $/;"	f	class:HasPtr
ps	source\c11\13\HasPtrUseCount.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
use	source\c11\13\HasPtrUseCount.cc	/^	std::size_t *use;  \/\/ member to track how many objects share *ps$/;"	m	class:HasPtr	file:
~HasPtr	source\c11\13\HasPtrUseCount.cc	/^HasPtr::~HasPtr()$/;"	f	class:HasPtr
HasPtr	source\c11\13\HasPtrValueLike.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	source\c11\13\HasPtrValueLike.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	source\c11\13\HasPtrValueLike.cc	/^class HasPtr {$/;"	c	file:
f	source\c11\13\HasPtrValueLike.cc	/^HasPtr f(HasPtr hp)  \/\/ HasPtr passed by value, so it is copied$/;"	f
i	source\c11\13\HasPtrValueLike.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	source\c11\13\HasPtrValueLike.cc	/^int main()$/;"	f
operator =	source\c11\13\HasPtrValueLike.cc	/^HasPtr& HasPtr::operator=(const HasPtr &rhs) $/;"	f	class:HasPtr
ps	source\c11\13\HasPtrValueLike.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
swap	source\c11\13\HasPtrValueLike.cc	/^void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	source\c11\13\HasPtrValueLike.cc	/^	~HasPtr() { delete ps; }$/;"	f	class:HasPtr
Folder	source\c11\13\StrFolder.cc	/^Folder::Folder(const Folder &f) : msgs(f.msgs)$/;"	f	class:Folder
Message	source\c11\13\StrFolder.cc	/^Message::Message(const Message &m): $/;"	f	class:Message
add_to_Folders	source\c11\13\StrFolder.cc	/^void Message::add_to_Folders(const Message &m)$/;"	f	class:Message
add_to_Messages	source\c11\13\StrFolder.cc	/^void Folder::add_to_Messages(const Folder &f)$/;"	f	class:Folder
debug_print	source\c11\13\StrFolder.cc	/^void Folder::debug_print()$/;"	f	class:Folder
debug_print	source\c11\13\StrFolder.cc	/^void Message::debug_print()$/;"	f	class:Message
operator =	source\c11\13\StrFolder.cc	/^Folder& Folder::operator=(const Folder &f)$/;"	f	class:Folder
operator =	source\c11\13\StrFolder.cc	/^Message& Message::operator=(const Message &rhs)$/;"	f	class:Message
remove	source\c11\13\StrFolder.cc	/^void Folder::remove(Message &m)$/;"	f	class:Folder
remove	source\c11\13\StrFolder.cc	/^void Message::remove(Folder &f)$/;"	f	class:Message
remove_from_Folders	source\c11\13\StrFolder.cc	/^void Message::remove_from_Folders()$/;"	f	class:Message
remove_from_Msgs	source\c11\13\StrFolder.cc	/^void Folder::remove_from_Msgs()$/;"	f	class:Folder
save	source\c11\13\StrFolder.cc	/^void Folder::save(Message &m)$/;"	f	class:Folder
save	source\c11\13\StrFolder.cc	/^void Message::save(Folder &f)$/;"	f	class:Message
swap	source\c11\13\StrFolder.cc	/^void swap(Message &lhs, Message &rhs)$/;"	f
~Folder	source\c11\13\StrFolder.cc	/^Folder::~Folder()$/;"	f	class:Folder
~Message	source\c11\13\StrFolder.cc	/^Message::~Message()$/;"	f	class:Message
Folder	source\c11\13\StrFolder.h	/^    Folder() { }            \/\/ defaults ok$/;"	f	class:Folder
Folder	source\c11\13\StrFolder.h	/^class Folder {$/;"	c
Message	source\c11\13\StrFolder.h	/^    explicit Message(const String &str = ""): $/;"	f	class:Message
Message	source\c11\13\StrFolder.h	/^class Message {$/;"	c
STRFOLDER_H	source\c11\13\StrFolder.h	31;"	d
addFldr	source\c11\13\StrFolder.h	/^    void addFldr(Folder *f) { folders.insert(f); }$/;"	f	class:Message
addMsg	source\c11\13\StrFolder.h	/^    void addMsg(Message *m) { msgs.insert(m); }$/;"	f	class:Folder
contents	source\c11\13\StrFolder.h	/^    String contents;      \/\/ actual message text$/;"	m	class:Message
folders	source\c11\13\StrFolder.h	/^    std::set<Folder*> folders; \/\/ Folders that have this Message$/;"	m	class:Message
msgs	source\c11\13\StrFolder.h	/^    std::set<Message*> msgs;  \/\/ messages in this folder$/;"	m	class:Folder
remFldr	source\c11\13\StrFolder.h	/^    void remFldr(Folder *f) { folders.erase(f); }$/;"	f	class:Message
remMsg	source\c11\13\StrFolder.h	/^    void remMsg(Message *m) { msgs.erase(m); }$/;"	f	class:Folder
main	source\c11\13\StrFolderMain.cc	/^int main()$/;"	f
alloc	source\c11\13\StrVec.cc	/^std::allocator<std::string> StrVec::alloc;  $/;"	m	class:StrVec	file:
STRVEC_H	source\c11\13\StrVec.h	31;"	d
StrVec	source\c11\13\StrVec.h	/^    StrVec(): $/;"	f	class:StrVec
StrVec	source\c11\13\StrVec.h	/^StrVec::StrVec(const StrVec &s)$/;"	f	class:StrVec
StrVec	source\c11\13\StrVec.h	/^StrVec::StrVec(const std::string *b, const std::string *e)$/;"	f	class:StrVec
StrVec	source\c11\13\StrVec.h	/^class StrVec {$/;"	c
alloc	source\c11\13\StrVec.h	/^    static std::allocator<std::string> alloc; \/\/ allocates the elements$/;"	m	class:StrVec
alloc_n_copy	source\c11\13\StrVec.h	/^StrVec::alloc_n_copy(const std::string *b, const std::string *e)$/;"	f	class:StrVec
begin	source\c11\13\StrVec.h	/^	std::string *begin() const { return elements; }$/;"	f	class:StrVec
cap	source\c11\13\StrVec.h	/^    std::string *cap;        \/\/ pointer to one past the end of the array$/;"	m	class:StrVec
capacity	source\c11\13\StrVec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:StrVec
chk_n_alloc	source\c11\13\StrVec.h	/^	void chk_n_alloc() $/;"	f	class:StrVec
elements	source\c11\13\StrVec.h	/^    std::string *elements;   \/\/ pointer to the first element in the array$/;"	m	class:StrVec
end	source\c11\13\StrVec.h	/^	std::string *end() const { return first_free; }$/;"	f	class:StrVec
first_free	source\c11\13\StrVec.h	/^    std::string *first_free; \/\/ pointer to the first free element in the array$/;"	m	class:StrVec
free	source\c11\13\StrVec.h	/^void StrVec::free()$/;"	f	class:StrVec
operator =	source\c11\13\StrVec.h	/^StrVec &StrVec::operator=(const StrVec &rhs)$/;"	f	class:StrVec
operator []	source\c11\13\StrVec.h	/^	const std::string& operator[](std::size_t n) const $/;"	f	class:StrVec
operator []	source\c11\13\StrVec.h	/^	std::string& operator[](std::size_t n) $/;"	f	class:StrVec
push_back	source\c11\13\StrVec.h	/^void StrVec::push_back(const std::string& s)$/;"	f	class:StrVec
reallocate	source\c11\13\StrVec.h	/^void StrVec::reallocate()$/;"	f	class:StrVec
size	source\c11\13\StrVec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:StrVec
~StrVec	source\c11\13\StrVec.h	/^StrVec::~StrVec() { free(); }$/;"	f	class:StrVec
add	source\c11\13\String.cc	/^String add(const String &lhs, const String &rhs) $/;"	f
make_plural	source\c11\13\String.cc	/^String make_plural(size_t ctr, const String &word,$/;"	f
operator +	source\c11\13\String.cc	/^String operator+(const String &lhs, const String &rhs) $/;"	f
operator <<	source\c11\13\String.cc	/^ostream &operator<<(ostream &os, const String &s)$/;"	f
operator =	source\c11\13\String.cc	/^String & String::operator=(const String &rhs)$/;"	f	class:String
operator =	source\c11\13\String.cc	/^String& String::operator=(char c)$/;"	f	class:String
operator =	source\c11\13\String.cc	/^String& String::operator=(const char *cp)$/;"	f	class:String
print	source\c11\13\String.cc	/^ostream &print(ostream &os, const String &s)$/;"	f
STRING_H	source\c11\13\String.h	31;"	d
String	source\c11\13\String.h	/^	String(): sz(0), p(0) { }$/;"	f	class:String
String	source\c11\13\String.h	/^	String(const String &s):sz(s.sz), p(a.allocate(s.sz))$/;"	f	class:String
String	source\c11\13\String.h	/^	String(const char *cp) : $/;"	f	class:String
String	source\c11\13\String.h	/^	String(size_t n, char c) : sz(n), p(a.allocate(n))$/;"	f	class:String
String	source\c11\13\String.h	/^class String {$/;"	c
a	source\c11\13\String.h	/^	static std::allocator<char> a;$/;"	m	class:String
begin	source\c11\13\String.h	/^	const char *begin()                         { return p; }$/;"	f	class:String
begin	source\c11\13\String.h	/^	const char *begin() const                   { return p; }$/;"	f	class:String
end	source\c11\13\String.h	/^	const char *end()                      { return p + sz; }$/;"	f	class:String
end	source\c11\13\String.h	/^	const char *end() const                { return p + sz; }$/;"	f	class:String
p	source\c11\13\String.h	/^	char *p ;$/;"	m	class:String
size	source\c11\13\String.h	/^	size_t size() const                        { return sz; }$/;"	f	class:String
swap	source\c11\13\String.h	/^	void swap(String &s)$/;"	f	class:String
swap	source\c11\13\String.h	/^void swap(String &s1, String &s2)$/;"	f
sz	source\c11\13\String.h	/^	std::size_t sz;$/;"	m	class:String
~String	source\c11\13\String.h	/^	~String() { if (p) a.deallocate(p, sz); }$/;"	f	class:String
Foo	source\c11\13\copyNoMove.cc	/^Foo::Foo(const Foo&) { std::cout << "Foo copy ctor" << std::endl; }$/;"	f	class:Foo
Foo	source\c11\13\copyNoMove.cc	/^class Foo {$/;"	c	file:
main	source\c11\13\copyNoMove.cc	/^int main()$/;"	f
HasPtr	source\c11\13\moveHP.cc	/^    HasPtr(const HasPtr &p): $/;"	f	class:HasPtr
HasPtr	source\c11\13\moveHP.cc	/^    HasPtr(const std::string &s = std::string()): $/;"	f	class:HasPtr
HasPtr	source\c11\13\moveHP.cc	/^class HasPtr {$/;"	c	file:
i	source\c11\13\moveHP.cc	/^    int    i;$/;"	m	class:HasPtr	file:
main	source\c11\13\moveHP.cc	/^int main()$/;"	f
operator =	source\c11\13\moveHP.cc	/^	HasPtr& operator=(HasPtr rhs) $/;"	f	class:HasPtr
ps	source\c11\13\moveHP.cc	/^    std::string *ps;$/;"	m	class:HasPtr	file:
swap	source\c11\13\moveHP.cc	/^void swap(HasPtr &lhs, HasPtr &rhs)$/;"	f
~HasPtr	source\c11\13\moveHP.cc	/^	~HasPtr() { delete ps; }$/;"	f	class:HasPtr
f	source\c11\13\serial.cc	/^void f (numbered s) { cout << s.mysn << endl; }$/;"	f
main	source\c11\13\serial.cc	/^int main()$/;"	f
mysn	source\c11\13\serial.cc	/^	size_t mysn;$/;"	m	struct:numbered	file:
numbered	source\c11\13\serial.cc	/^	numbered() : mysn(sn++) { }$/;"	f	struct:numbered
numbered	source\c11\13\serial.cc	/^	numbered(const numbered &) : mysn(sn++) { }$/;"	f	struct:numbered
numbered	source\c11\13\serial.cc	/^struct numbered {$/;"	s	file:
operator =	source\c11\13\serial.cc	/^	numbered &operator=(const numbered &) { return *this; }$/;"	f	struct:numbered
sn	source\c11\13\serial.cc	/^	static size_t sn;$/;"	m	struct:numbered	file:
sn	source\c11\13\serial.cc	/^size_t numbered::sn = 0;$/;"	m	class:numbered	file:
Sales_data	source\c11\13\small2_SI.h	/^	Sales_data(): bookNo(10, '9'), units_sold(0), revenue(0.0) {}$/;"	f	class:Sales_data
Sales_data	source\c11\13\small2_SI.h	/^	Sales_data(const Sales_data &rhs): bookNo(rhs.bookNo), $/;"	f	class:Sales_data
Sales_data	source\c11\13\small2_SI.h	/^	Sales_data(const std::string &book, unsigned cnt, double price): $/;"	f	class:Sales_data
Sales_data	source\c11\13\small2_SI.h	/^Sales_data::Sales_data(const Sales_data &orig):$/;"	f	class:Sales_data
Sales_data	source\c11\13\small2_SI.h	/^class Sales_data {$/;"	c
bookNo	source\c11\13\small2_SI.h	/^    std::string bookNo;$/;"	m	class:Sales_data
revenue	source\c11\13\small2_SI.h	/^    double revenue;$/;"	m	class:Sales_data
units_sold	source\c11\13\small2_SI.h	/^    int units_sold;$/;"	m	class:Sales_data
SMALL_SI_H	source\c11\13\small_SI.h	30;"	d
Sales_data	source\c11\13\small_SI.h	/^	Sales_data(const Sales_data &rhs): bookNo(rhs.bookNo),$/;"	f	class:Sales_data
Sales_data	source\c11\13\small_SI.h	/^	Sales_data(const std::string &book, unsigned cnt, double price):$/;"	f	class:Sales_data
Sales_data	source\c11\13\small_SI.h	/^    Sales_data(const std::string & s = ""): bookNo(s), $/;"	f	class:Sales_data
Sales_data	source\c11\13\small_SI.h	/^class Sales_data {$/;"	c
bookNo	source\c11\13\small_SI.h	/^    std::string bookNo;$/;"	m	class:Sales_data
operator =	source\c11\13\small_SI.h	/^Sales_data::operator=(const Sales_data &rhs)$/;"	f	class:Sales_data
revenue	source\c11\13\small_SI.h	/^    double revenue;$/;"	m	class:Sales_data
units_sold	source\c11\13\small_SI.h	/^    int units_sold;$/;"	m	class:Sales_data
~Sales_data	source\c11\13\small_SI.h	/^    ~Sales_data() { } $/;"	f	class:Sales_data
main	source\c11\13\substr.cc	/^int main()$/;"	f
position	source\c11\13\substr.cc	/^position(const string &a, const string &b, const string &c)$/;"	f
getVec	source\c11\13\useStrVec.cc	/^StrVec getVec(istream &is)$/;"	f
main	source\c11\13\useStrVec.cc	/^int main()$/;"	f
print	source\c11\13\useStrVec.cc	/^void print(const StrVec &svec)$/;"	f
Sales_data	source\c11\14\Sales_data.cc	/^Sales_data::Sales_data(istream &is): units_sold(0), revenue(0.0)$/;"	f	class:Sales_data
add	source\c11\14\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	source\c11\14\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator +	source\c11\14\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	source\c11\14\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	source\c11\14\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	source\c11\14\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	source\c11\14\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	source\c11\14\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	source\c11\14\Sales_data.h	31;"	d
Sales_data	source\c11\14\Sales_data.h	/^	Sales_data(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_data
Sales_data	source\c11\14\Sales_data.h	/^	Sales_data(const std::string &s): $/;"	f	class:Sales_data
Sales_data	source\c11\14\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	source\c11\14\Sales_data.h	/^class Sales_data {$/;"	c
bookNo	source\c11\14\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	source\c11\14\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	source\c11\14\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	source\c11\14\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ==	source\c11\14\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
revenue	source\c11\14\Sales_data.h	/^	double revenue;$/;"	m	class:Sales_data
units_sold	source\c11\14\Sales_data.h	/^	unsigned units_sold;$/;"	m	class:Sales_data
absInt	source\c11\14\absInt.cc	/^struct absInt {$/;"	s	file:
main	source\c11\14\absInt.cc	/^int main() {$/;"	f
operator ()	source\c11\14\absInt.cc	/^    int operator()(int val) const {$/;"	f	struct:absInt
print	source\c11\14\absInt.cc	/^void print(unsigned u) { cout << u << " "; }$/;"	f
main	source\c11\14\add.cc	/^int main() $/;"	f
add	source\c11\14\calc.cc	/^int add(int i, int j) { return i + j; }$/;"	f
divide	source\c11\14\calc.cc	/^struct divide {$/;"	s	file:
main	source\c11\14\calc.cc	/^int main()$/;"	f
mod	source\c11\14\calc.cc	/^int mod(int i, int j) { return i % j; };$/;"	f
mult	source\c11\14\calc.cc	/^int mult(int i, int j) { return i * j; };$/;"	f
operator ()	source\c11\14\calc.cc	/^    int operator()(int denominator, int divisor) {$/;"	f	struct:divide
main	source\c11\14\directcall.cc	/^int main()$/;"	f
LessVal	source\c11\14\fcnobj.cc	/^	LessVal(int i): sz(i) { }$/;"	f	struct:LessVal
LessVal	source\c11\14\fcnobj.cc	/^struct LessVal {$/;"	s	file:
Size_compare	source\c11\14\fcnobj.cc	/^	Size_compare(string::size_type i): sz(i) { }$/;"	f	struct:Size_compare
Size_compare	source\c11\14\fcnobj.cc	/^struct Size_compare {$/;"	s	file:
main	source\c11\14\fcnobj.cc	/^int main() {$/;"	f
operator ()	source\c11\14\fcnobj.cc	/^	bool operator()(const string &s) { return s.size() >= sz; }$/;"	f	struct:Size_compare
operator ()	source\c11\14\fcnobj.cc	/^	bool operator()(int i) { return less_equal<int>()(i, sz); }$/;"	f	struct:LessVal
sz	source\c11\14\fcnobj.cc	/^	int sz;$/;"	m	struct:LessVal	file:
sz	source\c11\14\fcnobj.cc	/^	size_t sz;$/;"	m	struct:Size_compare	file:
GT	source\c11\14\newcount-size.cc	/^bool GT(const string &s, string::size_type m) $/;"	f
PrintString	source\c11\14\newcount-size.cc	/^	PrintString(ostream &o) : os(o) { }$/;"	f	class:PrintString
PrintString	source\c11\14\newcount-size.cc	/^class PrintString {$/;"	c	file:
ShorterString	source\c11\14\newcount-size.cc	/^class ShorterString {$/;"	c	file:
SizeComp	source\c11\14\newcount-size.cc	/^	SizeComp(size_t n): sz(n) { }  $/;"	f	class:SizeComp
SizeComp	source\c11\14\newcount-size.cc	/^class SizeComp {$/;"	c	file:
biggies	source\c11\14\newcount-size.cc	/^void biggies(vector<string> &words, vector<string>::size_type sz)$/;"	f
elimDups	source\c11\14\newcount-size.cc	/^void elimDups(vector<string> &words)$/;"	f
isShorter	source\c11\14\newcount-size.cc	/^bool isShorter(const string &s1, const string &s2)$/;"	f
main	source\c11\14\newcount-size.cc	/^int main()$/;"	f
operator ()	source\c11\14\newcount-size.cc	/^	bool operator()(const string &s) const { return s.size() >= sz; }$/;"	f	class:SizeComp
operator ()	source\c11\14\newcount-size.cc	/^	bool operator()(const string &s1, const string &s2) const$/;"	f	class:ShorterString
operator ()	source\c11\14\newcount-size.cc	/^	void operator()(const string &s) const { os << s << " "; }$/;"	f	class:PrintString
os	source\c11\14\newcount-size.cc	/^	ostream &os;$/;"	m	class:PrintString	file:
sz	source\c11\14\newcount-size.cc	/^	size_t sz;  \/\/ a data member for each variable captured by value$/;"	m	class:SizeComp	file:
~SizeComp	source\c11\14\newcount-size.cc	/^	~SizeComp() { }$/;"	f	class:SizeComp
PrintString	source\c11\14\readStr.cc	/^    PrintString(ostream &o = cout, char c = ' '): $/;"	f	class:PrintString
PrintString	source\c11\14\readStr.cc	/^class PrintString {$/;"	c	file:
ReadLine	source\c11\14\readStr.cc	/^	ReadLine(istream &i) : is(i) { }$/;"	f	class:ReadLine
ReadLine	source\c11\14\readStr.cc	/^class ReadLine {$/;"	c	file:
is	source\c11\14\readStr.cc	/^	istream &is;$/;"	m	class:ReadLine	file:
main	source\c11\14\readStr.cc	/^int main()$/;"	f
operator ()	source\c11\14\readStr.cc	/^	bool operator()(string &s) const { return getline(is, s); }$/;"	f	class:ReadLine
operator ()	source\c11\14\readStr.cc	/^    void operator()(const string &s) const { os << s << sep; }$/;"	f	class:PrintString
os	source\c11\14\readStr.cc	/^    ostream &os;   \/\/ stream on which to write$/;"	m	class:PrintString	file:
sep	source\c11\14\readStr.cc	/^	char sep;      \/\/ character to print after each output$/;"	m	class:PrintString	file:
display	source\c11\15\Basket.cc	/^void Basket::display(ostream &os) const$/;"	f	class:Basket
total_receipt	source\c11\15\Basket.cc	/^double Basket::total_receipt(ostream &os) const$/;"	f	class:Basket
BASKET_H	source\c11\15\Basket.h	31;"	d
Basket	source\c11\15\Basket.h	/^	Basket(): items(compare) { }$/;"	f	class:Basket
Basket	source\c11\15\Basket.h	/^class Basket {$/;"	c
Comp	source\c11\15\Basket.h	/^	typedef bool(*Comp)(const std::tr1::shared_ptr<Quote> &,$/;"	t	class:Basket
add_item	source\c11\15\Basket.h	/^	void add_item(const Quote& sale) \/\/ copy the given object$/;"	f	class:Basket
add_item	source\c11\15\Basket.h	/^	void add_item(const std::tr1::shared_ptr<Quote> &sale)  $/;"	f	class:Basket
compare	source\c11\15\Basket.h	/^	static bool compare(const std::tr1::shared_ptr<Quote> &lhs,$/;"	f	class:Basket
items	source\c11\15\Basket.h	/^    std::multiset<std::tr1::shared_ptr<Quote>, Comp> items; $/;"	m	class:Basket
main	source\c11\15\Basket_main.cc	/^int main()$/;"	f
eval	source\c11\15\Query.cc	/^AndQuery::eval(const TextQuery& text) const$/;"	f	class:AndQuery
eval	source\c11\15\Query.cc	/^NotQuery::eval(const TextQuery& text) const$/;"	f	class:NotQuery
eval	source\c11\15\Query.cc	/^OrQuery::eval(const TextQuery& text) const$/;"	f	class:OrQuery
AndQuery	source\c11\15\Query.h	/^    AndQuery(const Query &left, const Query &right): $/;"	f	class:AndQuery
AndQuery	source\c11\15\Query.h	/^class AndQuery: public BinaryQuery {$/;"	c
BinaryQuery	source\c11\15\Query.h	/^    BinaryQuery(const Query &l, const Query &r, std::string s): $/;"	f	class:BinaryQuery
BinaryQuery	source\c11\15\Query.h	/^class BinaryQuery: public Query_base {$/;"	c
NotQuery	source\c11\15\Query.h	/^    NotQuery(const Query &q): query(q) { }$/;"	f	class:NotQuery
NotQuery	source\c11\15\Query.h	/^class NotQuery: public Query_base {$/;"	c
OrQuery	source\c11\15\Query.h	/^    OrQuery(const Query &left, const Query &right): $/;"	f	class:OrQuery
OrQuery	source\c11\15\Query.h	/^class OrQuery: public BinaryQuery {$/;"	c
QUERY_H	source\c11\15\Query.h	31;"	d
Query	source\c11\15\Query.h	/^    Query(std::tr1::shared_ptr<Query_base> query): q(query) { }$/;"	f	class:Query
Query	source\c11\15\Query.h	/^Query::Query(const std::string &s): q(new WordQuery(s)) { }$/;"	f	class:Query
Query	source\c11\15\Query.h	/^class Query {$/;"	c
Query_base	source\c11\15\Query.h	/^class Query_base {$/;"	c
WordQuery	source\c11\15\Query.h	/^    WordQuery(const std::string &s): query_word(s) { }$/;"	f	class:WordQuery
WordQuery	source\c11\15\Query.h	/^class WordQuery: public Query_base {$/;"	c
eval	source\c11\15\Query.h	/^    QueryResult eval(const TextQuery &t) const $/;"	f	class:Query
eval	source\c11\15\Query.h	/^    QueryResult eval(const TextQuery &t) const$/;"	f	class:WordQuery
lhs	source\c11\15\Query.h	/^    Query lhs, rhs;    \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
line_no	source\c11\15\Query.h	/^    typedef TextQuery::line_no line_no; \/\/ used in the eval functions$/;"	t	class:Query_base
opSym	source\c11\15\Query.h	/^    std::string opSym; \/\/ name of the operator$/;"	m	class:BinaryQuery
operator &	source\c11\15\Query.h	/^inline Query operator&(const Query &lhs, const Query &rhs)$/;"	f
operator <<	source\c11\15\Query.h	/^operator<<(std::ostream &os, const Query &query) $/;"	f
operator |	source\c11\15\Query.h	/^inline Query operator|(const Query &lhs, const Query &rhs)$/;"	f
operator ~	source\c11\15\Query.h	/^inline Query operator~(const Query &operand)$/;"	f
q	source\c11\15\Query.h	/^    std::tr1::shared_ptr<Query_base> q;$/;"	m	class:Query
query	source\c11\15\Query.h	/^    Query query;$/;"	m	class:NotQuery
query_word	source\c11\15\Query.h	/^    std::string query_word;   \/\/ word for which to search $/;"	m	class:WordQuery
rep	source\c11\15\Query.h	/^	std::string rep() const { return "(" + lhs.rep() + " " $/;"	f	class:BinaryQuery
rep	source\c11\15\Query.h	/^	std::string rep() const { return q->rep(); }$/;"	f	class:Query
rep	source\c11\15\Query.h	/^	std::string rep() const { return query_word; }$/;"	f	class:WordQuery
rep	source\c11\15\Query.h	/^	std::string rep() const {return "~(" + query.rep() + ")";}$/;"	f	class:NotQuery
rhs	source\c11\15\Query.h	/^    Query lhs, rhs;    \/\/ right- and left-hand operands$/;"	m	class:BinaryQuery
~Query_base	source\c11\15\Query.h	/^    virtual ~Query_base() { }$/;"	f	class:Query_base
net_price	source\c11\15\Quote.cc	/^double Bulk_quote::net_price(size_t cnt) const$/;"	f	class:Bulk_quote
net_price	source\c11\15\Quote.cc	/^double Lim_quote::net_price(size_t cnt) const$/;"	f	class:Lim_quote
print_total	source\c11\15\Quote.cc	/^double print_total(ostream &os, $/;"	f
Bulk_quote	source\c11\15\Quote.h	/^    Bulk_quote() { }$/;"	f	class:Bulk_quote
Bulk_quote	source\c11\15\Quote.h	/^    Bulk_quote(const std::string& book, double p, $/;"	f	class:Bulk_quote
Bulk_quote	source\c11\15\Quote.h	/^class Bulk_quote : public Disc_quote { \/\/ Bulk_quote inherits from Quote$/;"	c
Disc_quote	source\c11\15\Quote.h	/^    Disc_quote(): quantity(0), discount(0.0) { }$/;"	f	class:Disc_quote
Disc_quote	source\c11\15\Quote.h	/^    Disc_quote(const std::string& book, double price,$/;"	f	class:Disc_quote
Disc_quote	source\c11\15\Quote.h	/^class Disc_quote : public Quote {$/;"	c
Lim_quote	source\c11\15\Quote.h	/^    Lim_quote(const std::string& book = "", $/;"	f	class:Lim_quote
Lim_quote	source\c11\15\Quote.h	/^class Lim_quote : public Disc_quote {$/;"	c
QUOTE_H	source\c11\15\Quote.h	31;"	d
Quote	source\c11\15\Quote.h	/^	Quote(): price(0.0) { }$/;"	f	class:Quote
Quote	source\c11\15\Quote.h	/^    Quote(const std::string &book, double sales_price):$/;"	f	class:Quote
Quote	source\c11\15\Quote.h	/^class Quote {$/;"	c
bookNo	source\c11\15\Quote.h	/^    std::string bookNo; \/\/ ISBN number of this item$/;"	m	class:Quote
clone	source\c11\15\Quote.h	/^    Bulk_quote* clone() const {return new Bulk_quote(*this);}$/;"	f	class:Bulk_quote
clone	source\c11\15\Quote.h	/^    Lim_quote* clone() const { return new Lim_quote(*this); }$/;"	f	class:Lim_quote
clone	source\c11\15\Quote.h	/^    virtual Quote* clone() const {return new Quote(*this);}$/;"	f	class:Quote
discount	source\c11\15\Quote.h	/^    double discount;      \/\/ fractional discount to apply$/;"	m	class:Disc_quote
discount_policy	source\c11\15\Quote.h	/^    std::pair<size_t, double> discount_policy() const$/;"	f	class:Disc_quote
isbn	source\c11\15\Quote.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Quote
net_price	source\c11\15\Quote.h	/^    virtual double net_price(std::size_t n) const $/;"	f	class:Quote
price	source\c11\15\Quote.h	/^    double price;       \/\/ normal, undiscounted price$/;"	m	class:Quote
quantity	source\c11\15\Quote.h	/^    std::size_t quantity; \/\/ purchase size for the discount to apply$/;"	m	class:Disc_quote
~Quote	source\c11\15\Quote.h	/^    virtual ~Quote() { } \/\/ dynamic binding for the destructor$/;"	f	class:Quote
main	source\c11\15\andQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
main	source\c11\15\and_orQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
get_file	source\c11\15\get_print.cc	/^TextQuery get_file(int argc, char **argv)$/;"	f
get_word	source\c11\15\get_print.cc	/^bool get_word(string &s1)$/;"	f
get_words	source\c11\15\get_print.cc	/^bool get_words(string &s1, string &s2)$/;"	f
main	source\c11\15\sample.cc	/^int main()$/;"	f
Base	source\c11\15\scope.cc	/^    Base(): mem(0) { }$/;"	f	struct:Base
Base	source\c11\15\scope.cc	/^struct Base {$/;"	s	file:
Derived	source\c11\15\scope.cc	/^    Derived(int i): mem(i) { } \/\/ initializes Derived::mem to i$/;"	f	struct:Derived
Derived	source\c11\15\scope.cc	/^struct Derived : Base {$/;"	s	file:
get_base_mem	source\c11\15\scope.cc	/^    int get_base_mem() { return Base::mem; }$/;"	f	struct:Derived
get_mem	source\c11\15\scope.cc	/^    int get_mem() { return mem; }  \/\/ returns Derived::mem$/;"	f	struct:Derived
main	source\c11\15\scope.cc	/^int main()$/;"	f
mem	source\c11\15\scope.cc	/^    int mem;   \/\/ hides mem in the base$/;"	m	struct:Derived	file:
mem	source\c11\15\scope.cc	/^    int mem;$/;"	m	struct:Base	file:
main	source\c11\15\useQuote.cc	/^int main()$/;"	f
main	source\c11\15\vecBasket.cc	/^int main ()$/;"	f
Base	source\c11\15\virtualsNscope.cc	/^class Base {$/;"	c	file:
D1	source\c11\15\virtualsNscope.cc	/^class D1 : public Base {$/;"	c	file:
D2	source\c11\15\virtualsNscope.cc	/^class D2 : public D1 {$/;"	c	file:
f2	source\c11\15\virtualsNscope.cc	/^void D1::f2() { cout << "D1::f2()" << endl; }$/;"	f	class:D1
f2	source\c11\15\virtualsNscope.cc	/^void D2::f2() { cout << "D2::f2()" << endl; }$/;"	f	class:D2
fcn	source\c11\15\virtualsNscope.cc	/^int Base::fcn() { cout << "Base::fcn()" << endl; return 0; }$/;"	f	class:Base
fcn	source\c11\15\virtualsNscope.cc	/^int D1::fcn(int) { cout << "D1::fcn(int)" << endl; return 0; }$/;"	f	class:D1
fcn	source\c11\15\virtualsNscope.cc	/^int D2::fcn() { cout << "D2::fcn()" << endl; return 0; }$/;"	f	class:D2
fcn	source\c11\15\virtualsNscope.cc	/^int D2::fcn(int) { cout << "D2::fcn(int)" << endl; return 0; }$/;"	f	class:D2
main	source\c11\15\virtualsNscope.cc	/^int main()$/;"	f
main	source\c11\15\wordQueryTest.cc	/^int main(int argc, char **argv)$/;"	f
main	source\c11\16\Array.cc	/^int main()$/;"	f
BLOB_H	source\c11\16\Blob.h	31;"	d
Blob	source\c11\16\Blob.h	/^    Blob<T>::Blob(It b, It e):$/;"	f	class:Blob
Blob	source\c11\16\Blob.h	/^Blob<T>::Blob():$/;"	f	class:Blob
Blob	source\c11\16\Blob.h	/^Blob<T>::Blob(T *p, std::size_t n): $/;"	f	class:Blob
Blob	source\c11\16\Blob.h	/^template <typename T> class Blob {$/;"	c
BlobPtr	source\c11\16\Blob.h	/^    BlobPtr(): curr(0) { }$/;"	f	class:BlobPtr
BlobPtr	source\c11\16\Blob.h	/^    BlobPtr(Blob<T> &a, size_t sz = 0): $/;"	f	class:BlobPtr
BlobPtr	source\c11\16\Blob.h	/^template <typename T> class BlobPtr : public std::iterator<std::bidirectional_iterator_tag,T> {$/;"	c
at	source\c11\16\Blob.h	/^Blob<T>::at(size_type i) const$/;"	f	class:Blob
at	source\c11\16\Blob.h	/^T& Blob<T>::at(size_type i) $/;"	f	class:Blob
back	source\c11\16\Blob.h	/^T& Blob<T>::back() $/;"	f	class:Blob
back	source\c11\16\Blob.h	/^const T& Blob<T>::back() const $/;"	f	class:Blob
begin	source\c11\16\Blob.h	/^	BlobPtr<T> begin() { return BlobPtr<T>(*this); }$/;"	f	class:Blob
check	source\c11\16\Blob.h	/^BlobPtr<T>::check(std::size_t i, const std::string &msg) const$/;"	f	class:BlobPtr
check	source\c11\16\Blob.h	/^void Blob<T>::check(size_type i, const std::string &msg) const$/;"	f	class:Blob
curr	source\c11\16\Blob.h	/^    std::size_t curr;      \/\/ current position within the array$/;"	m	class:BlobPtr
data	source\c11\16\Blob.h	/^	std::tr1::shared_ptr<std::vector<T> > data; $/;"	m	class:Blob
empty	source\c11\16\Blob.h	/^	bool empty() const { return data->empty(); }$/;"	f	class:Blob
end	source\c11\16\Blob.h	/^	BlobPtr<T> end() $/;"	f	class:Blob
front	source\c11\16\Blob.h	/^T& Blob<T>::front()$/;"	f	class:Blob
front	source\c11\16\Blob.h	/^const T& Blob<T>::front() const $/;"	f	class:Blob
operator !=	source\c11\16\Blob.h	/^bool operator!=(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)$/;"	f
operator *	source\c11\16\Blob.h	/^    T& operator*() const$/;"	f	class:BlobPtr
operator ++	source\c11\16\Blob.h	/^BlobPtr<T> BlobPtr<T>::operator++(int)$/;"	f	class:BlobPtr
operator ++	source\c11\16\Blob.h	/^BlobPtr<T>& BlobPtr<T>::operator++()$/;"	f	class:BlobPtr
operator --	source\c11\16\Blob.h	/^BlobPtr<T> BlobPtr<T>::operator--(int)$/;"	f	class:BlobPtr
operator --	source\c11\16\Blob.h	/^BlobPtr<T>& BlobPtr<T>::operator--()$/;"	f	class:BlobPtr
operator ->	source\c11\16\Blob.h	/^    T* operator->() const$/;"	f	class:BlobPtr
operator <<	source\c11\16\Blob.h	/^operator<<(std::ostream &os, const Blob<T> a)$/;"	f
operator ==	source\c11\16\Blob.h	/^bool operator==(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)$/;"	f
operator ==	source\c11\16\Blob.h	/^operator==(const Blob<T> lhs, const Blob<T> rhs)$/;"	f
operator []	source\c11\16\Blob.h	/^	T &operator[](std::size_t i)$/;"	f	class:BlobPtr
operator []	source\c11\16\Blob.h	/^	const T &operator[](std::size_t i) const$/;"	f	class:BlobPtr
operator []	source\c11\16\Blob.h	/^Blob<T>::operator[](size_type i) const$/;"	f	class:Blob
operator []	source\c11\16\Blob.h	/^T& Blob<T>::operator[](size_type i)$/;"	f	class:Blob
pop_back	source\c11\16\Blob.h	/^template <typename T> void Blob<T>::pop_back() $/;"	f	class:Blob
push_back	source\c11\16\Blob.h	/^	void push_back(const T &t) {data->push_back(t);}$/;"	f	class:Blob
size	source\c11\16\Blob.h	/^	size_type size() const { return data->size(); }$/;"	f	class:Blob
size_type	source\c11\16\Blob.h	/^	typedef typename std::vector<T>::size_type size_type;$/;"	t	class:Blob
swap	source\c11\16\Blob.h	/^	void swap(Blob &b) { data.swap(b.data); }$/;"	f	class:Blob
value_type	source\c11\16\Blob.h	/^	typedef T value_type;$/;"	t	class:Blob
wptr	source\c11\16\Blob.h	/^    std::tr1::weak_ptr<std::vector<T> > wptr;  $/;"	m	class:BlobPtr
DEBUGDELETE_H	source\c11\16\DebugDelete.h	31;"	d
DebugDelete	source\c11\16\DebugDelete.h	/^	DebugDelete(const std::string &s,$/;"	f	class:DebugDelete
DebugDelete	source\c11\16\DebugDelete.h	/^class DebugDelete {$/;"	c
operator ()	source\c11\16\DebugDelete.h	/^	template <typename T> void operator()(T *p) const $/;"	f	class:DebugDelete
os	source\c11\16\DebugDelete.h	/^	std::ostream &os;  \/\/ where to print debugging info$/;"	m	class:DebugDelete
type	source\c11\16\DebugDelete.h	/^	std::string type;  \/\/ what type of smart pointer we're deleting$/;"	m	class:DebugDelete
main	source\c11\16\SP.cc	/^int main()$/;"	f
Sales_data	source\c11\16\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	source\c11\16\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	source\c11\16\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator ()	source\c11\16\Sales_data.cc	/^	hash<Sales_data>::operator()(const Sales_data& s) const$/;"	f	class:std::tr1::hash
operator +	source\c11\16\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	source\c11\16\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	source\c11\16\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	source\c11\16\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	source\c11\16\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	source\c11\16\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
std	source\c11\16\Sales_data.cc	/^namespace std {$/;"	n	file:
tr1	source\c11\16\Sales_data.cc	/^	namespace tr1 {$/;"	n	namespace:std	file:
SALES_DATA_H	source\c11\16\Sales_data.h	31;"	d
Sales_data	source\c11\16\Sales_data.h	/^	Sales_data(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_data
Sales_data	source\c11\16\Sales_data.h	/^	Sales_data(const std::string &s): $/;"	f	class:Sales_data
Sales_data	source\c11\16\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	source\c11\16\Sales_data.h	/^class Sales_data {$/;"	c
argument_type	source\c11\16\Sales_data.h	/^    typedef Sales_data argument_type; \/\/ by default, this type needs ==$/;"	t	struct:std::tr1::hash
bookNo	source\c11\16\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	source\c11\16\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
hash	source\c11\16\Sales_data.h	/^struct hash<Sales_data>  \/\/ the template parameter of Sales_data$/;"	s	namespace:std::tr1
isbn	source\c11\16\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
operator !=	source\c11\16\Sales_data.h	/^bool operator!=(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator ==	source\c11\16\Sales_data.h	/^bool operator==(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
result_type	source\c11\16\Sales_data.h	/^    typedef size_t result_type;$/;"	t	struct:std::tr1::hash
revenue	source\c11\16\Sales_data.h	/^	double revenue;$/;"	m	class:Sales_data
std	source\c11\16\Sales_data.h	/^namespace std {$/;"	n
tr1	source\c11\16\Sales_data.h	/^namespace tr1 {$/;"	n	namespace:std
units_sold	source\c11\16\Sales_data.h	/^	unsigned units_sold;$/;"	m	class:Sales_data
VEC_H	source\c11\16\Vec.h	31;"	d
Vec	source\c11\16\Vec.h	/^    Vec(): elements(0), first_free(0), cap(0) { }$/;"	f	class:Vec
Vec	source\c11\16\Vec.h	/^Vec<T>::Vec(const Vec &s)$/;"	f	class:Vec
Vec	source\c11\16\Vec.h	/^class Vec {$/;"	c
alloc	source\c11\16\Vec.h	/^    static std::allocator<T> alloc; \/\/ allocates the elements$/;"	m	class:Vec
alloc	source\c11\16\Vec.h	/^template <typename T> std::allocator<T> Vec<T>::alloc;  $/;"	m	class:Vec
alloc_n_copy	source\c11\16\Vec.h	/^Vec<T>::alloc_n_copy(const T *b, const T *e) $/;"	f	class:Vec
begin	source\c11\16\Vec.h	/^	T *begin() const { return elements; }$/;"	f	class:Vec
cap	source\c11\16\Vec.h	/^    T* cap;        \/\/ pointer to one past the end of the array$/;"	m	class:Vec
capacity	source\c11\16\Vec.h	/^    size_t capacity() const { return cap - elements; }$/;"	f	class:Vec
chk_n_alloc	source\c11\16\Vec.h	/^	void chk_n_alloc() { if (first_free == cap) reallocate(); }$/;"	f	class:Vec
elements	source\c11\16\Vec.h	/^    T* elements;   \/\/ pointer to first element in the array$/;"	m	class:Vec
end	source\c11\16\Vec.h	/^	T *end() const { return first_free; }$/;"	f	class:Vec
first_free	source\c11\16\Vec.h	/^    T* first_free; \/\/ pointer to first free element in the array$/;"	m	class:Vec
free	source\c11\16\Vec.h	/^void Vec<T>::free()$/;"	f	class:Vec
operator =	source\c11\16\Vec.h	/^Vec<T> &Vec<T>::operator=(const Vec &rhs)$/;"	f	class:Vec
operator []	source\c11\16\Vec.h	/^    T& operator[](size_t n) { return elements[n]; }$/;"	f	class:Vec
operator []	source\c11\16\Vec.h	/^    const T& operator[](size_t n) const { return elements[n]; }$/;"	f	class:Vec
push_back	source\c11\16\Vec.h	/^void Vec<T>::push_back(const T& s)$/;"	f	class:Vec
reallocate	source\c11\16\Vec.h	/^void Vec<T>::reallocate()$/;"	f	class:Vec
size	source\c11\16\Vec.h	/^    size_t size() const { return first_free - elements; }$/;"	f	class:Vec
~Vec	source\c11\16\Vec.h	/^Vec<T>::~Vec() { free(); }$/;"	f	class:Vec
getVec	source\c11\16\Vecmain.cc	/^Vec<string> getVec(istream &is)$/;"	f
main	source\c11\16\Vecmain.cc	/^int main()$/;"	f
print	source\c11\16\Vecmain.cc	/^void print(const Vec<string> &svec)$/;"	f
main	source\c11\16\array-parms4.cc	/^int main()$/;"	f
main	source\c11\16\compare.cc	/^int main()$/;"	f
COMPARE_H	source\c11\16\compare.h	31;"	d
compare	source\c11\16\compare.h	/^int compare(const T &v1, const T &v2)$/;"	f
compare	source\c11\16\compare.h	/^int compare(const char* const &v1, const char* const &v2)$/;"	f
compare	source\c11\16\compareDef.cc	/^int compare(const T &v1, const T &v2)$/;"	f
compare	source\c11\16\compareDef.cc	/^int compare(const T &v1, const T &v2, F f) $/;"	f
main	source\c11\16\compareDef.cc	/^int main()$/;"	f
compare	source\c11\16\compareSpec.cc	/^int compare(const char (&p1)[N], const char (&p2)[M])$/;"	f
compare	source\c11\16\compareSpec.cc	/^int compare(const char *const& p1, const char *const& p2)$/;"	f
compare	source\c11\16\compareSpec.cc	/^template <typename T> int compare(const T &v1, const T &v2)$/;"	f
main	source\c11\16\compareSpec.cc	/^int main()$/;"	f
main	source\c11\16\debug.cc	/^int main()$/;"	f
DEBUG_REP_H	source\c11\16\debug_rep.h	31;"	d
debug_rep	source\c11\16\debug_rep.h	/^std::string debug_rep(char *p) $/;"	f
debug_rep	source\c11\16\debug_rep.h	/^std::string debug_rep(const char *p) $/;"	f
debug_rep	source\c11\16\debug_rep.h	/^std::string debug_rep(const std::string &s)$/;"	f
debug_rep	source\c11\16\debug_rep.h	/^template <> std::string debug_rep(const char *cp)$/;"	f
debug_rep	source\c11\16\debug_rep.h	/^template <typename T> std::string debug_rep(T *p)$/;"	f
debug_rep	source\c11\16\debug_rep.h	/^template <typename T> std::string debug_rep(T b, T e)$/;"	f
debug_rep	source\c11\16\debug_rep.h	/^template <typename T> std::string debug_rep(const T &t)$/;"	f
debug_rep	source\c11\16\debug_rep.h	/^template <typename T> std::string debug_rep(const std::vector<T> &v)$/;"	f
debug_rep	source\c11\16\debug_rep.h	/^template<> std::string debug_rep(char *p)$/;"	f
main	source\c11\16\multiset.cc	/^int main()$/;"	f
compare	source\c11\16\overSpec.cc	/^int compare(const char (&p1)[N], const char (&p2)[M])$/;"	f
compare	source\c11\16\overSpec.cc	/^int compare(const char* const &p1, const char* const &p2)$/;"	f
compare	source\c11\16\overSpec.cc	/^template <typename T> int compare(const T& v1, const T& v2)$/;"	f
main	source\c11\16\overSpec.cc	/^int main()$/;"	f
main	source\c11\16\qm.cc	/^int main() {$/;"	f
f	source\c11\16\special.cc	/^template <typename T> void f(T) { cout << "f(T)" << endl; }$/;"	f
f	source\c11\16\special.cc	/^template <typename T> void f(const T*) $/;"	f
g	source\c11\16\special.cc	/^template <typename T> void g(T) { cout << "g(T)" << endl; }$/;"	f
g	source\c11\16\special.cc	/^template <typename T> void g(T*) { cout << "g(T*)" << endl; }$/;"	f
main	source\c11\16\special.cc	/^int main()$/;"	f
main	source\c11\16\useBlob.cc	/^int main()$/;"	f
main	source\c11\16\useChcking.cc	/^int main()$/;"	f
main	source\c11\17\badgetc.cc	/^int main()$/;"	f
main	source\c11\17\bits.cc	/^int main() $/;"	f
Stores	source\c11\17\findbook.cc	/^typedef vector<vector<Sales_data> > Stores;$/;"	t	file:
build_store	source\c11\17\findbook.cc	/^vector<Sales_data> build_store(const string &s)$/;"	f
findBook	source\c11\17\findbook.cc	/^findBook(const Stores &files, const string &book)$/;"	f
lt	source\c11\17\findbook.cc	/^bool lt(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
main	source\c11\17\findbook.cc	/^int main(int argc, char **argv)$/;"	f
matches	source\c11\17\findbook.cc	/^              vector<Sales_data>::const_iterator> matches;$/;"	t	file:
reportResults	source\c11\17\findbook.cc	/^void reportResults(istream &in, ostream &os, const Stores &files)$/;"	f
main	source\c11\17\game.cc	/^int main()$/;"	f
play	source\c11\17\game.cc	/^bool play(bool player) { return player; }$/;"	f
main	source\c11\17\getc.cc	/^int main()$/;"	f
main	source\c11\17\getput.cc	/^int main()$/;"	f
get_status	source\c11\17\manips.cc	/^bool get_status()$/;"	f
main	source\c11\17\manips.cc	/^int main()$/;"	f
main	source\c11\17\no-skipws.cc	/^int main()$/;"	f
main	source\c11\17\normalInts.cc	/^int main()$/;"	f
OURRANDOM_H	source\c11\17\ourRandom.h	41;"	d
default_random_engine	source\c11\17\ourRandom.h	/^typedef std::tr1::mt19937 default_random_engine;$/;"	t
lround	source\c11\17\ourRandom.h	/^inline long lround(double d)$/;"	f
main	source\c11\17\point.cc	/^int main()$/;"	f
main	source\c11\17\prec.cc	/^int main()$/;"	f
main	source\c11\17\rand1.cc	/^int main()$/;"	f
main	source\c11\17\rand2.cc	/^int main()$/;"	f
main	source\c11\17\rand4.cc	/^int main()$/;"	f
bad_randVec	source\c11\17\rand6.cc	/^vector<unsigned> bad_randVec()$/;"	f
good_randVec	source\c11\17\rand6.cc	/^vector<unsigned> good_randVec()$/;"	f
main	source\c11\17\rand6.cc	/^int main()$/;"	f
main	source\c11\17\seed.cc	/^int main()$/;"	f
main	source\c11\17\seek.cc	/^int main()$/;"	f
main	source\c11\17\setw.cc	/^int main()$/;"	f
main	source\c11\17\skipws.cc	/^int main()$/;"	f
main	source\c11\17\tuple.cc	/^int main()$/;"	f
highlight	source\c11\18\Animal.cc	/^void highlight(const Endangered&)$/;"	f
main	source\c11\18\Animal.cc	/^int main() {$/;"	f
operator <<	source\c11\18\Animal.cc	/^ostream& operator<<(ostream &os, const ZooAnimal&)$/;"	f
print	source\c11\18\Animal.cc	/^void print(const Bear&) $/;"	f
Astaire	source\c11\18\Animal.h	/^const DanceType Astaire = 1;$/;"	v
Bear	source\c11\18\Animal.h	/^	Bear(): dancetype(Rogers) { }$/;"	f	class:Bear
Bear	source\c11\18\Animal.h	/^    Bear(std::string name, bool onExhibit=true, $/;"	f	class:Bear
Bear	source\c11\18\Animal.h	/^class Bear : public ZooAnimal {$/;"	c
DanceType	source\c11\18\Animal.h	/^typedef unsigned DanceType;$/;"	t
Endangered	source\c11\18\Animal.h	/^class Endangered {$/;"	c
Panda	source\c11\18\Animal.h	/^    Panda() { }$/;"	f	class:Panda
Panda	source\c11\18\Animal.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	source\c11\18\Animal.h	/^class Panda : public Bear, public Endangered {$/;"	c
PolarBear	source\c11\18\Animal.h	/^class PolarBear : public Bear { \/* . . . *\/ };$/;"	c
Rogers	source\c11\18\Animal.h	/^const DanceType Rogers = 42;$/;"	v
ZooAnimal	source\c11\18\Animal.h	/^    ZooAnimal(): exhibit_stat(false) { }$/;"	f	class:ZooAnimal
ZooAnimal	source\c11\18\Animal.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	source\c11\18\Animal.h	/^class ZooAnimal {$/;"	c
cuddle	source\c11\18\Animal.h	/^    virtual void cuddle()$/;"	f	class:Panda
dance	source\c11\18\Animal.h	/^    void dance(DanceType) const $/;"	f	class:Bear
dancetype	source\c11\18\Animal.h	/^    DanceType   dancetype;$/;"	m	class:Bear
exhibit_stat	source\c11\18\Animal.h	/^    bool        exhibit_stat;$/;"	m	class:ZooAnimal
fam_name	source\c11\18\Animal.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	source\c11\18\Animal.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
highlight	source\c11\18\Animal.h	/^    virtual void highlight() const$/;"	f	class:Endangered
highlight	source\c11\18\Animal.h	/^    void highlight()$/;"	f	class:Panda
max_weight	source\c11\18\Animal.h	/^	virtual double max_weight() const$/;"	f	class:Endangered
max_weight	source\c11\18\Animal.h	/^	virtual double max_weight() const$/;"	f	class:ZooAnimal
max_weight	source\c11\18\Animal.h	/^double Panda::max_weight() const$/;"	f	class:Panda
mumble	source\c11\18\Animal.h	/^    int mumble(int)$/;"	f	class:Bear
name	source\c11\18\Animal.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
nm	source\c11\18\Animal.h	/^    std::string nm;$/;"	m	class:ZooAnimal
onExhibit	source\c11\18\Animal.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
population	source\c11\18\Animal.h	/^    virtual int population() const$/;"	f	class:ZooAnimal
print	source\c11\18\Animal.h	/^    virtual std::ostream &print() const$/;"	f	class:Bear
print	source\c11\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:Endangered
print	source\c11\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:Panda
print	source\c11\18\Animal.h	/^    virtual std::ostream& print() const$/;"	f	class:ZooAnimal
toes	source\c11\18\Animal.h	/^    virtual int toes() const$/;"	f	class:Bear
toes	source\c11\18\Animal.h	/^    virtual int toes()$/;"	f	class:Panda
two_left_feet	source\c11\18\Animal.h	/^const DanceType two_left_feet = 0;$/;"	v
~Bear	source\c11\18\Animal.h	/^    virtual ~Bear()$/;"	f	class:Bear
~Endangered	source\c11\18\Animal.h	/^    virtual ~Endangered() $/;"	f	class:Endangered
~Panda	source\c11\18\Animal.h	/^    virtual ~Panda()$/;"	f	class:Panda
~ZooAnimal	source\c11\18\Animal.h	/^    virtual ~ZooAnimal()$/;"	f	class:ZooAnimal
Bear	source\c11\18\Animal_virtual_baseVers.h	/^    Bear() : dance_flag(two_left_feet) { }$/;"	f	class:Bear
Bear	source\c11\18\Animal_virtual_baseVers.h	/^Bear::Bear(std::string name, bool onExhibit):$/;"	f	class:Bear
Bear	source\c11\18\Animal_virtual_baseVers.h	/^class Bear : virtual public ZooAnimal {$/;"	c
DanceType	source\c11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	g	class:Bear
Endangered	source\c11\18\Animal_virtual_baseVers.h	/^    Endangered(Status stat = improving): animal_status(stat) { }$/;"	f	class:Endangered
Endangered	source\c11\18\Animal_virtual_baseVers.h	/^class Endangered {$/;"	c
Panda	source\c11\18\Animal_virtual_baseVers.h	/^	Panda(): sleeping_flag(false) { }$/;"	f	class:Panda
Panda	source\c11\18\Animal_virtual_baseVers.h	/^Panda::Panda(std::string name, bool onExhibit)$/;"	f	class:Panda
Panda	source\c11\18\Animal_virtual_baseVers.h	/^class Panda : public Bear,$/;"	c
Raccoon	source\c11\18\Animal_virtual_baseVers.h	/^	Raccoon(): pettable_flag(false) { }$/;"	f	class:Raccoon
Raccoon	source\c11\18\Animal_virtual_baseVers.h	/^Raccoon::Raccoon(std::string name, bool onExhibit)$/;"	f	class:Raccoon
Raccoon	source\c11\18\Animal_virtual_baseVers.h	/^class Raccoon : public virtual ZooAnimal {$/;"	c
Status	source\c11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	g	class:Endangered
ZooAnimal	source\c11\18\Animal_virtual_baseVers.h	/^	ZooAnimal(): exhibit_stat(false) { }$/;"	f	class:ZooAnimal
ZooAnimal	source\c11\18\Animal_virtual_baseVers.h	/^    ZooAnimal(std::string animal, bool exhibit,$/;"	f	class:ZooAnimal
ZooAnimal	source\c11\18\Animal_virtual_baseVers.h	/^class ZooAnimal {$/;"	c
animal_status	source\c11\18\Animal_virtual_baseVers.h	/^    Status animal_status;$/;"	m	class:Endangered
critical	source\c11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
dance	source\c11\18\Animal_virtual_baseVers.h	/^    void dance(DanceType) const$/;"	f	class:Bear
dance_flag	source\c11\18\Animal_virtual_baseVers.h	/^    DanceType dance_flag;$/;"	m	class:Bear
environment	source\c11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
exhibit_stat	source\c11\18\Animal_virtual_baseVers.h	/^    bool exhibit_stat;$/;"	m	class:ZooAnimal
fam_name	source\c11\18\Animal_virtual_baseVers.h	/^    std::string fam_name;$/;"	m	class:ZooAnimal
family_name	source\c11\18\Animal_virtual_baseVers.h	/^    std::string family_name() const { return fam_name; }$/;"	f	class:ZooAnimal
fandango	source\c11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
highlight	source\c11\18\Animal_virtual_baseVers.h	/^    virtual void highlight() const$/;"	f	class:Endangered
improving	source\c11\18\Animal_virtual_baseVers.h	/^    enum Status { critical, environment, improving };$/;"	e	enum:Endangered::Status
isA	source\c11\18\Animal_virtual_baseVers.h	/^    virtual std::string isA() const$/;"	f	class:Bear
macarena	source\c11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
mumble	source\c11\18\Animal_virtual_baseVers.h	/^    int mumble(int)$/;"	f	class:Bear
name	source\c11\18\Animal_virtual_baseVers.h	/^    std::string name() const { return nm; }$/;"	f	class:ZooAnimal
name	source\c11\18\Animal_virtual_baseVers.h	/^    std::string name;$/;"	m	class:Bear
nm	source\c11\18\Animal_virtual_baseVers.h	/^    std::string nm;$/;"	m	class:ZooAnimal
onExhibit	source\c11\18\Animal_virtual_baseVers.h	/^    bool onExhibit() const { return exhibit_stat; }$/;"	f	class:ZooAnimal
pettable	source\c11\18\Animal_virtual_baseVers.h	/^    bool pettable() const {return pettable_flag;  }$/;"	f	class:Raccoon
pettable	source\c11\18\Animal_virtual_baseVers.h	/^    void pettable(bool petval) {pettable_flag = petval;}$/;"	f	class:Raccoon
pettable_flag	source\c11\18\Animal_virtual_baseVers.h	/^    bool pettable_flag;$/;"	m	class:Raccoon
population	source\c11\18\Animal_virtual_baseVers.h	/^    virtual int population() const$/;"	f	class:ZooAnimal
print	source\c11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream &print(std::ostream&) const$/;"	f	class:Bear
print	source\c11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Endangered
print	source\c11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Panda
print	source\c11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:Raccoon
print	source\c11\18\Animal_virtual_baseVers.h	/^    virtual std::ostream& print(std::ostream&) const$/;"	f	class:ZooAnimal
sleeping	source\c11\18\Animal_virtual_baseVers.h	/^    bool sleeping() const {return sleeping_flag;}$/;"	f	class:Panda
sleeping	source\c11\18\Animal_virtual_baseVers.h	/^    void sleeping(bool newval) {sleeping_flag = newval;}$/;"	f	class:Panda
sleeping_flag	source\c11\18\Animal_virtual_baseVers.h	/^    bool sleeping_flag;$/;"	m	class:Panda
two_left_feet	source\c11\18\Animal_virtual_baseVers.h	/^    enum DanceType { two_left_feet, macarena, fandango };$/;"	e	enum:Bear::DanceType
~Bear	source\c11\18\Animal_virtual_baseVers.h	/^	virtual ~Bear() { std::cout << "Bear::~Bear" << std::endl; }$/;"	f	class:Bear
~Endangered	source\c11\18\Animal_virtual_baseVers.h	/^    virtual ~Endangered() $/;"	f	class:Endangered
~ZooAnimal	source\c11\18\Animal_virtual_baseVers.h	/^    virtual ~ZooAnimal()$/;"	f	class:ZooAnimal
Sales_data	source\c11\18\Sales_data.cc	/^Sales_data::Sales_data(istream &is) $/;"	f	class:Sales_data
add	source\c11\18\Sales_data.cc	/^Sales_data add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	source\c11\18\Sales_data.cc	/^double Sales_data::avg_price() const$/;"	f	class:Sales_data
operator ()	source\c11\18\Sales_data.cc	/^hash<Sales_data>::operator()(const Sales_data& s) const$/;"	f	class:std::hash
operator +	source\c11\18\Sales_data.cc	/^operator+(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
operator +=	source\c11\18\Sales_data.cc	/^Sales_data& Sales_data::operator+=(const Sales_data &rhs)$/;"	f	class:Sales_data
operator <<	source\c11\18\Sales_data.cc	/^ostream &operator<<(ostream &os, const Sales_data &item)$/;"	f
operator >>	source\c11\18\Sales_data.cc	/^istream &operator>>(istream &is, Sales_data &item)$/;"	f
print	source\c11\18\Sales_data.cc	/^ostream &print(ostream &os, const Sales_data &item)$/;"	f
read	source\c11\18\Sales_data.cc	/^istream &read(istream &is, Sales_data &item)$/;"	f
std	source\c11\18\Sales_data.cc	/^namespace std {$/;"	n	file:
main	source\c11\18\book.cc	/^int main()$/;"	f
BOOKEXCEPT_H	source\c11\18\bookexcept.h	31;"	d
isbn_mismatch	source\c11\18\bookexcept.h	/^    explicit isbn_mismatch(const std::string &s): $/;"	f	class:isbn_mismatch
isbn_mismatch	source\c11\18\bookexcept.h	/^    isbn_mismatch(const std::string &s,$/;"	f	class:isbn_mismatch
isbn_mismatch	source\c11\18\bookexcept.h	/^class isbn_mismatch: public std::logic_error {$/;"	c
left	source\c11\18\bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
out_of_stock	source\c11\18\bookexcept.h	/^    explicit out_of_stock(const std::string &s):$/;"	f	class:out_of_stock
out_of_stock	source\c11\18\bookexcept.h	/^class out_of_stock: public std::runtime_error {$/;"	c
right	source\c11\18\bookexcept.h	/^    const std::string left, right;$/;"	m	class:isbn_mismatch
~isbn_mismatch	source\c11\18\bookexcept.h	/^	~isbn_mismatch() throw() { }$/;"	f	class:isbn_mismatch
main	source\c11\18\class.cc	/^int main()$/;"	f
compute	source\c11\18\ex-over.cc	/^    void compute() { cout << "primerLib::compute()" << endl; }$/;"	f	namespace:primerLib
compute	source\c11\18\ex-over.cc	/^    void compute(const void *) $/;"	f	namespace:primerLib
compute	source\c11\18\ex-over.cc	/^void compute(char*, char* = 0)$/;"	f
compute	source\c11\18\ex-over.cc	/^void compute(double, double = 3.4)$/;"	f
compute	source\c11\18\ex-over.cc	/^void compute(int) { cout << "compute(int)" << endl; }$/;"	f
main	source\c11\18\ex-over.cc	/^int main()$/;"	f
primerLib	source\c11\18\ex-over.cc	/^namespace primerLib {$/;"	n	file:
Bulk_item	source\c11\18\inherit.cc	/^	Bulk_item() { std::cout << "Bulk_item::Bulk_item" << std::endl; }$/;"	f	class:Bulk_item
Bulk_item	source\c11\18\inherit.cc	/^class Bulk_item : public NS::Quote { $/;"	c	file:
NS	source\c11\18\inherit.cc	/^namespace NS {$/;"	n	file:
Quote	source\c11\18\inherit.cc	/^		Quote() { std::cout << "Quote::Quote" << std::endl; } $/;"	f	class:NS::Quote
Quote	source\c11\18\inherit.cc	/^    class Quote { $/;"	c	namespace:NS	file:
display	source\c11\18\inherit.cc	/^    void display(const Quote&) $/;"	f	namespace:NS
main	source\c11\18\inherit.cc	/^int main() {$/;"	f
Base1	source\c11\18\mi-scope.cc	/^	Base1(): ival(1) { }$/;"	f	struct:Base1
Base1	source\c11\18\mi-scope.cc	/^struct Base1 {$/;"	s	file:
Base2	source\c11\18\mi-scope.cc	/^	Base2(): ival(2) { }$/;"	f	struct:Base2
Base2	source\c11\18\mi-scope.cc	/^struct Base2 {$/;"	s	file:
Derived	source\c11\18\mi-scope.cc	/^	Derived(): ival(3) { }$/;"	f	struct:Derived
Derived	source\c11\18\mi-scope.cc	/^struct Derived : public Base1 {$/;"	s	file:
MI	source\c11\18\mi-scope.cc	/^	MI(): ival(4) { }$/;"	f	struct:MI
MI	source\c11\18\mi-scope.cc	/^struct MI : public Derived, public Base2 {$/;"	s	file:
ival	source\c11\18\mi-scope.cc	/^	int ival;$/;"	m	struct:Derived	file:
ival	source\c11\18\mi-scope.cc	/^    int ival;$/;"	m	struct:Base1	file:
ival	source\c11\18\mi-scope.cc	/^    int ival;$/;"	m	struct:Base2	file:
ival	source\c11\18\mi-scope.cc	/^    int ival;$/;"	m	struct:MI	file:
main	source\c11\18\mi-scope.cc	/^int main()$/;"	f
print	source\c11\18\mi-scope.cc	/^    void print(double) const        \/\/ public by default$/;"	f	struct:Base2
print	source\c11\18\mi-scope.cc	/^    void print(int) const     \/\/ public by default$/;"	f	struct:Base1
print	source\c11\18\mi-scope.cc	/^    void print(std::string) const   \/\/ public by default$/;"	f	struct:Derived
print	source\c11\18\mi-scope.cc	/^    void print(std::vector<double>) \/\/ public by default$/;"	f	struct:MI
libs_R_us	source\c11\18\over.cc	/^namespace libs_R_us {$/;"	n	file:
main	source\c11\18\over.cc	/^int main()$/;"	f
print	source\c11\18\over.cc	/^    extern void print(double) $/;"	f	namespace:libs_R_us
print	source\c11\18\over.cc	/^    extern void print(int) $/;"	f	namespace:libs_R_us
print	source\c11\18\over.cc	/^void print(const std::string &)$/;"	f
AW	source\c11\18\over2.cc	/^namespace AW {$/;"	n	file:
Primer	source\c11\18\over2.cc	/^namespace Primer {$/;"	n	file:
main	source\c11\18\over2.cc	/^int main() {$/;"	f
print	source\c11\18\over2.cc	/^    double print(double d) $/;"	f	namespace:Primer
print	source\c11\18\over2.cc	/^    int print(int i) $/;"	f	namespace:AW
A	source\c11\18\usingDirective.cc	/^namespace A {$/;"	n	file:
blip	source\c11\18\usingDirective.cc	/^namespace blip {$/;"	n	file:
f	source\c11\18\usingDirective.cc	/^	void f() $/;"	f	namespace:blip
f	source\c11\18\usingDirective.cc	/^void f() $/;"	f
i	source\c11\18\usingDirective.cc	/^    int i = 0, j = 42;$/;"	m	namespace:A	file:
i	source\c11\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
j	source\c11\18\usingDirective.cc	/^    int i = 0, j = 42;$/;"	m	namespace:A	file:
j	source\c11\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
j	source\c11\18\usingDirective.cc	/^int j = 0;  \/\/ ok: j inside blip is hidden inside a namespace$/;"	v
k	source\c11\18\usingDirective.cc	/^    int i = 16, j = 15, k = 23;$/;"	m	namespace:blip	file:
main	source\c11\18\usingDirective.cc	/^int main() $/;"	f
dance	source\c11\18\virt-inherit.cc	/^void dance(const Bear&) $/;"	f
main	source\c11\18\virt-inherit.cc	/^int main ()$/;"	f
operator <<	source\c11\18\virt-inherit.cc	/^ostream& operator<<(ostream&, const ZooAnimal&) $/;"	f
rummage	source\c11\18\virt-inherit.cc	/^void rummage(const Raccoon&) $/;"	f
Menu	source\c11\19\Screen.cc	/^Screen::Action Screen::Menu[] = { &Screen::home,$/;"	m	class:Screen	file:
Action	source\c11\19\Screen.h	/^	typedef Screen&(Screen::*Action)();$/;"	t	class:Screen
BACK	source\c11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
DOWN	source\c11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
Directions	source\c11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	g	class:Screen
FORWARD	source\c11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
HOME	source\c11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
Menu	source\c11\19\Screen.h	/^    static Action Menu[];      \/\/ function table$/;"	m	class:Screen
SCREEN_H	source\c11\19\Screen.h	31;"	d
Screen	source\c11\19\Screen.h	/^    Screen(pos ht = 0, pos wd = 0): contents(ht * wd, ' '), cursor(0), $/;"	f	class:Screen
Screen	source\c11\19\Screen.h	/^class Screen {$/;"	c
UP	source\c11\19\Screen.h	/^    enum Directions { HOME, FORWARD, BACK, UP, DOWN };$/;"	e	enum:Screen::Directions
back	source\c11\19\Screen.h	/^    Screen& back() { --cursor; return *this; }$/;"	f	class:Screen
contents	source\c11\19\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	source\c11\19\Screen.h	/^    pos cursor;$/;"	m	class:Screen
data	source\c11\19\Screen.h	/^	static const std::string Screen::*data() $/;"	f	class:Screen::Screen
down	source\c11\19\Screen.h	/^    Screen& down() {cursor -= height; return *this; }$/;"	f	class:Screen
forward	source\c11\19\Screen.h	/^    Screen& forward() { ++cursor; return *this; }$/;"	f	class:Screen
get	source\c11\19\Screen.h	/^    char get() const { return contents[cursor]; }$/;"	f	class:Screen
get	source\c11\19\Screen.h	/^char Screen::get(pos r, pos c) const \/\/ declared as inline in the class$/;"	f	class:Screen
get_cursor	source\c11\19\Screen.h	/^	char get_cursor() const { return contents[cursor]; }$/;"	f	class:Screen
height	source\c11\19\Screen.h	/^    pos height, width;$/;"	m	class:Screen
home	source\c11\19\Screen.h	/^    Screen& home() { cursor = 0; return *this; }$/;"	f	class:Screen
move	source\c11\19\Screen.h	/^Screen& Screen::move(Directions cm)$/;"	f	class:Screen
pos	source\c11\19\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
up	source\c11\19\Screen.h	/^    Screen& up() { cursor += height; return *this; }$/;"	f	class:Screen
width	source\c11\19\Screen.h	/^    pos height, width;$/;"	m	class:Screen
QueryResult	source\c11\19\TextQuery.h	/^TextQuery::QueryResult::QueryResult(string s, $/;"	f	class:TextQuery::QueryResult
QueryResult	source\c11\19\TextQuery.h	/^class TextQuery::QueryResult {$/;"	c	class:TextQuery
TEXTQUERY_H	source\c11\19\TextQuery.h	31;"	d
TextQuery	source\c11\19\TextQuery.h	/^class TextQuery {$/;"	c
begin	source\c11\19\TextQuery.h	/^	line_it begin() const { return lines->cbegin(); }$/;"	f	class:TextQuery::QueryResult
end	source\c11\19\TextQuery.h	/^	line_it end() const   { return lines->cend(); }$/;"	f	class:TextQuery::QueryResult
file	source\c11\19\TextQuery.h	/^	std::shared_ptr<std::vector<std::string>> file;  \/\/input file$/;"	m	class:TextQuery::QueryResult
file	source\c11\19\TextQuery.h	/^    std::shared_ptr<std::vector<std::string>> file; \/\/ input file$/;"	m	class:TextQuery
get_file	source\c11\19\TextQuery.h	/^	std::shared_ptr<std::vector<std::string>> get_file() { return file; }$/;"	f	class:TextQuery::QueryResult
line_it	source\c11\19\TextQuery.h	/^	typedef std::set<line_no>::const_iterator line_it;$/;"	t	class:TextQuery::QueryResult
line_no	source\c11\19\TextQuery.h	/^	typedef std::vector<std::string>::size_type line_no;$/;"	t	class:TextQuery
lines	source\c11\19\TextQuery.h	/^	std::shared_ptr<std::set<line_no>> lines; \/\/ lines it's on$/;"	m	class:TextQuery::QueryResult
size	source\c11\19\TextQuery.h	/^	std::set<line_no>::size_type size() const  { return lines->size(); }$/;"	f	class:TextQuery::QueryResult
sought	source\c11\19\TextQuery.h	/^	std::string sought;  \/\/ word this query represents$/;"	m	class:TextQuery::QueryResult
static_mem	source\c11\19\TextQuery.h	/^	static int static_mem;$/;"	m	class:TextQuery::QueryResult
whitespace_chars	source\c11\19\TextQuery.h	/^    static std::string whitespace_chars;     $/;"	m	class:TextQuery
wm	source\c11\19\TextQuery.h	/^	         std::shared_ptr<std::set<line_no>>> wm;  $/;"	m	class:TextQuery
CHAR	source\c11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon5
DBL	source\c11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon5
INT	source\c11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon5
STR	source\c11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	e	enum:Token::__anon5
TOKEN_H	source\c11\19\Token.h	35;"	d
Token	source\c11\19\Token.h	/^	Token(): tok(INT), ival{0} { }$/;"	f	class:Token
Token	source\c11\19\Token.h	/^	Token(const Token &t): tok(t.tok) { copyUnion(t); }$/;"	f	class:Token
Token	source\c11\19\Token.h	/^class Token {$/;"	c
copyUnion	source\c11\19\Token.h	/^void Token::copyUnion(const Token &t)$/;"	f	class:Token
cval	source\c11\19\Token.h	/^        char   cval;$/;"	m	union:Token::__anon6
dval	source\c11\19\Token.h	/^        double dval;$/;"	m	union:Token::__anon6
ival	source\c11\19\Token.h	/^        int    ival;$/;"	m	union:Token::__anon6
operator <<	source\c11\19\Token.h	/^std::ostream &operator<<(std::ostream &os, const Token &t)$/;"	f
operator =	source\c11\19\Token.h	/^Token &Token::operator=(char c)$/;"	f	class:Token
operator =	source\c11\19\Token.h	/^Token &Token::operator=(const Token &t)$/;"	f	class:Token
operator =	source\c11\19\Token.h	/^Token &Token::operator=(const std::string &s)$/;"	f	class:Token
operator =	source\c11\19\Token.h	/^Token &Token::operator=(double d)$/;"	f	class:Token
operator =	source\c11\19\Token.h	/^Token &Token::operator=(int i)$/;"	f	class:Token
sval	source\c11\19\Token.h	/^		std::string sval;$/;"	m	union:Token::__anon6
tok	source\c11\19\Token.h	/^    enum {INT, CHAR, DBL, STR} tok; \/\/ discriminant$/;"	m	class:Token	typeref:enum:Token::__anon5
~Token	source\c11\19\Token.h	/^	~Token() { if (tok == STR) sval.~string(); }$/;"	f	class:Token
Bit	source\c11\19\bitfields.cc	/^typedef unsigned int Bit;$/;"	t	file:
EXECUTE	source\c11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
File	source\c11\19\bitfields.cc	/^class File {$/;"	c	file:
READ	source\c11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
WRITE	source\c11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	e	enum:File::modes	file:
close	source\c11\19\bitfields.cc	/^void File::close()$/;"	f	class:File
isRead	source\c11\19\bitfields.cc	/^inline bool File::isRead() const { return mode & READ; }$/;"	f	class:File
main	source\c11\19\bitfields.cc	/^int main()$/;"	f
modes	source\c11\19\bitfields.cc	/^	enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };$/;"	g	class:File	file:
open	source\c11\19\bitfields.cc	/^File &File::open(File::modes m)$/;"	f	class:File
setWrite	source\c11\19\bitfields.cc	/^inline void File::setWrite() { mode |= WRITE; }$/;"	f	class:File
write	source\c11\19\bitfields.cc	/^void File::write()$/;"	f	class:File
Lshift	source\c11\19\calc.cc	/^	unsigned Lshift(unsigned op1, unsigned op2) $/;"	f	struct:ShiftOps
Rshift	source\c11\19\calc.cc	/^	unsigned Rshift(unsigned op1, unsigned op2) $/;"	f	struct:ShiftOps
ShiftOps	source\c11\19\calc.cc	/^	ShiftOps(std::ostream &o) : os(o) { }$/;"	f	struct:ShiftOps
ShiftOps	source\c11\19\calc.cc	/^struct ShiftOps {$/;"	s	file:
add	source\c11\19\calc.cc	/^int add(int i, int j) { return i + j; }$/;"	f
divide	source\c11\19\calc.cc	/^struct divide {$/;"	s	file:
main	source\c11\19\calc.cc	/^int main()$/;"	f
mod	source\c11\19\calc.cc	/^int mod(int i, int j) { return i % j; };$/;"	f
mult	source\c11\19\calc.cc	/^int mult(int i, int j) { return i * j; };$/;"	f
operator ()	source\c11\19\calc.cc	/^    int operator()(int denominator, int divisor) {$/;"	f	struct:divide
os	source\c11\19\calc.cc	/^	std::ostream &os;$/;"	m	struct:ShiftOps	file:
A	source\c11\19\dyn_cast.cc	/^struct A { virtual ~A() { } };$/;"	s	file:
B	source\c11\19\dyn_cast.cc	/^struct B : virtual public A { \/* . . . *\/ };$/;"	s	file:
Base	source\c11\19\dyn_cast.cc	/^struct Base {$/;"	s	file:
C	source\c11\19\dyn_cast.cc	/^struct C : public B { \/* . . . *\/ };$/;"	s	file:
D	source\c11\19\dyn_cast.cc	/^struct D : public B, virtual public A { \/* . . . *\/ };$/;"	s	file:
Derived	source\c11\19\dyn_cast.cc	/^struct Derived: public Base { };$/;"	s	file:
cast_to_ref	source\c11\19\dyn_cast.cc	/^void cast_to_ref(const Base &b)$/;"	f
exercises	source\c11\19\dyn_cast.cc	/^void exercises() {$/;"	f
main	source\c11\19\dyn_cast.cc	/^int main()$/;"	f
~A	source\c11\19\dyn_cast.cc	/^struct A { virtual ~A() { } };$/;"	f	struct:A
~Base	source\c11\19\dyn_cast.cc	/^   virtual ~Base() {};$/;"	f	struct:Base
INLINE	source\c11\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
Tokens	source\c11\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	g	file:
VIRTUAL	source\c11\19\enum-match.cc	/^enum Tokens {INLINE = 128, VIRTUAL = 129};$/;"	e	enum:Tokens	file:
ff	source\c11\19\enum-match.cc	/^void ff(Tokens) $/;"	f
ff	source\c11\19\enum-match.cc	/^void ff(int) $/;"	f
main	source\c11\19\enum-match.cc	/^int main() {$/;"	f
newf	source\c11\19\enum-match.cc	/^void newf(int) $/;"	f
newf	source\c11\19\enum-match.cc	/^void newf(unsigned char) $/;"	f
append	source\c11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	e	enum:open_modes	file:
charTyp	source\c11\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	e	enum:intTypes	file:
charVal	source\c11\19\enum.cc	/^	charVal = 255, shortVal = 65535, intVal = 65535, $/;"	e	enum:intValues	file:
charbits	source\c11\19\enum.cc	/^const intTypes charbits = charTyp;$/;"	v
input	source\c11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	e	enum:open_modes	file:
intTyp	source\c11\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	e	enum:intTypes	file:
intTypes	source\c11\19\enum.cc	/^enum intTypes {$/;"	g	file:
intVal	source\c11\19\enum.cc	/^	charVal = 255, shortVal = 65535, intVal = 65535, $/;"	e	enum:intValues	file:
intValues	source\c11\19\enum.cc	/^enum intValues {$/;"	g	file:
longTyp	source\c11\19\enum.cc	/^	longTyp = 32, long_longTyp = 64$/;"	e	enum:intTypes	file:
longVal	source\c11\19\enum.cc	/^	longVal = 4294967295UL, $/;"	e	enum:intValues	file:
long_longTyp	source\c11\19\enum.cc	/^	longTyp = 32, long_longTyp = 64$/;"	e	enum:intTypes	file:
long_longVal	source\c11\19\enum.cc	/^	long_longVal = 18446744073709551615ULL$/;"	e	enum:intValues	file:
main	source\c11\19\enum.cc	/^int main() $/;"	f
om	source\c11\19\enum.cc	/^open_modes om = input; $/;"	v
open_modes	source\c11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	g	file:
output	source\c11\19\enum.cc	/^enum open_modes {input, output, append};$/;"	e	enum:open_modes	file:
shortTyp	source\c11\19\enum.cc	/^	charTyp = 8, shortTyp = 16, intTyp = 16, $/;"	e	enum:intTypes	file:
shortVal	source\c11\19\enum.cc	/^	charVal = 255, shortVal = 65535, intVal = 65535, $/;"	e	enum:intValues	file:
main	source\c11\19\memFN-bind.cc	/^int main()$/;"	f
main	source\c11\19\tok2.cc	/^int main()$/;"	f
Base	source\c11\19\typeid.cc	/^struct Base {$/;"	s	file:
Derived	source\c11\19\typeid.cc	/^struct Derived : Base { };$/;"	s	file:
main	source\c11\19\typeid.cc	/^int main()$/;"	f
~Base	source\c11\19\typeid.cc	/^    virtual ~Base() { }$/;"	f	struct:Base
main	source\c11\19\useScreen.cc	/^int main ()$/;"	f
SALESITEM_H	source\c11\1\Sales_item.h	39;"	d
Sales_item	source\c11\1\Sales_item.h	/^    Sales_item(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_item
Sales_item	source\c11\1\Sales_item.h	/^    Sales_item(const std::string &book): $/;"	f	class:Sales_item
Sales_item	source\c11\1\Sales_item.h	/^    Sales_item(std::istream &is) { is >> *this; }$/;"	f	class:Sales_item
Sales_item	source\c11\1\Sales_item.h	/^class Sales_item {$/;"	c
avg_price	source\c11\1\Sales_item.h	/^double Sales_item::avg_price() const$/;"	f	class:Sales_item
bookNo	source\c11\1\Sales_item.h	/^    std::string bookNo;      \/\/ implicitly initialized to the empty string$/;"	m	class:Sales_item
compareIsbn	source\c11\1\Sales_item.h	/^bool compareIsbn(const Sales_item &lhs, const Sales_item &rhs) $/;"	f
isbn	source\c11\1\Sales_item.h	/^    std::string isbn() const { return bookNo; }$/;"	f	class:Sales_item
operator !=	source\c11\1\Sales_item.h	/^operator!=(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator +	source\c11\1\Sales_item.h	/^operator+(const Sales_item& lhs, const Sales_item& rhs) $/;"	f
operator +=	source\c11\1\Sales_item.h	/^Sales_item& Sales_item::operator+=(const Sales_item& rhs) $/;"	f	class:Sales_item
operator <<	source\c11\1\Sales_item.h	/^operator<<(std::ostream& out, const Sales_item& s)$/;"	f
operator ==	source\c11\1\Sales_item.h	/^operator==(const Sales_item &lhs, const Sales_item &rhs)$/;"	f
operator >>	source\c11\1\Sales_item.h	/^operator>>(std::istream& in, Sales_item& s)$/;"	f
revenue	source\c11\1\Sales_item.h	/^    double revenue;$/;"	m	class:Sales_item
units_sold	source\c11\1\Sales_item.h	/^    unsigned units_sold;$/;"	m	class:Sales_item
main	source\c11\1\add.cc	/^int main()$/;"	f
main	source\c11\1\add_item.cc	/^int main() $/;"	f
main	source\c11\1\add_item2.cc	/^int main() $/;"	f
main	source\c11\1\avg_price.cc	/^int main() $/;"	f
main	source\c11\1\for_ex.cc	/^int main()$/;"	f
main	source\c11\1\forcount.cc	/^int main()$/;"	f
main	source\c11\1\item_io.cc	/^int main() $/;"	f
main	source\c11\1\main_only.cc	/^int main() $/;"	f
main	source\c11\1\mysum.cc	/^int main() $/;"	f
main	source\c11\1\occurs.cc	/^int main()$/;"	f
main	source\c11\1\whilecount.cc	/^int main()$/;"	f
main	source\c11\2\Sales_data.cc	/^int main()$/;"	f
SALES_DATA_H	source\c11\2\Sales_data.h	31;"	d
Sales_data	source\c11\2\Sales_data.h	/^struct Sales_data {$/;"	s
bookNo	source\c11\2\Sales_data.h	/^	std::string bookNo;$/;"	m	struct:Sales_data
revenue	source\c11\2\Sales_data.h	/^	double revenue;$/;"	m	struct:Sales_data
units_sold	source\c11\2\Sales_data.h	/^	unsigned units_sold;$/;"	m	struct:Sales_data
main	source\c11\2\compounddecls.cc	/^int main()$/;"	f
main	source\c11\2\convs.cc	/^int main()$/;"	f
main	source\c11\2\dbl_ptr.cc	/^int main()$/;"	f
main	source\c11\2\decl-ex.cc	/^int main()$/;"	f
main	source\c11\2\escape.cc	/^int main() {$/;"	f
main	source\c11\2\inits.cc	/^int main() {$/;"	f
main	source\c11\2\literals.cc	/^int main() $/;"	f
main	source\c11\2\ref-ex.cc	/^int main()$/;"	f
main	source\c11\2\scope_levels.cc	/^int main()$/;"	f
reused	source\c11\2\scope_levels.cc	/^int reused = 42;  \/\/ reused has global scope$/;"	v
main	source\c11\2\unsigned.cc	/^int main()$/;"	f
main	source\c11\3\add_using.cc	/^int main()$/;"	f
main	source\c11\3\arrayScores.cc	/^int main ()$/;"	f
main	source\c11\3\cctype.cc	/^int main()$/;"	f
main	source\c11\3\char_repl.cc	/^int main()$/;"	f
main	source\c11\3\cstring_hdr.cc	/^int main() {$/;"	f
main	source\c11\3\getline.cc	/^int main() $/;"	f
main	source\c11\3\hexify.cc	/^int main()$/;"	f
main	source\c11\3\multidim.cc	/^int main()$/;"	f
main	source\c11\3\ptr_traversal2.cc	/^int main()$/;"	f
main	source\c11\3\square.cc	/^int main()$/;"	f
main	source\c11\3\strcompare.cc	/^int main()$/;"	f
main	source\c11\3\string_add.cc	/^int main() $/;"	f
main	source\c11\3\string_io.cc	/^int main()$/;"	f
main	source\c11\3\string_io2.cc	/^int main()$/;"	f
main	source\c11\3\string_size.cc	/^int main()$/;"	f
main	source\c11\3\string_size2.cc	/^int main() $/;"	f
main	source\c11\3\string_size3.cc	/^int main() $/;"	f
main	source\c11\3\vecScores.cc	/^int main()$/;"	f
main	source\c11\3\vecStrings2.cc	/^int main()$/;"	f
main	source\c11\3\vecSubs.cc	/^int main()$/;"	f
main	source\c11\3\vec_decls.cc	/^int main()$/;"	f
main	source\c11\3\word_echo.cc	/^int main() $/;"	f
main	source\c11\4\arith-ex.cc	/^int main()$/;"	f
ia	source\c11\4\arraysizeof.cc	/^int ia[] = {0,1,2,3,4,5,6,7,8,9};$/;"	v
main	source\c11\4\arraysizeof.cc	/^int main()$/;"	f
main	source\c11\4\cond.cc	/^int main()$/;"	f
main	source\c11\4\incr.cc	/^int main() $/;"	f
main	source\c11\4\int-div.cc	/^int main() $/;"	f
main	source\c11\4\oofe.cc	/^int main()$/;"	f
tolower	source\c11\4\oofe.cc	/^string &tolower(string &s)$/;"	f
toupper	source\c11\4\oofe.cc	/^string &toupper(string &s)$/;"	f
main	source\c11\4\overflow.cc	/^int main() $/;"	f
main	source\c11\4\prec.cc	/^int main() $/;"	f
main	source\c11\4\shift-prec.cc	/^int main()$/;"	f
main	source\c11\4\sizeof_pgm.cc	/^int main() $/;"	f
main	source\c11\4\unaryOps.cc	/^int main()$/;"	f
main	source\c11\4\vec_init.cc	/^int main()$/;"	f
main	source\c11\4\warn_dbltoint.cc	/^int main()$/;"	f
main	source\c11\5\add_item2.cc	/^int main() $/;"	f
main	source\c11\5\doWhile.cc	/^int main()$/;"	f
main	source\c11\5\guess.cc	/^int main()$/;"	f
badVers	source\c11\5\ifgrades.cc	/^string badVers(string lettergrade, unsigned grade)$/;"	f
goodVers	source\c11\5\ifgrades.cc	/^string goodVers(string lettergrade, unsigned grade)$/;"	f
grades	source\c11\5\ifgrades.cc	/^vector<unsigned> grades;$/;"	v
main	source\c11\5\ifgrades.cc	/^int main()$/;"	f
rightVers	source\c11\5\ifgrades.cc	/^string rightVers(string lettergrade, unsigned grade)$/;"	f
scores	source\c11\5\ifgrades.cc	/^const string scores[] = {"F", "D", "C", "B", "A", "A++"};$/;"	v
main	source\c11\5\othercnt.cc	/^int main()$/;"	f
main	source\c11\5\rangefor.cc	/^int main()$/;"	f
main	source\c11\5\vowels.cc	/^int main()$/;"	f
fact	source\c11\6\LocalMath.cc	/^int fact(int val)$/;"	f
factorial	source\c11\6\LocalMath.cc	/^int factorial(int val)$/;"	f
gcd	source\c11\6\LocalMath.cc	/^int gcd(int v1, int v2)$/;"	f
LOCALMATH_H	source\c11\6\LocalMath.h	32;"	d
arr	source\c11\6\arrRet.cc	/^int arr[10];          \/\/ arr is an array of ten ints$/;"	v
arrPtr	source\c11\6\arrRet.cc	/^int(*arrPtr(int i))[5]$/;"	f
arrRef	source\c11\6\arrRet.cc	/^int (&arrRef(int i))[5]$/;"	f
arrT	source\c11\6\arrRet.cc	/^typedef int arrT[10]; \/\/ arrT is a synonym for the type array of ten ints$/;"	t	file:
elemPtr	source\c11\6\arrRet.cc	/^int *elemPtr(int i)$/;"	f
even	source\c11\6\arrRet.cc	/^int even[] = {0,2,4,6,8};$/;"	v
main	source\c11\6\arrRet.cc	/^int main()$/;"	f
odd	source\c11\6\arrRet.cc	/^int odd[] = {1,3,5,7,9};$/;"	v
p1	source\c11\6\arrRet.cc	/^int *p1[10];          \/\/ p1 is an array of ten pointers$/;"	v
p2	source\c11\6\arrRet.cc	/^int (*p2)[10] = &arr; \/\/ p2 points to an array of ten ints$/;"	v
count_calls	source\c11\6\count-calls.cc	/^size_t count_calls()$/;"	f
main	source\c11\6\count-calls.cc	/^int main() $/;"	f
ErrCode	source\c11\6\errMsg_initList.cc	/^	ErrCode(int i) : num(i) { }  \/\/ initializes objects of type ErrCode$/;"	f	struct:ErrCode
ErrCode	source\c11\6\errMsg_initList.cc	/^struct ErrCode { $/;"	s	file:
error_msg	source\c11\6\errMsg_initList.cc	/^void error_msg(ErrCode e, const string *beg, const string *end)$/;"	f
error_msg	source\c11\6\errMsg_initList.cc	/^void error_msg(const string *beg, const string *end)$/;"	f
functionX	source\c11\6\errMsg_initList.cc	/^vector<string> functionX()$/;"	f
main	source\c11\6\errMsg_initList.cc	/^int main()$/;"	f
msg	source\c11\6\errMsg_initList.cc	/^	string msg()                 \/\/ member function of ErrCode$/;"	f	struct:ErrCode
num	source\c11\6\errMsg_initList.cc	/^	int num;  \/\/ data member, note uninitialized$/;"	m	struct:ErrCode	file:
main	source\c11\6\fact.cc	/^int main()$/;"	f
getFcn	source\c11\6\fcnptrRet.cc	/^(*getFcn(const string &fetch))(const string&, const string&)$/;"	f	class:string
largerLength	source\c11\6\fcnptrRet.cc	/^string::size_type largerLength(const string &s1, const string &s2)$/;"	f
main	source\c11\6\fcnptrRet.cc	/^int main()$/;"	f
sumLength	source\c11\6\fcnptrRet.cc	/^string::size_type sumLength(const string &s1, const string &s2)$/;"	f
main	source\c11\6\good_printmain.cc	/^int main() $/;"	f
print	source\c11\6\good_printmain.cc	/^void print(const int ia[], size_t size) $/;"	f
main	source\c11\6\inline_shorter.cc	/^int main()$/;"	f
shorterString	source\c11\6\inline_shorter.cc	/^shorterString(const string &s1, const string &s2)$/;"	f
main	source\c11\6\mainmath.cc	/^int main()$/;"	f
main	source\c11\6\mainret.cc	/^int main()$/;"	f
MAKE_PLURAL_H	source\c11\6\make_plural.h	40;"	d
make_plural	source\c11\6\make_plural.h	/^string make_plural(size_t ctr, const string &word, $/;"	f
main	source\c11\6\mk_plural.cc	/^int main()$/;"	f
PRINTFCNS_H	source\c11\6\printFcns.h	31;"	d
foo	source\c11\6\printFcns.h	/^inline foo() {$/;"	f
get_val	source\c11\6\ref-fcn.cc	/^char &get_val(string &str, string::size_type ix) $/;"	f
main	source\c11\6\ref-fcn.cc	/^int main() $/;"	f
find_char	source\c11\6\refparms.cc	/^string::size_type find_char(const string &s, char c, $/;"	f
find_val	source\c11\6\refparms.cc	/^vector<int>::const_iterator find_val($/;"	f
main	source\c11\6\refparms.cc	/^int main() $/;"	f
get	source\c11\6\refret-ex.cc	/^int &get(int *arry, int index) { return arry[index]; }$/;"	f
main	source\c11\6\refret-ex.cc	/^int main() {$/;"	f
main	source\c11\6\reset.cc	/^int main() $/;"	f
reset	source\c11\6\reset.cc	/^void reset(int &i)  $/;"	f
reset	source\c11\6\reset.cc	/^void reset(int *ip)$/;"	f
main	source\c11\6\stl-arr-fcns.cc	/^int main() $/;"	f
print	source\c11\6\stl-arr-fcns.cc	/^void print(const char *cp)$/;"	f
print	source\c11\6\stl-arr-fcns.cc	/^void print(const int *beg, const int *end) $/;"	f
main	source\c11\6\use_mk_plural.cc	/^int main()$/;"	f
make_plural	source\c11\6\use_mk_plural.cc	/^string make_plural(size_t ctr, const string &word, $/;"	f
main	source\c11\6\usefcnptr.cc	/^int main() $/;"	f
min_element	source\c11\6\usefcnptr.cc	/^int min_element(vector<int>::iterator beg, $/;"	f
pf	source\c11\6\usefcnptr.cc	/^int (*pf)(vector<int>::iterator, vector<int>::iterator) $/;"	v
main	source\c11\6\wdebug.cc	/^int main()$/;"	f
print	source\c11\6\wdebug.cc	/^void print(const int ia[], size_t size)$/;"	f
interestRate	source\c11\7\Account.cc	/^double Account::interestRate = initRate();$/;"	m	class:Account	file:
rate	source\c11\7\Account.cc	/^void Account::rate(double newRate) $/;"	f	class:Account
ACCOUNT_H	source\c11\7\Account.h	30;"	d
Account	source\c11\7\Account.h	/^	Account(): amount(0.0) { }$/;"	f	class:Account
Account	source\c11\7\Account.h	/^	Account(const std::string &s, double amt):$/;"	f	class:Account
Account	source\c11\7\Account.h	/^class Account {$/;"	c
accountType	source\c11\7\Account.h	/^    static const std::string accountType;$/;"	m	class:Account
amount	source\c11\7\Account.h	/^    double amount;$/;"	m	class:Account
balance	source\c11\7\Account.h	/^    double balance() { return amount; }$/;"	f	class:Account
calculate	source\c11\7\Account.h	/^    void calculate() { amount += amount * interestRate; }$/;"	f	class:Account
daily_tbl	source\c11\7\Account.h	/^    double daily_tbl[period];$/;"	m	class:Account
initRate	source\c11\7\Account.h	/^    static double initRate() { return .0225; }$/;"	f	class:Account
interestRate	source\c11\7\Account.h	/^    static double interestRate; $/;"	m	class:Account
owner	source\c11\7\Account.h	/^    std::string owner; $/;"	m	class:Account
period	source\c11\7\Account.h	/^    static const int period = 30;\/\/ period is a constant expression$/;"	m	class:Account
rate	source\c11\7\Account.h	/^    static double rate() { return interestRate; }$/;"	f	class:Account
enable	source\c11\7\Debug.cc	/^constexpr Debug HW_Subsystem::enable;$/;"	m	class:HW_Subsystem	file:
enable	source\c11\7\Debug.cc	/^constexpr Debug IO_Subsystem::enable;$/;"	m	class:IO_Subsystem	file:
DEBUG_H	source\c11\7\Debug.h	33;"	d
Debug	source\c11\7\Debug.h	/^	constexpr Debug(bool b = true): hw(b), io(b), other(b) { }$/;"	f	class:Debug
Debug	source\c11\7\Debug.h	/^	constexpr Debug(bool h, bool i, bool o): $/;"	f	class:Debug
Debug	source\c11\7\Debug.h	/^class Debug {$/;"	c
HW_Subsystem	source\c11\7\Debug.h	/^	HW_Subsystem(): debug(false) { }          \/\/ by default no debugging$/;"	f	class:HW_Subsystem
HW_Subsystem	source\c11\7\Debug.h	/^class HW_Subsystem {$/;"	c
IO_Subsystem	source\c11\7\Debug.h	/^	IO_Subsystem(): debug(false) { }          \/\/ by default no debugging$/;"	f	class:IO_Subsystem
IO_Subsystem	source\c11\7\Debug.h	/^class IO_Subsystem {$/;"	c
any	source\c11\7\Debug.h	/^	constexpr bool any() { return hw || io || other; }$/;"	f	class:Debug
app	source\c11\7\Debug.h	/^	constexpr bool app() { return other; }$/;"	f	class:Debug
debug	source\c11\7\Debug.h	/^	Debug debug;$/;"	m	class:HW_Subsystem
debug	source\c11\7\Debug.h	/^	Debug debug;$/;"	m	class:IO_Subsystem
default_debug	source\c11\7\Debug.h	/^	bool default_debug()   { return enable.any() && debug.any(); }$/;"	f	class:IO_Subsystem
default_debug	source\c11\7\Debug.h	/^	bool default_debug() { return enable.any() && debug.any(); }$/;"	f	class:HW_Subsystem
field_debug	source\c11\7\Debug.h	/^	bool field_debug()     { return debug.any(); }$/;"	f	class:IO_Subsystem
field_debug	source\c11\7\Debug.h	/^	bool field_debug()   { return debug.any(); }$/;"	f	class:HW_Subsystem
hardware	source\c11\7\Debug.h	/^	constexpr bool hardware() { return hw || io; }$/;"	f	class:Debug
hw	source\c11\7\Debug.h	/^	bool hw;    \/\/ hardware errors other than IO errors$/;"	m	class:Debug
io	source\c11\7\Debug.h	/^	bool io;    \/\/ IO errors$/;"	m	class:Debug
other	source\c11\7\Debug.h	/^	bool other; \/\/ other errors$/;"	m	class:Debug
set_debug	source\c11\7\Debug.h	/^	void set_debug(bool b) { debug.set_hw(b); }  \/\/ turn on hardware debugging$/;"	f	class:HW_Subsystem
set_debug	source\c11\7\Debug.h	/^	void set_debug(bool b) { debug.set_io(b); }  \/\/ turn on IO debugging$/;"	f	class:IO_Subsystem
set_hw	source\c11\7\Debug.h	/^	void set_hw(bool b) { hw = b; }$/;"	f	class:Debug
set_io	source\c11\7\Debug.h	/^	void set_io(bool b) { io = b; }$/;"	f	class:Debug
set_other	source\c11\7\Debug.h	/^	void set_other(bool b) { hw = b; }$/;"	f	class:Debug
Sales_data	source\c11\7\Sales_data.cc	/^Sales_data::Sales_data(std::istream &is) $/;"	f	class:Sales_data
add	source\c11\7\Sales_data.cc	/^add(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
avg_price	source\c11\7\Sales_data.cc	/^Sales_data::avg_price() const {$/;"	f	class:Sales_data
combine	source\c11\7\Sales_data.cc	/^Sales_data::combine(const Sales_data &rhs)$/;"	f	class:Sales_data
print	source\c11\7\Sales_data.cc	/^print(ostream &os, const Sales_data &item)$/;"	f
read	source\c11\7\Sales_data.cc	/^read(istream &is, Sales_data &item)$/;"	f
SALES_DATA_H	source\c11\7\Sales_data.h	31;"	d
Sales_data	source\c11\7\Sales_data.h	/^	Sales_data(): units_sold(0), revenue(0.0) { }$/;"	f	class:Sales_data
Sales_data	source\c11\7\Sales_data.h	/^	Sales_data(const std::string &s): $/;"	f	class:Sales_data
Sales_data	source\c11\7\Sales_data.h	/^	Sales_data(const std::string &s, unsigned n, double p):$/;"	f	class:Sales_data
Sales_data	source\c11\7\Sales_data.h	/^class Sales_data {$/;"	c
bookNo	source\c11\7\Sales_data.h	/^	std::string bookNo;$/;"	m	class:Sales_data
compareIsbn	source\c11\7\Sales_data.h	/^bool compareIsbn(const Sales_data &lhs, const Sales_data &rhs)$/;"	f
isbn	source\c11\7\Sales_data.h	/^	std::string isbn() const { return bookNo; }$/;"	f	class:Sales_data
revenue	source\c11\7\Sales_data.h	/^	double revenue;$/;"	m	class:Sales_data
units_sold	source\c11\7\Sales_data.h	/^	unsigned units_sold;$/;"	m	class:Sales_data
Screen	source\c11\7\Screen.h	/^	Screen(): cursor(0), height(0), width(0) { }$/;"	f	class:Screen
Screen	source\c11\7\Screen.h	/^    Screen(pos ht = 0, pos wd = 0): $/;"	f	class:Screen
Screen	source\c11\7\Screen.h	/^    Screen(pos ht, pos wd, char c): cursor(0),$/;"	f	class:Screen
Screen	source\c11\7\Screen.h	/^class Screen {$/;"	c
bkground	source\c11\7\Screen.h	/^	static const char bkground = ' ';$/;"	m	class:Screen
clear	source\c11\7\Screen.h	/^Screen &Screen::clear(char c) $/;"	f	class:Screen
contents	source\c11\7\Screen.h	/^    std::string contents;$/;"	m	class:Screen
cursor	source\c11\7\Screen.h	/^    pos cursor;$/;"	m	class:Screen
display	source\c11\7\Screen.h	/^    Screen &display(std::ostream &os) $/;"	f	class:Screen
display	source\c11\7\Screen.h	/^    const Screen &display(std::ostream &os) const$/;"	f	class:Screen
do_display	source\c11\7\Screen.h	/^    void do_display(std::ostream &os) const {os << contents;}$/;"	f	class:Screen
get	source\c11\7\Screen.h	/^    char get() const              \/\/ get the character at the cursor$/;"	f	class:Screen
get	source\c11\7\Screen.h	/^char Screen::get(pos r, pos c) const \/\/ declared as inline in the class$/;"	f	class:Screen
height	source\c11\7\Screen.h	/^    pos height, width;$/;"	m	class:Screen
move	source\c11\7\Screen.h	/^Screen &Screen::move(pos r, pos c)$/;"	f	class:Screen
pos	source\c11\7\Screen.h	/^    typedef std::string::size_type pos;$/;"	t	class:Screen
set	source\c11\7\Screen.h	/^inline Screen &Screen::set(char c) $/;"	f	class:Screen
set	source\c11\7\Screen.h	/^inline Screen &Screen::set(pos r, pos col, char ch)$/;"	f	class:Screen
width	source\c11\7\Screen.h	/^    pos height, width;$/;"	m	class:Screen
ScreenIndex	source\c11\7\WindowMgr.h	/^	typedef std::vector<Screen>::size_type ScreenIndex;$/;"	t	class:Window_mgr
WINDOW_MGR	source\c11\7\WindowMgr.h	31;"	d
Window_mgr	source\c11\7\WindowMgr.h	/^class Window_mgr {$/;"	c
addScreen	source\c11\7\WindowMgr.h	/^Window_mgr::addScreen(const Screen &s)$/;"	f	class:Window_mgr
clear	source\c11\7\WindowMgr.h	/^void Window_mgr::clear(ScreenIndex i)$/;"	f	class:Window_mgr
resize	source\c11\7\WindowMgr.h	/^Window_mgr::resize(Screen::pos r, Screen::pos c, ScreenIndex i)$/;"	f	class:Window_mgr
main	source\c11\7\add_item.cc	/^int main()$/;"	f
main	source\c11\7\avg_price.cc	/^int main()$/;"	f
main	source\c11\7\useAccount.cc	/^int main()$/;"	f
main	source\c11\7\useDebug.cc	/^int main()$/;"	f
main	source\c11\7\useScreen.cc	/^int main()$/;"	f
main	source\c11\8\add_item.cc	/^int main()$/;"	f
main	source\c11\8\add_itemV2.cc	/^int main()$/;"	f
main	source\c11\8\buf.cc	/^int main()$/;"	f
main	source\c11\8\clearIO.cc	/^int main()$/;"	f
off	source\c11\8\clearIO.cc	/^void off()$/;"	f
read	source\c11\8\clearIO.cc	/^void read()$/;"	f
main	source\c11\8\fileIO.cc	/^int main(int argc, char* argv[])$/;"	f
process	source\c11\8\fileIO.cc	/^void process(ifstream &is)$/;"	f
PersonInfo	source\c11\8\sstream.cc	/^struct PersonInfo { $/;"	s	file:
format	source\c11\8\sstream.cc	/^string format(const string &s) { return s; }$/;"	f
getData	source\c11\8\sstream.cc	/^getData(istream &is)$/;"	f
main	source\c11\8\sstream.cc	/^int main()$/;"	f
name	source\c11\8\sstream.cc	/^	string name;$/;"	m	struct:PersonInfo	file:
phones	source\c11\8\sstream.cc	/^	vector<string> phones;$/;"	m	struct:PersonInfo	file:
process	source\c11\8\sstream.cc	/^ostream& process(ostream &os, vector<PersonInfo> people)$/;"	f
valid	source\c11\8\sstream.cc	/^bool valid(const string &)$/;"	f
STRCONVS_H	source\c11\9\StrConvs.h	2;"	d
stod	source\c11\9\StrConvs.h	/^double stod(const std::string &s, std::size_t * = 0)$/;"	f
to_string	source\c11\9\StrConvs.h	/^std::string to_string(int i)$/;"	f
main	source\c11\9\capacity.cc	/^int main()$/;"	f
main	source\c11\9\erase1.cc	/^int main()$/;"	f
main	source\c11\9\erase2.cc	/^int main() $/;"	f
main	source\c11\9\find-str.cc	/^int main() $/;"	f
main	source\c11\9\find_ops.cc	/^int main() $/;"	f
main	source\c11\9\refreshIter.cc	/^int main()$/;"	f
printVec	source\c11\9\refreshIter.cc	/^void printVec(const vector<int> &vi)$/;"	f
main	source\c11\9\stack.cc	/^int main()$/;"	f
main	source\c11\9\str_assignOps.cc	/^int main() $/;"	f
main	source\c11\9\substr.cc	/^int main()$/;"	f
main	source\c11\9\useConvs.cc	/^int main()$/;"	f
a	test\b.cpp	/^void a(){$/;"	f
main	test\c.cpp	/^int main(){$/;"	f
a	test\class.cpp	/^class a{$/;"	c	file:
b	test\class.cpp	/^		typedef int b[10];$/;"	t	class:a	file:
c	test\class.cpp	/^	typedef int c;$/;"	t	class:a	file:
main	test\class.cpp	/^int main(){$/;"	f
Any	test\factory.h	/^    Any() : _var_ptr(NULL) {}$/;"	f	class:unise::Any
Any	test\factory.h	/^    Any(const Any &other) : _var_ptr(other._var_ptr ? other._var_ptr->clone() : NULL) {}$/;"	f	class:unise::Any
Any	test\factory.h	/^    Any(const T &value) : _var_ptr(new Type<T>(value)) {}$/;"	f	class:unise::Any
Any	test\factory.h	/^class Any$/;"	c	namespace:unise
BaseClassMap	test\factory.h	/^typedef std::map<std::string, FactoryMap> BaseClassMap;$/;"	t	namespace:unise
ConcreteFactory	test\factory.h	/^struct ConcreteFactory {$/;"	s	namespace:unise
FactoryIntf	test\factory.h	/^    typedef Any(*FactoryIntf)();$/;"	t	struct:unise::ConcreteFactory
FactoryMap	test\factory.h	/^typedef std::map<std::string, ConcreteFactory> FactoryMap;$/;"	t	namespace:unise
REGISTER_CLASS	test\factory.h	154;"	d
REGISTER_FACTORY	test\factory.h	107;"	d
Type	test\factory.h	/^        explicit Type(const T &value) : _var(value) {}$/;"	f	class:unise::Any::Type
Type	test\factory.h	/^    class Type : public Typeless$/;"	c	class:unise::Any
Typeless	test\factory.h	/^    class Typeless$/;"	c	class:unise::Any
UNISE_FACTORY_H_	test\factory.h	36;"	d
_var	test\factory.h	/^        T _var;             \/\/\/< The real variable of a specific type$/;"	m	class:unise::Any::Type
_var_ptr	test\factory.h	/^    Typeless *_var_ptr;     \/\/\/< Typeless variable pointer$/;"	m	class:unise::Any
any_cast	test\factory.h	/^    T *any_cast() {$/;"	f	class:unise::Any
clone	test\factory.h	/^        virtual Typeless *clone() const {$/;"	f	class:unise::Any::Type
get_instance	test\factory.h	/^    FactoryIntf  get_instance;      \/\/\/< Function pointer to get instance$/;"	m	struct:unise::ConcreteFactory
get_singleton	test\factory.h	/^    FactoryIntf  get_singleton;     \/\/\/< Function pointer to get singleton$/;"	m	struct:unise::ConcreteFactory
unise	test\factory.h	/^namespace unise$/;"	n
~Any	test\factory.h	/^    ~Any() {$/;"	f	class:unise::Any
~Typeless	test\factory.h	/^        virtual ~Typeless() {}$/;"	f	class:unise::Any::Typeless
PRINT	test\h\print.h	2;"	d
num	test\h\print.h	/^	int num;$/;"	m	class:print
print	test\h\print.h	/^class print{$/;"	c
main	test\int.cpp	/^int main(){$/;"	f
main	test\main.cpp	/^int main(){$/;"	f
test	test\one.cpp	/^void test(){$/;"	f
main	test\one_main.cpp	/^int main(){$/;"	f
p	test\origin.cpp	/^void p(string s1,string s2){$/;"	f
XY	test\pj.cpp	2;"	d	file:
main	test\pj.cpp	/^int main(){$/;"	f
print	test\print.cpp	/^print::print(int s,string str):num(s){$/;"	f	class:print
Singleton	test\singleton.h	/^class Singleton : boost::noncopyable$/;"	c	namespace:unise
UNISE_SINGLETON_H_	test\singleton.h	2;"	d
_delete	test\singleton.h	/^    __attribute__((destructor)) static void _delete() {$/;"	f	class:unise::Singleton
_instance	test\singleton.h	/^    static T*             _instance;    \/\/\/< The singleton instance$/;"	m	class:unise::Singleton
_instance	test\singleton.h	/^T* Singleton<T>::_instance = NULL;$/;"	m	class:unise::Singleton
_new	test\singleton.h	/^    static void _new() {$/;"	f	class:unise::Singleton
_p_once	test\singleton.h	/^    static pthread_once_t _p_once;      \/\/\/< Initialization once control$/;"	m	class:unise::Singleton
_p_once	test\singleton.h	/^pthread_once_t Singleton<T>::_p_once = PTHREAD_ONCE_INIT;$/;"	m	class:unise::Singleton
get	test\singleton.h	/^    static T* get() {$/;"	f	class:unise::Singleton
unise	test\singleton.h	/^namespace unise$/;"	n
main	test\sint.cpp	/^int main(){$/;"	f
main	test\size.cpp	/^int main(){$/;"	f
main	test\sprint.cpp	/^int main(){$/;"	f
main	test\sprintf.cpp	/^int main(){$/;"	f
main	test\string.cpp	/^int main(){$/;"	f
debug	test\test.cpp	6;"	d	file:
main	test\test.cpp	/^int main(){$/;"	f
wr	test\test.cpp	/^void wr(int i,...){$/;"	f
base	test\virtual.cpp	/^	base(){$/;"	f	struct:base
base	test\virtual.cpp	/^struct base{$/;"	s	file:
child	test\virtual.cpp	/^	child(){$/;"	f	struct:child
child	test\virtual.cpp	/^struct child:public base{$/;"	s	file:
main	test\virtual.cpp	/^int main(){$/;"	f
p	test\virtual.cpp	/^	inline void p()const{$/;"	f	struct:base
p	test\virtual.cpp	/^	inline void p()const{$/;"	f	struct:child
print	test\virtual.cpp	/^	void print()const{$/;"	f	struct:base
print	test\virtual.cpp	/^	void print()const{$/;"	f	struct:child
print	test\virtual.cpp	/^	void print()const{$/;"	f	struct:son
print	test\virtual.cpp	/^	void print(string _str) const {$/;"	f	struct:base
print	test\virtual.cpp	/^	void print(string str){$/;"	f	struct:son
son	test\virtual.cpp	/^	son(){$/;"	f	struct:son
son	test\virtual.cpp	/^struct son:public child{$/;"	s	file:
str	test\virtual.cpp	/^	string str="qinhan";$/;"	m	struct:base	file:
~base	test\virtual.cpp	/^	~base(){$/;"	f	struct:base
~child	test\virtual.cpp	/^	~child(){$/;"	f	struct:child
~son	test\virtual.cpp	/^	~son(){$/;"	f	struct:son
main	test\x.cpp	/^int main()  $/;"	f
paster	test\x.cpp	2;"	d	file:
token9	test\x.cpp	/^int token9 = 100;  $/;"	v
ONE	test\xxyy.cpp	3;"	d	file:
main	test\xxyy.cpp	/^int main(){$/;"	f
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
